//
// Generated by Bluespec Compiler, version 2019.05.beta1 (build b38abf678, 2019-05-06)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    64
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port2__write, dw_valid$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [5 : 0] rg_cset_in_cache;
  wire [5 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [63 : 0] rg_lrsc_pa;
  wire [63 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  reg [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_fabric_write_reqs
  reg [130 : 0] f_fabric_write_reqs$D_IN;
  wire [130 : 0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$CLR,
       f_fabric_write_reqs$DEQ,
       f_fabric_write_reqs$EMPTY_N,
       f_fabric_write_reqs$ENQ,
       f_fabric_write_reqs$FULL_N;

  // ports of submodule f_pte_writebacks
  wire [127 : 0] f_pte_writebacks$D_IN, f_pte_writebacks$D_OUT;
  wire f_pte_writebacks$CLR,
       f_pte_writebacks$DEQ,
       f_pte_writebacks$EMPTY_N,
       f_pte_writebacks$ENQ,
       f_pte_writebacks$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  reg [96 : 0] master_xactor_f_rd_addr$D_IN;
  wire [96 : 0] master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [96 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [72 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [52 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [5 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // ports of submodule tlb
  reg [1 : 0] tlb$insert_level;
  wire [130 : 0] tlb$lookup;
  wire [63 : 0] tlb$insert_pte, tlb$insert_pte_pa;
  wire [26 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [15 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_fabric_send_write_req,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_ptw_level_2,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_RL_rl_writeback_updated_PTE,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_fabric_send_write_req,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_ptw_level_2,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_RL_rl_writeback_updated_PTE,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [130 : 0] MUX_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_f_fabric_write_reqs$enq_1__VAL_3,
		 MUX_f_fabric_write_reqs$enq_1__VAL_4;
  wire [96 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_3,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_4,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_5;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2;
  wire [52 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [4 : 0] MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_14,
	       MUX_rg_state$write_1__VAL_15,
	       MUX_rg_state$write_1__VAL_17,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_4;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1, MUX_rg_exc_code$write_1__VAL_5;
  wire MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__PSEL_1,
       MUX_master_xactor_f_rd_addr$enq_1__PSEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_1,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_3,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_exc_code$write_1__SEL_8,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_17,
       MUX_rg_state$write_1__SEL_18,
       MUX_rg_state$write_1__SEL_3,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3,
       MUX_tlb$insert_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3377;
  reg [31 : 0] v__h4533;
  reg [31 : 0] v__h4634;
  reg [31 : 0] v__h4783;
  reg [31 : 0] v__h14534;
  reg [31 : 0] v__h18122;
  reg [31 : 0] v__h21494;
  reg [31 : 0] v__h22412;
  reg [31 : 0] v__h22169;
  reg [31 : 0] v__h22700;
  reg [31 : 0] v__h22812;
  reg [31 : 0] v__h22341;
  reg [31 : 0] v__h23445;
  reg [31 : 0] v__h23205;
  reg [31 : 0] v__h23845;
  reg [31 : 0] v__h23733;
  reg [31 : 0] v__h23374;
  reg [31 : 0] v__h24316;
  reg [31 : 0] v__h24387;
  reg [31 : 0] v__h24469;
  reg [31 : 0] v__h24245;
  reg [31 : 0] v__h24596;
  reg [31 : 0] v__h25355;
  reg [31 : 0] v__h25577;
  reg [31 : 0] v__h27176;
  reg [31 : 0] v__h27526;
  reg [31 : 0] v__h28626;
  reg [31 : 0] v__h28733;
  reg [31 : 0] v__h28838;
  reg [31 : 0] v__h28918;
  reg [31 : 0] v__h29128;
  reg [31 : 0] v__h29246;
  reg [31 : 0] v__h29540;
  reg [31 : 0] v__h29715;
  reg [31 : 0] v__h31974;
  reg [31 : 0] v__h29811;
  reg [31 : 0] v__h32581;
  reg [31 : 0] v__h32542;
  reg [31 : 0] v__h4162;
  reg [31 : 0] v__h32930;
  reg [31 : 0] v__h34106;
  reg [31 : 0] v__h3371;
  reg [31 : 0] v__h4156;
  reg [31 : 0] v__h4527;
  reg [31 : 0] v__h4628;
  reg [31 : 0] v__h4777;
  reg [31 : 0] v__h14528;
  reg [31 : 0] v__h18116;
  reg [31 : 0] v__h21488;
  reg [31 : 0] v__h22163;
  reg [31 : 0] v__h22335;
  reg [31 : 0] v__h22406;
  reg [31 : 0] v__h22694;
  reg [31 : 0] v__h22806;
  reg [31 : 0] v__h23199;
  reg [31 : 0] v__h23368;
  reg [31 : 0] v__h23439;
  reg [31 : 0] v__h23727;
  reg [31 : 0] v__h23839;
  reg [31 : 0] v__h24239;
  reg [31 : 0] v__h24310;
  reg [31 : 0] v__h24381;
  reg [31 : 0] v__h24463;
  reg [31 : 0] v__h24590;
  reg [31 : 0] v__h25349;
  reg [31 : 0] v__h25571;
  reg [31 : 0] v__h27170;
  reg [31 : 0] v__h27520;
  reg [31 : 0] v__h28620;
  reg [31 : 0] v__h28727;
  reg [31 : 0] v__h28832;
  reg [31 : 0] v__h28912;
  reg [31 : 0] v__h29122;
  reg [31 : 0] v__h29240;
  reg [31 : 0] v__h29534;
  reg [31 : 0] v__h29709;
  reg [31 : 0] v__h29805;
  reg [31 : 0] v__h31968;
  reg [31 : 0] v__h32536;
  reg [31 : 0] v__h32575;
  reg [31 : 0] v__h32924;
  reg [31 : 0] v__h34100;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result1682_0x4_re_ETC__q50,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result4354_0x4_re_ETC__q30,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result8406_0x4_re_ETC__q34,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result8471_0x4_re_ETC__q35,
	       CASE_rg_f3_0b0_IF_rg_addr_3_BITS_2_TO_0_10_EQ__ETC__q52,
	       CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q33,
	       CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q53,
	       IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682,
	       IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691,
	       IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747,
	       IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524,
	       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552,
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700,
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765,
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578,
	       IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640,
	       _theResult_____2__h18620,
	       _theResult_____2__h29887,
	       _theResult___fst__h6215,
	       ld_val__h27635,
	       mem_req_wr_data_wdata__h3133,
	       new_ld_val__h29841,
	       w1__h18612,
	       w1__h29875,
	       w1__h29879;
  reg [7 : 0] mem_req_wr_data_wstrb__h3134;
  reg [2 : 0] value__h29427, x__h2949;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29,
      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d299,
      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d304,
      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d228,
      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d236,
      IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250,
      IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d311;
  wire [63 : 0] IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_1_E_ETC___d586,
		IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249,
		IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571,
		IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704,
		IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d773,
		_theResult___fst__h3069,
		_theResult___snd_fst__h5803,
		_theResult___snd_fst__h5874,
		_theResult___snd_fst__h6444,
		_theResult___snd_snd_fst__h5805,
		_theResult___snd_snd_fst__h5876,
		cline_fabric_addr__h24649,
		lev_0_pte_pa__h23477,
		lev_0_pte_pa_w64_fa__h23479,
		lev_1_PTN_pa__h22442,
		lev_1_pte_pa__h22444,
		lev_1_pte_pa_w64_fa__h22446,
		lev_2_pte_pa__h21547,
		lev_2_pte_pa_w64_fa__h21549,
		new_st_val__h18342,
		new_st_val__h18624,
		new_st_val__h18715,
		new_st_val__h19695,
		new_st_val__h19699,
		new_st_val__h19703,
		new_st_val__h19707,
		new_st_val__h19712,
		new_st_val__h19718,
		new_st_val__h19723,
		new_st_val__h29891,
		new_st_val__h29982,
		new_st_val__h31842,
		new_st_val__h31846,
		new_st_val__h31850,
		new_st_val__h31854,
		new_st_val__h31859,
		new_st_val__h31865,
		new_st_val__h31870,
		new_value__h17212,
		new_value__h7241,
		pa___1__h6221,
		pa___1__h6270,
		pa___1__h6339,
		pte___1__h6493,
		pte___1__h6521,
		pte___2__h6213,
		result__h13622,
		result__h13650,
		result__h13678,
		result__h13706,
		result__h13734,
		result__h13762,
		result__h13790,
		result__h13818,
		result__h13863,
		result__h13891,
		result__h13919,
		result__h13947,
		result__h13975,
		result__h14003,
		result__h14031,
		result__h14059,
		result__h14104,
		result__h14132,
		result__h14160,
		result__h14188,
		result__h14229,
		result__h14257,
		result__h14285,
		result__h14313,
		result__h14354,
		result__h14382,
		result__h14421,
		result__h14449,
		result__h27695,
		result__h27725,
		result__h27752,
		result__h27779,
		result__h27806,
		result__h27833,
		result__h27860,
		result__h27887,
		result__h27931,
		result__h27958,
		result__h27985,
		result__h28012,
		result__h28039,
		result__h28066,
		result__h28093,
		result__h28120,
		result__h28164,
		result__h28191,
		result__h28218,
		result__h28245,
		result__h28285,
		result__h28312,
		result__h28339,
		result__h28366,
		result__h28406,
		result__h28433,
		result__h28471,
		result__h28498,
		result__h30070,
		result__h30978,
		result__h31006,
		result__h31034,
		result__h31062,
		result__h31090,
		result__h31118,
		result__h31146,
		result__h31191,
		result__h31219,
		result__h31247,
		result__h31275,
		result__h31303,
		result__h31331,
		result__h31359,
		result__h31387,
		result__h31432,
		result__h31460,
		result__h31488,
		result__h31516,
		result__h31557,
		result__h31585,
		result__h31613,
		result__h31641,
		result__h31682,
		result__h31710,
		result__h31749,
		result__h31777,
		satp_pa__h2004,
		value__h6538,
		vpn_0_pa__h23476,
		vpn_1_pa__h22443,
		vpn_2_pa__h21546,
		w1___1__h18683,
		w1___1__h29950,
		w2___1__h29951,
		w2__h29881,
		word64__h7059,
		x1_avValue_pa__h5712,
		x__h14921,
		x__h29870,
		y__h7266;
  wire [55 : 0] x__h22523, x__h4903, x__h6224, x__h6273, x__h6342;
  wire [31 : 0] IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC__q31,
		ld_val7635_BITS_31_TO_0__q38,
		ld_val7635_BITS_63_TO_32__q45,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10,
		rg_st_amo_val_BITS_31_TO_0__q32,
		w19875_BITS_31_TO_0__q51,
		word64059_BITS_31_TO_0__q17,
		word64059_BITS_63_TO_32__q24;
  wire [15 : 0] ld_val7635_BITS_15_TO_0__q37,
		ld_val7635_BITS_31_TO_16__q41,
		ld_val7635_BITS_47_TO_32__q44,
		ld_val7635_BITS_63_TO_48__q48,
		master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6,
		master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13,
		word64059_BITS_15_TO_0__q16,
		word64059_BITS_31_TO_16__q21,
		word64059_BITS_47_TO_32__q23,
		word64059_BITS_63_TO_48__q27;
  wire [7 : 0] ld_val7635_BITS_15_TO_8__q39,
	       ld_val7635_BITS_23_TO_16__q40,
	       ld_val7635_BITS_31_TO_24__q42,
	       ld_val7635_BITS_39_TO_32__q43,
	       ld_val7635_BITS_47_TO_40__q46,
	       ld_val7635_BITS_55_TO_48__q47,
	       ld_val7635_BITS_63_TO_56__q49,
	       ld_val7635_BITS_7_TO_0__q36,
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1,
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4,
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5,
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7,
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8,
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11,
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12,
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14,
	       strobe64__h3068,
	       strobe64__h3071,
	       strobe64__h3074,
	       word64059_BITS_15_TO_8__q18,
	       word64059_BITS_23_TO_16__q20,
	       word64059_BITS_31_TO_24__q19,
	       word64059_BITS_39_TO_32__q22,
	       word64059_BITS_47_TO_40__q25,
	       word64059_BITS_55_TO_48__q26,
	       word64059_BITS_63_TO_56__q28,
	       word64059_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h2916;
  wire [4 : 0] IF_rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d407,
	       IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d406,
	       IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d409;
  wire [3 : 0] access_exc_code__h2685,
	       b__h21448,
	       exc_code___1__h6113,
	       x1_avValue_exc_code__h5713;
  wire IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d307,
       IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_NOT_ETC___d242,
       IF_rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d317,
       IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d316,
       IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443,
       NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d298,
       NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d303,
       NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d306,
       NOT_cfg_verbosity_read__9_ULE_2_021___d1022,
       NOT_cfg_verbosity_read__9_ULT_2_13___d414,
       NOT_dmem_not_imem_24_AND_rg_op_09_EQ_0_10_OR_r_ETC___d349,
       NOT_dmem_not_imem_24_OR_NOT_rg_op_09_EQ_0_10_1_ETC___d131,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d634,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d647,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d776,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d794,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d825,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d830,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d836,
       NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d840,
       NOT_master_xactor_f_rd_data_first__58_BITS_2_T_ETC___d882,
       NOT_master_xactor_f_rd_data_first__58_BITS_2_T_ETC___d945,
       NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d889,
       NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d951,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d252,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d445,
       NOT_req_f3_BITS_1_TO_0_334_EQ_0b0_335_336_AND__ETC___d1355,
       NOT_rg_f3_06_EQ_0b11_43_44_OR_rg_amo_funct7_14_ETC___d308,
       NOT_rg_op_09_EQ_0_10_11_AND_NOT_rg_op_09_EQ_2__ETC___d400,
       NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d454,
       NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d644,
       NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d823,
       NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d828,
       NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d834,
       NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d642,
       NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d797,
       NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d803,
       NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d809,
       NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d356,
       NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d379,
       NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d417,
       NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d593,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d165,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d319,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d361,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d376,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d428,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d429,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d436,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d439,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d460,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d466,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d467,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d596,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d601,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d607,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d614,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d620,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d626,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d636,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d649,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d771,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d772,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d778,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d784,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d790,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d796,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d801,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d802,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d807,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d813,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d814,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d819,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d820,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d827,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d838,
       NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d842,
       NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d146,
       NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d162,
       cfg_verbosity_read__9_ULE_1___d40,
       dmem_not_imem_AND_rg_op_09_EQ_0_10_OR_rg_op_09_ETC___d351,
       dmem_not_imem_OR_NOT_rg_op_09_EQ_0_10_11_AND_N_ETC___d123,
       lrsc_result__h14911,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d1002,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d924,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d932,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d936,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d967,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d971,
       master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d977,
       ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201,
       ram_state_and_ctag_cset_b_read__96_BIT_52_97_A_ETC___d446,
       req_f3_BITS_1_TO_0_334_EQ_0b0_335_OR_req_f3_BI_ETC___d1364,
       rg_amo_funct7_14_BITS_6_TO_2_15_EQ_0b10_16_AND_ETC___d623,
       rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258,
       rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d395,
       rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d432,
       rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d457,
       rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d461,
       rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d598,
       rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d617,
       rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d455,
       rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d645,
       rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d767,
       rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d140,
       rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d153,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d149,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d321,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d364,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d403,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d404,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d422,
       rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d425,
       rg_priv_2_ULE_0b1___d83,
       rg_state_9_EQ_13_049_AND_rg_op_09_EQ_0_10_OR_r_ETC___d1051,
       tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d129,
       tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d358,
       y__h6039;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h27635 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h29841 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h27635;
      MUX_dw_output_ld_val$wset_1__SEL_2: word64 = new_ld_val__h29841;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 5'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule f_fabric_write_reqs
  FIFO2 #(.width(32'd131), .guarded(32'd1)) f_fabric_write_reqs(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_fabric_write_reqs$D_IN),
								.ENQ(f_fabric_write_reqs$ENQ),
								.DEQ(f_fabric_write_reqs$DEQ),
								.CLR(f_fabric_write_reqs$CLR),
								.D_OUT(f_fabric_write_reqs$D_OUT),
								.FULL_N(f_fabric_write_reqs$FULL_N),
								.EMPTY_N(f_fabric_write_reqs$EMPTY_N));

  // submodule f_pte_writebacks
  FIFO2 #(.width(32'd128), .guarded(32'd1)) f_pte_writebacks(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_pte_writebacks$D_IN),
							     .ENQ(f_pte_writebacks$ENQ),
							     .DEQ(f_pte_writebacks$DEQ),
							     .CLR(f_pte_writebacks$CLR),
							     .D_OUT(f_pte_writebacks$D_OUT),
							     .FULL_N(f_pte_writebacks$FULL_N),
							     .EMPTY_N(f_pte_writebacks$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd53),
	  .MEMSIZE(7'd64)) ram_state_and_ctag_cset(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(ram_state_and_ctag_cset$ADDRA),
						   .ADDRB(ram_state_and_ctag_cset$ADDRB),
						   .DIA(ram_state_and_ctag_cset$DIA),
						   .DIB(ram_state_and_ctag_cset$DIB),
						   .WEA(ram_state_and_ctag_cset$WEA),
						   .WEB(ram_state_and_ctag_cset$WEB),
						   .ENA(ram_state_and_ctag_cset$ENA),
						   .ENB(ram_state_and_ctag_cset$ENB),
						   .DOA(),
						   .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_flash_mem_addr_base(),
		    .m_flash_mem_addr_size(),
		    .m_flash_mem_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio_0_addr_base(),
		    .m_gpio_0_addr_size(),
		    .m_gpio_0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_fabric_send_write_req
  assign CAN_FIRE_RL_rl_fabric_send_write_req =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_fabric_send_write_req =
	     CAN_FIRE_RL_rl_fabric_send_write_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 6'd63 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 5'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__9_ULE_1___d40 || tlb$RDY_lookup) &&
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup) &&
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d321 &&
	     rg_state == 5'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd5 &&
	     b__h21448 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_2
  assign CAN_FIRE_RL_rl_ptw_level_2 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     NOT_master_xactor_f_rd_data_first__58_BITS_2_T_ETC___d882 &&
	     rg_state == 5'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_2 =
	     MUX_master_xactor_f_rd_addr$enq_1__PSEL_1 ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     NOT_master_xactor_f_rd_data_first__58_BITS_2_T_ETC___d945 &&
	     rg_state == 5'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     MUX_master_xactor_f_rd_addr$enq_1__PSEL_2 ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      !master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5] ||
	      !master_xactor_f_rd_data$D_OUT[6] &&
	      !master_xactor_f_rd_data$D_OUT[4] ||
	      tlb$RDY_insert) &&
	     rg_state == 5'd8 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd9 &&
	     b__h21448 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 5'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     master_xactor_f_rd_addr$FULL_N &&
	     rg_state_9_EQ_13_049_AND_rg_op_09_EQ_0_10_OR_r_ETC___d1051 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 5'd14 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     f_fabric_write_reqs$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 5'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_rl_writeback_updated_PTE =
	     f_pte_writebacks$EMPTY_N && f_fabric_write_reqs$FULL_N ;
  assign WILL_FIRE_RL_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_rl_writeback_updated_PTE &&
	     !WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_rl_io_write_req &&
	     !WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      f_fabric_write_reqs$FULL_N) &&
	     rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h21448 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d467 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d772 ;
  assign MUX_master_xactor_f_rd_addr$enq_1__PSEL_1 =
	     CAN_FIRE_RL_rl_ptw_level_2 && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ;
  assign MUX_master_xactor_f_rd_addr$enq_1__PSEL_2 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_334_EQ_0b0_335_OR_req_f3_BI_ETC___d1364 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_334_EQ_0b0_335_336_AND__ETC___d1355 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5] ||
	      !master_xactor_f_rd_data$D_OUT[6] &&
	      !master_xactor_f_rd_data$D_OUT[4] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d951 ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d889 ;
  assign MUX_rg_exc_code$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d149 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d636 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d460 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     f_reset_reqs$EMPTY_N && rg_state != 5'd1 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_17 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d404 ;
  assign MUX_rg_state$write_1__SEL_18 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d932 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d967 ;
  assign MUX_tlb$insert_1__SEL_4 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h7241 :
	       new_value__h17212 ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = { rg_f3, rg_pa, x__h29870 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 =
	     { rg_f3,
	       x1_avValue_pa__h5712,
	       IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d773 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_3 =
	     { 3'b011, f_pte_writebacks$D_OUT } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_4 =
	     { rg_f3, rg_pa, rg_st_amo_val } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, lev_1_pte_pa_w64_fa__h22446, 29'd851968 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, lev_0_pte_pa_w64_fa__h23479, 29'd851968 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_3 =
	     { 4'd0, rg_pa, 8'd0, value__h29427, 18'd65536 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_4 =
	     { 4'd0, lev_2_pte_pa_w64_fa__h21549, 29'd851968 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_5 =
	     { 4'd0, cline_fabric_addr__h24649, 29'd15532032 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700 :
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 6'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_5 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       exc_code___1__h6113 :
	       access_exc_code__h2685 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14921 :
	       IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_334_EQ_0b0_335_336_AND__ETC___d1355 ?
	       5'd4 :
	       5'd3 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ? 5'd15 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!master_xactor_f_rd_data$D_OUT[3] ||
		 !master_xactor_f_rd_data$D_OUT[4] &&
		 master_xactor_f_rd_data$D_OUT[5] ||
		 !master_xactor_f_rd_data$D_OUT[6] &&
		 !master_xactor_f_rd_data$D_OUT[4]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_14 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!master_xactor_f_rd_data$D_OUT[3] ||
		 !master_xactor_f_rd_data$D_OUT[4] &&
		 master_xactor_f_rd_data$D_OUT[5]) ?
		  5'd4 :
		  ((!master_xactor_f_rd_data$D_OUT[6] &&
		    !master_xactor_f_rd_data$D_OUT[4]) ?
		     5'd8 :
		     ((master_xactor_f_rd_data$D_OUT[21:13] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_15 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!master_xactor_f_rd_data$D_OUT[3] ||
		 !master_xactor_f_rd_data$D_OUT[4] &&
		 master_xactor_f_rd_data$D_OUT[5]) ?
		  5'd4 :
		  ((!master_xactor_f_rd_data$D_OUT[6] &&
		    !master_xactor_f_rd_data$D_OUT[4]) ?
		     5'd7 :
		     ((master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
		       master_xactor_f_rd_data$D_OUT[21:13] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_17 =
	     (rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130]) ?
	       5'd5 :
	       IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d409 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_read_rsp ||
	      WILL_FIRE_RL_rl_io_AMO_read_rsp) &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d467 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h21448 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h21448 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h2685 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  MUX_rg_exc_code$write_1__VAL_5 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or
	  MUX_rg_exc_code$write_1__SEL_8 or x1_avValue_exc_code__h5713)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h2685;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_8:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5713;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d149 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_334_EQ_0b0_335_336_AND__ETC___d1355 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d889 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d951 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5] ||
	      !master_xactor_f_rd_data$D_OUT[6] &&
	      !master_xactor_f_rd_data$D_OUT[4] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h29841 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h27635 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2: rg_ld_val$D_IN = new_ld_val__h29841;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h27635;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d636 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = soc_map$m_is_mem_addr_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d607 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d461 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d460 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : soc_map$m_is_mem_addr_addr ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d429 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  always@(MUX_master_xactor_f_rd_addr$enq_1__SEL_1 or
	  lev_1_pte_pa__h22444 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_2 or
	  lev_0_pte_pa__h23477 or
	  WILL_FIRE_RL_rl_start_tlb_refill or lev_2_pte_pa__h21547)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_f_rd_addr$enq_1__SEL_1:
	  rg_pte_pa$D_IN = lev_1_pte_pa__h22444;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_2:
	  rg_pte_pa$D_IN = lev_0_pte_pa__h23477;
      WILL_FIRE_RL_rl_start_tlb_refill: rg_pte_pa$D_IN = lev_2_pte_pa__h21547;
      default: rg_pte_pa$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h18342 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d842 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_14 or
	  WILL_FIRE_RL_rl_ptw_level_2 or
	  MUX_rg_state$write_1__VAL_15 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_rg_state$write_1__SEL_17 or
	  MUX_rg_state$write_1__VAL_17 or MUX_rg_state$write_1__SEL_18)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 5'd2;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 5'd16;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_write_req:
	rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 5'd14;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 5'd3;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 5'd10;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_14;
    WILL_FIRE_RL_rl_ptw_level_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_15;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 5'd6;
    MUX_rg_state$write_1__SEL_17:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_17;
    MUX_rg_state$write_1__SEL_18: rg_state$D_IN = 5'd2;
    default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d404 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_fabric_write_reqs
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_writeback_updated_PTE or
	  MUX_f_fabric_write_reqs$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_f_fabric_write_reqs$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_f_fabric_write_reqs$enq_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_writeback_updated_PTE:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_3;
      WILL_FIRE_RL_rl_io_write_req:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_4;
      default: f_fabric_write_reqs$D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d772 ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule f_pte_writebacks
  assign f_pte_writebacks$D_IN = { tlb$lookup[63:0], value__h6538 } ;
  assign f_pte_writebacks$ENQ = MUX_tlb$insert_1__SEL_1 ;
  assign f_pte_writebacks$DEQ = WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign f_pte_writebacks$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_18 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  always@(MUX_master_xactor_f_rd_addr$enq_1__SEL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_2 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_2 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_3 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_4 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_f_rd_addr$enq_1__SEL_1:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_1;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_2:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_3:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_3;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_4;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_5;
      default: master_xactor_f_rd_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ;
  assign master_xactor_f_rd_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       f_fabric_write_reqs$D_OUT[127:64],
	       8'd0,
	       x__h2949,
	       18'd65536 } ;
  assign master_xactor_f_wr_addr$ENQ =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { mem_req_wr_data_wdata__h3133,
	       mem_req_wr_data_wstrb__h3134,
	       1'd1 } ;
  assign master_xactor_f_wr_data$ENQ =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ =
	     b__h21448 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign master_xactor_f_wr_resp$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       rg_addr[11:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       53'h0AAAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       53'h0AAAAAAAAAAAAA /* unspecified value */  :
	       53'h0AAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_334_EQ_0b0_335_OR_req_f3_BI_ETC___d1364 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_f_rd_data$D_OUT[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d649 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_334_EQ_0b0_335_OR_req_f3_BI_ETC___d1364 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr =
	     (rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_fst__h5803 :
	       rg_addr ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[59:44] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  tlb$lookup or
	  MUX_tlb$insert_1__SEL_2 or
	  MUX_tlb$insert_1__SEL_3 or MUX_tlb$insert_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = tlb$lookup[65:64];
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd2;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_4: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte =
	     (MUX_tlb$insert_1__SEL_2 || MUX_tlb$insert_1__SEL_3 ||
	      MUX_tlb$insert_1__SEL_4) ?
	       master_xactor_f_rd_data$D_OUT[66:3] :
	       value__h6538 ;
  assign tlb$insert_pte_pa =
	     MUX_tlb$insert_1__SEL_1 ? tlb$lookup[63:0] : rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[38:12] ;
  assign tlb$lookup_asid = rg_satp[59:44] ;
  assign tlb$lookup_vpn = rg_addr[38:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d932 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d967 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d307 =
	     (x1_avValue_pa__h5712[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29 :
	       NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d306 ;
  assign IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_1_E_ETC___d586 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h27635 : 64'd0 ;
  assign IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_NOT_ETC___d242 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224 ;
  assign IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571 =
	     (rg_addr[2:0] == 3'h0) ? word64__h7059 : 64'd0 ;
  assign IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC__q31 =
	     IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578[31:0] ;
  assign IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q32[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q32 } :
	       rg_st_amo_val ;
  assign IF_rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d317 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d252 :
	       IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d316 ;
  assign IF_rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d407 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       5'd9 :
	       IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d406 ;
  assign IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d316 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h14911 ||
	       f_fabric_write_reqs$FULL_N :
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 ||
	       f_fabric_write_reqs$FULL_N &&
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d311 &&
	       IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250 ;
  assign IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d406 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       5'd12 :
	       ((!ram_state_and_ctag_cset$DOB[52] ||
		 !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) ?
		  5'd9 :
		  5'd12) ;
  assign IF_rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d773 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_st_amo_val :
	       new_st_val__h18342 ;
  assign IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d409 =
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d149 ?
	       5'd4 :
	       ((dmem_not_imem && !soc_map$m_is_mem_addr) ?
		  5'd13 :
		  IF_rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d407) ;
  assign IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443 =
	     x1_avValue_pa__h5712 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d298 =
	     x1_avValue_pa__h5712[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29 ;
  assign NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d303 =
	     x1_avValue_pa__h5712[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29 ;
  assign NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d306 =
	     x1_avValue_pa__h5712[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29 ;
  assign NOT_cfg_verbosity_read__9_ULE_2_021___d1022 = cfg_verbosity > 4'd2 ;
  assign NOT_cfg_verbosity_read__9_ULT_2_13___d414 = cfg_verbosity >= 4'd2 ;
  assign NOT_dmem_not_imem_24_AND_rg_op_09_EQ_0_10_OR_r_ETC___d349 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[69] ;
  assign NOT_dmem_not_imem_24_OR_NOT_rg_op_09_EQ_0_10_1_ETC___d131 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d129 ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d634 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[52] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d647 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d645 ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d776 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d794 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d825 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d823 ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d830 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d828 ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d836 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d834 ;
  assign NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d840 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d644 ;
  assign NOT_master_xactor_f_rd_data_first__58_BITS_2_T_ETC___d882 =
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     ((!master_xactor_f_rd_data$D_OUT[6] &&
	       !master_xactor_f_rd_data$D_OUT[4]) ?
		master_xactor_f_rd_addr$FULL_N :
		master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
		master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 ||
		tlb$RDY_insert) ;
  assign NOT_master_xactor_f_rd_data_first__58_BITS_2_T_ETC___d945 =
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     ((!master_xactor_f_rd_data$D_OUT[6] &&
	       !master_xactor_f_rd_data$D_OUT[4]) ?
		master_xactor_f_rd_addr$FULL_N :
		master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 ||
		tlb$RDY_insert) ;
  assign NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d889 =
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     (master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
	      master_xactor_f_rd_data$D_OUT[21:13] != 9'd0) ||
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign NOT_master_xactor_f_rd_data_first__58_BIT_3_62_ETC___d951 =
	     !master_xactor_f_rd_data$D_OUT[3] ||
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     master_xactor_f_rd_data$D_OUT[5] ||
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 ||
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224 =
	     !ram_state_and_ctag_cset$DOB[52] || !rg_priv_2_ULE_0b1___d83 ||
	     rg_satp[63:60] != 4'd8 ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d252 =
	     !ram_state_and_ctag_cset$DOB[52] ||
	     !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250 ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d445 =
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443 ;
  assign NOT_req_f3_BITS_1_TO_0_334_EQ_0b0_335_336_AND__ETC___d1355 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_06_EQ_0b11_43_44_OR_rg_amo_funct7_14_ETC___d308 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29 ;
  assign NOT_rg_op_09_EQ_0_10_11_AND_NOT_rg_op_09_EQ_2__ETC___d400 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258) ;
  assign NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d454 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 &&
	     IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443 ;
  assign NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d644 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 ;
  assign NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d823 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d828 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d834 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 &&
	     IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d642 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 ;
  assign NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d797 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d803 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d809 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d356 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_24_AND_rg_op_09_EQ_0_10_OR_r_ETC___d349 ||
	      dmem_not_imem_AND_rg_op_09_EQ_0_10_OR_rg_op_09_ETC___d351 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[68]) ;
  assign NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d379 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[68] ;
  assign NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d417 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     tlb$lookup[72] &&
	     !pte___2__h6213[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d593 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[69] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d129) ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d165 =
	     !rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d153 ||
	     NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d162 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d319 =
	     (NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d165 ||
	      tlb$RDY_insert && tlb$RDY_lookup && f_pte_writebacks$FULL_N) &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      IF_rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_ETC___d317) ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d361 =
	     !rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	     tlb$lookup[130] &&
	     NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d356 &&
	     tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d358 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d376 =
	     !rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d153 ||
	     NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d162 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d428 =
	     !rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d356 &&
	     tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d358 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d429 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d428 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d436 =
	     !rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d432 &&
	     tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d358 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d439 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d436 &&
	     dmem_not_imem &&
	     !soc_map$m_is_mem_addr &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d460 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d428 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d457 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d466 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d428 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d461 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h14911) ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d467 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d466 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d596 =
	     !rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d593 &&
	     tlb$lookup[72] ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d601 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d596 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d598 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d607 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d596 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d614 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d596 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d620 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d596 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d617 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d626 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d596 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_14_BITS_6_TO_2_15_EQ_0b10_16_AND_ETC___d623 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 =
	     !rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d379 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d636 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d634 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d649 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d647 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d771 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d767 ||
	      NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d644) ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d772 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d771 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d778 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d776 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d784 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d790 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d796 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d794 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d801 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d797 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d802 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d801 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d807 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d803 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d813 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d809 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d814 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d813 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d819 =
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14911 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d820 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d819 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d827 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d825 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d830 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d838 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d836 ;
  assign NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d842 =
	     (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d630 &&
	     NOT_dmem_not_imem_24_OR_soc_map_m_is_mem_addr__ETC___d840 ;
  assign NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d146 =
	     !tlb$lookup[72] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[73] ;
  assign NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d162 =
	     !tlb$lookup[72] || !tlb$lookup[73] || pte___2__h6213[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign _theResult___fst__h3069 =
	     f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2916 ;
  assign _theResult___snd_fst__h5803 =
	     tlb$lookup[130] ? _theResult___snd_fst__h5874 : rg_addr ;
  assign _theResult___snd_fst__h5874 =
	     (rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d140 ||
	      NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d146) ?
	       rg_addr :
	       _theResult___fst__h6215 ;
  assign _theResult___snd_fst__h6444 =
	     (!pte___2__h6213[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h6521 :
	       pte___2__h6213 ;
  assign _theResult___snd_snd_fst__h5805 =
	     tlb$lookup[130] ?
	       _theResult___snd_snd_fst__h5876 :
	       tlb$lookup[129:66] ;
  assign _theResult___snd_snd_fst__h5876 =
	     (rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d140 ||
	      NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d146) ?
	       tlb$lookup[129:66] :
	       _theResult___snd_fst__h6444 ;
  assign access_exc_code__h2685 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h21448 =
	     CAN_FIRE_RL_rl_fabric_send_write_req ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__9_ULE_1___d40 = cfg_verbosity <= 4'd1 ;
  assign cline_fabric_addr__h24649 = { rg_pa[63:6], 6'd0 } ;
  assign dmem_not_imem_AND_rg_op_09_EQ_0_10_OR_rg_op_09_ETC___d351 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d129 ;
  assign dmem_not_imem_OR_NOT_rg_op_09_EQ_0_10_11_AND_N_ETC___d123 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[69] ;
  assign exc_code___1__h6113 = x1_avValue_exc_code__h5713 ;
  assign ld_val7635_BITS_15_TO_0__q37 = ld_val__h27635[15:0] ;
  assign ld_val7635_BITS_15_TO_8__q39 = ld_val__h27635[15:8] ;
  assign ld_val7635_BITS_23_TO_16__q40 = ld_val__h27635[23:16] ;
  assign ld_val7635_BITS_31_TO_0__q38 = ld_val__h27635[31:0] ;
  assign ld_val7635_BITS_31_TO_16__q41 = ld_val__h27635[31:16] ;
  assign ld_val7635_BITS_31_TO_24__q42 = ld_val__h27635[31:24] ;
  assign ld_val7635_BITS_39_TO_32__q43 = ld_val__h27635[39:32] ;
  assign ld_val7635_BITS_47_TO_32__q44 = ld_val__h27635[47:32] ;
  assign ld_val7635_BITS_47_TO_40__q46 = ld_val__h27635[47:40] ;
  assign ld_val7635_BITS_55_TO_48__q47 = ld_val__h27635[55:48] ;
  assign ld_val7635_BITS_63_TO_32__q45 = ld_val__h27635[63:32] ;
  assign ld_val7635_BITS_63_TO_48__q48 = ld_val__h27635[63:48] ;
  assign ld_val7635_BITS_63_TO_56__q49 = ld_val__h27635[63:56] ;
  assign ld_val7635_BITS_7_TO_0__q36 = ld_val__h27635[7:0] ;
  assign lev_0_pte_pa__h23477 = lev_1_PTN_pa__h22442 + vpn_0_pa__h23476 ;
  assign lev_0_pte_pa_w64_fa__h23479 = { lev_0_pte_pa__h23477[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h22442 = { 8'd0, x__h22523 } ;
  assign lev_1_pte_pa__h22444 = lev_1_PTN_pa__h22442 + vpn_1_pa__h22443 ;
  assign lev_1_pte_pa_w64_fa__h22446 = { lev_1_pte_pa__h22444[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h21547 = satp_pa__h2004 + vpn_2_pa__h21546 ;
  assign lev_2_pte_pa_w64_fa__h21549 = { lev_2_pte_pa__h21547[63:3], 3'b0 } ;
  assign lrsc_result__h14911 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258 ;
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 =
	     master_xactor_f_rd_data$D_OUT[10:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 =
	     master_xactor_f_rd_data$D_OUT[18:11] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 =
	     master_xactor_f_rd_data$D_OUT[18:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 =
	     master_xactor_f_rd_data$D_OUT[26:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 =
	     master_xactor_f_rd_data$D_OUT[34:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 =
	     master_xactor_f_rd_data$D_OUT[34:27] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 =
	     master_xactor_f_rd_data$D_OUT[34:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 =
	     master_xactor_f_rd_data$D_OUT[42:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 =
	     master_xactor_f_rd_data$D_OUT[50:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 =
	     master_xactor_f_rd_data$D_OUT[50:43] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 =
	     master_xactor_f_rd_data$D_OUT[58:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 =
	     master_xactor_f_rd_data$D_OUT[66:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 =
	     master_xactor_f_rd_data$D_OUT[66:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 =
	     master_xactor_f_rd_data$D_OUT[66:59] ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d1002 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     (!master_xactor_f_rd_data$D_OUT[3] ||
	      !master_xactor_f_rd_data$D_OUT[4] &&
	      master_xactor_f_rd_data$D_OUT[5]) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     !master_xactor_f_rd_data$D_OUT[5] &&
	     !master_xactor_f_rd_data$D_OUT[6] &&
	     !master_xactor_f_rd_data$D_OUT[4] &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d924 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     (master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
	      master_xactor_f_rd_data$D_OUT[21:13] != 9'd0) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d932 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[30:22] == 9'd0 &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d936 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[30:22] == 9'd0 &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d967 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d971 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] == 9'd0 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d977 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     master_xactor_f_rd_data$D_OUT[3] &&
	     (master_xactor_f_rd_data$D_OUT[4] ||
	      !master_xactor_f_rd_data$D_OUT[5]) &&
	     (master_xactor_f_rd_data$D_OUT[6] ||
	      master_xactor_f_rd_data$D_OUT[4]) &&
	     master_xactor_f_rd_data$D_OUT[21:13] != 9'd0 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign new_st_val__h18342 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h18624 :
	       _theResult_____2__h18620 ;
  assign new_st_val__h18624 = { 32'd0, _theResult_____2__h18620[31:0] } ;
  assign new_st_val__h18715 =
	     IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 +
	     IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704 ;
  assign new_st_val__h19695 = w1__h18612 ^ w2__h29881 ;
  assign new_st_val__h19699 = w1__h18612 & w2__h29881 ;
  assign new_st_val__h19703 = w1__h18612 | w2__h29881 ;
  assign new_st_val__h19707 =
	     (w1__h18612 < w2__h29881) ? w1__h18612 : w2__h29881 ;
  assign new_st_val__h19712 =
	     (w1__h18612 <= w2__h29881) ? w2__h29881 : w1__h18612 ;
  assign new_st_val__h19718 =
	     ((IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704 ^
	       64'h8000000000000000)) ?
	       w1__h18612 :
	       w2__h29881 ;
  assign new_st_val__h19723 =
	     ((IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704 ^
	       64'h8000000000000000)) ?
	       w2__h29881 :
	       w1__h18612 ;
  assign new_st_val__h29891 = { 32'd0, _theResult_____2__h29887[31:0] } ;
  assign new_st_val__h29982 =
	     new_ld_val__h29841 +
	     IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704 ;
  assign new_st_val__h31842 = w1__h29879 ^ w2__h29881 ;
  assign new_st_val__h31846 = w1__h29879 & w2__h29881 ;
  assign new_st_val__h31850 = w1__h29879 | w2__h29881 ;
  assign new_st_val__h31854 =
	     (w1__h29879 < w2__h29881) ? w1__h29879 : w2__h29881 ;
  assign new_st_val__h31859 =
	     (w1__h29879 <= w2__h29881) ? w2__h29881 : w1__h29879 ;
  assign new_st_val__h31865 =
	     ((new_ld_val__h29841 ^ 64'h8000000000000000) <
	      (IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704 ^
	       64'h8000000000000000)) ?
	       w1__h29879 :
	       w2__h29881 ;
  assign new_st_val__h31870 =
	     ((new_ld_val__h29841 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_rg_st_amo_val_ETC___d704 ^
	       64'h8000000000000000)) ?
	       w2__h29881 :
	       w1__h29879 ;
  assign new_value__h17212 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       64'd1 :
	       CASE_rg_f3_0b0_IF_rg_addr_3_BITS_2_TO_0_10_EQ__ETC__q52 ;
  assign new_value__h7241 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       word64__h7059 :
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 ;
  assign pa___1__h6221 = { 8'd0, x__h6224 } ;
  assign pa___1__h6270 = { 8'd0, x__h6273 } ;
  assign pa___1__h6339 = { 8'd0, x__h6342 } ;
  assign pte___1__h6493 = { tlb$lookup[129:73], 1'd1, tlb$lookup[71:66] } ;
  assign pte___1__h6521 =
	     { pte___2__h6213[63:8], 1'd1, pte___2__h6213[6:0] } ;
  assign pte___2__h6213 =
	     tlb$lookup[72] ? tlb$lookup[129:66] : pte___1__h6493 ;
  assign ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 =
	     ram_state_and_ctag_cset$DOB[51:0] ==
	     x1_avValue_pa__h5712[63:12] ;
  assign ram_state_and_ctag_cset_b_read__96_BIT_52_97_A_ETC___d446 =
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d445 ;
  assign req_f3_BITS_1_TO_0_334_EQ_0b0_335_OR_req_f3_BI_ETC___d1364 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13622 =
	     { {56{word64059_BITS_7_TO_0__q15[7]}},
	       word64059_BITS_7_TO_0__q15 } ;
  assign result__h13650 =
	     { {56{word64059_BITS_15_TO_8__q18[7]}},
	       word64059_BITS_15_TO_8__q18 } ;
  assign result__h13678 =
	     { {56{word64059_BITS_23_TO_16__q20[7]}},
	       word64059_BITS_23_TO_16__q20 } ;
  assign result__h13706 =
	     { {56{word64059_BITS_31_TO_24__q19[7]}},
	       word64059_BITS_31_TO_24__q19 } ;
  assign result__h13734 =
	     { {56{word64059_BITS_39_TO_32__q22[7]}},
	       word64059_BITS_39_TO_32__q22 } ;
  assign result__h13762 =
	     { {56{word64059_BITS_47_TO_40__q25[7]}},
	       word64059_BITS_47_TO_40__q25 } ;
  assign result__h13790 =
	     { {56{word64059_BITS_55_TO_48__q26[7]}},
	       word64059_BITS_55_TO_48__q26 } ;
  assign result__h13818 =
	     { {56{word64059_BITS_63_TO_56__q28[7]}},
	       word64059_BITS_63_TO_56__q28 } ;
  assign result__h13863 = { 56'd0, word64__h7059[7:0] } ;
  assign result__h13891 = { 56'd0, word64__h7059[15:8] } ;
  assign result__h13919 = { 56'd0, word64__h7059[23:16] } ;
  assign result__h13947 = { 56'd0, word64__h7059[31:24] } ;
  assign result__h13975 = { 56'd0, word64__h7059[39:32] } ;
  assign result__h14003 = { 56'd0, word64__h7059[47:40] } ;
  assign result__h14031 = { 56'd0, word64__h7059[55:48] } ;
  assign result__h14059 = { 56'd0, word64__h7059[63:56] } ;
  assign result__h14104 =
	     { {48{word64059_BITS_15_TO_0__q16[15]}},
	       word64059_BITS_15_TO_0__q16 } ;
  assign result__h14132 =
	     { {48{word64059_BITS_31_TO_16__q21[15]}},
	       word64059_BITS_31_TO_16__q21 } ;
  assign result__h14160 =
	     { {48{word64059_BITS_47_TO_32__q23[15]}},
	       word64059_BITS_47_TO_32__q23 } ;
  assign result__h14188 =
	     { {48{word64059_BITS_63_TO_48__q27[15]}},
	       word64059_BITS_63_TO_48__q27 } ;
  assign result__h14229 = { 48'd0, word64__h7059[15:0] } ;
  assign result__h14257 = { 48'd0, word64__h7059[31:16] } ;
  assign result__h14285 = { 48'd0, word64__h7059[47:32] } ;
  assign result__h14313 = { 48'd0, word64__h7059[63:48] } ;
  assign result__h14354 =
	     { {32{word64059_BITS_31_TO_0__q17[31]}},
	       word64059_BITS_31_TO_0__q17 } ;
  assign result__h14382 =
	     { {32{word64059_BITS_63_TO_32__q24[31]}},
	       word64059_BITS_63_TO_32__q24 } ;
  assign result__h14421 = { 32'd0, word64__h7059[31:0] } ;
  assign result__h14449 = { 32'd0, word64__h7059[63:32] } ;
  assign result__h27695 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 } ;
  assign result__h27725 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 } ;
  assign result__h27752 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 } ;
  assign result__h27779 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 } ;
  assign result__h27806 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 } ;
  assign result__h27833 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 } ;
  assign result__h27860 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 } ;
  assign result__h27887 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 } ;
  assign result__h27931 = { 56'd0, master_xactor_f_rd_data$D_OUT[10:3] } ;
  assign result__h27958 = { 56'd0, master_xactor_f_rd_data$D_OUT[18:11] } ;
  assign result__h27985 = { 56'd0, master_xactor_f_rd_data$D_OUT[26:19] } ;
  assign result__h28012 = { 56'd0, master_xactor_f_rd_data$D_OUT[34:27] } ;
  assign result__h28039 = { 56'd0, master_xactor_f_rd_data$D_OUT[42:35] } ;
  assign result__h28066 = { 56'd0, master_xactor_f_rd_data$D_OUT[50:43] } ;
  assign result__h28093 = { 56'd0, master_xactor_f_rd_data$D_OUT[58:51] } ;
  assign result__h28120 = { 56'd0, master_xactor_f_rd_data$D_OUT[66:59] } ;
  assign result__h28164 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 } ;
  assign result__h28191 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 } ;
  assign result__h28218 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 } ;
  assign result__h28245 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 } ;
  assign result__h28285 = { 48'd0, master_xactor_f_rd_data$D_OUT[18:3] } ;
  assign result__h28312 = { 48'd0, master_xactor_f_rd_data$D_OUT[34:19] } ;
  assign result__h28339 = { 48'd0, master_xactor_f_rd_data$D_OUT[50:35] } ;
  assign result__h28366 = { 48'd0, master_xactor_f_rd_data$D_OUT[66:51] } ;
  assign result__h28406 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 } ;
  assign result__h28433 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 } ;
  assign result__h28471 = { 32'd0, master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign result__h28498 = { 32'd0, master_xactor_f_rd_data$D_OUT[66:35] } ;
  assign result__h30070 =
	     { {56{ld_val7635_BITS_7_TO_0__q36[7]}},
	       ld_val7635_BITS_7_TO_0__q36 } ;
  assign result__h30978 =
	     { {56{ld_val7635_BITS_15_TO_8__q39[7]}},
	       ld_val7635_BITS_15_TO_8__q39 } ;
  assign result__h31006 =
	     { {56{ld_val7635_BITS_23_TO_16__q40[7]}},
	       ld_val7635_BITS_23_TO_16__q40 } ;
  assign result__h31034 =
	     { {56{ld_val7635_BITS_31_TO_24__q42[7]}},
	       ld_val7635_BITS_31_TO_24__q42 } ;
  assign result__h31062 =
	     { {56{ld_val7635_BITS_39_TO_32__q43[7]}},
	       ld_val7635_BITS_39_TO_32__q43 } ;
  assign result__h31090 =
	     { {56{ld_val7635_BITS_47_TO_40__q46[7]}},
	       ld_val7635_BITS_47_TO_40__q46 } ;
  assign result__h31118 =
	     { {56{ld_val7635_BITS_55_TO_48__q47[7]}},
	       ld_val7635_BITS_55_TO_48__q47 } ;
  assign result__h31146 =
	     { {56{ld_val7635_BITS_63_TO_56__q49[7]}},
	       ld_val7635_BITS_63_TO_56__q49 } ;
  assign result__h31191 = { 56'd0, ld_val__h27635[7:0] } ;
  assign result__h31219 = { 56'd0, ld_val__h27635[15:8] } ;
  assign result__h31247 = { 56'd0, ld_val__h27635[23:16] } ;
  assign result__h31275 = { 56'd0, ld_val__h27635[31:24] } ;
  assign result__h31303 = { 56'd0, ld_val__h27635[39:32] } ;
  assign result__h31331 = { 56'd0, ld_val__h27635[47:40] } ;
  assign result__h31359 = { 56'd0, ld_val__h27635[55:48] } ;
  assign result__h31387 = { 56'd0, ld_val__h27635[63:56] } ;
  assign result__h31432 =
	     { {48{ld_val7635_BITS_15_TO_0__q37[15]}},
	       ld_val7635_BITS_15_TO_0__q37 } ;
  assign result__h31460 =
	     { {48{ld_val7635_BITS_31_TO_16__q41[15]}},
	       ld_val7635_BITS_31_TO_16__q41 } ;
  assign result__h31488 =
	     { {48{ld_val7635_BITS_47_TO_32__q44[15]}},
	       ld_val7635_BITS_47_TO_32__q44 } ;
  assign result__h31516 =
	     { {48{ld_val7635_BITS_63_TO_48__q48[15]}},
	       ld_val7635_BITS_63_TO_48__q48 } ;
  assign result__h31557 = { 48'd0, ld_val__h27635[15:0] } ;
  assign result__h31585 = { 48'd0, ld_val__h27635[31:16] } ;
  assign result__h31613 = { 48'd0, ld_val__h27635[47:32] } ;
  assign result__h31641 = { 48'd0, ld_val__h27635[63:48] } ;
  assign result__h31682 =
	     { {32{ld_val7635_BITS_31_TO_0__q38[31]}},
	       ld_val7635_BITS_31_TO_0__q38 } ;
  assign result__h31710 =
	     { {32{ld_val7635_BITS_63_TO_32__q45[31]}},
	       ld_val7635_BITS_63_TO_32__q45 } ;
  assign result__h31749 = { 32'd0, ld_val__h27635[31:0] } ;
  assign result__h31777 = { 32'd0, ld_val__h27635[63:32] } ;
  assign rg_amo_funct7_14_BITS_6_TO_2_15_EQ_0b10_16_AND_ETC___d623 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) &&
	     IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258 =
	     rg_lrsc_pa == x1_avValue_pa__h5712 ;
  assign rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d395 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) ;
  assign rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d432 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d129 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     tlb$lookup[68] ;
  assign rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d457 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__96_BIT_52_97_A_ETC___d446 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d455 ;
  assign rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d461 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 ;
  assign rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d598 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201 &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d617 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201) &&
	     !cfg_verbosity_read__9_ULE_1___d40 ;
  assign rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d455 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_T_ETC___d443 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d454 ;
  assign rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d645 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_09_EQ_2_12_13_OR_NOT_rg_amo_funct7_1_ETC___d642 ||
	     NOT_rg_op_09_EQ_1_53_51_AND_NOT_rg_op_09_EQ_2__ETC___d644 ;
  assign rg_op_09_EQ_1_53_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d767 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_57_EQ_IF_rg_priv_2_ULE_0b1_3_AND_rg_ETC___d258) ;
  assign rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d140 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_09_EQ_0_10_11_AND_N_ETC___d123 &&
	     NOT_dmem_not_imem_24_OR_NOT_rg_op_09_EQ_0_10_1_ETC___d131 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[68]) ;
  assign rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d153 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[68] ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d149 =
	     rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     (rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d140 ||
	      NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d146) ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d321 =
	     rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     (rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d149 ?
		tlb$RDY_lookup :
		NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d319) ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d364 =
	     rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8 &&
	     (rg_priv_2_EQ_0b0_9_AND_NOT_tlb_lookup_rg_satp__ETC___d140 ||
	      NOT_tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_ad_ETC___d146) &&
	     tlb$lookup[130] ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 =
	     rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d379 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] &&
	     !pte___2__h6213[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d403 =
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d149 ||
	     dmem_not_imem && !soc_map$m_is_mem_addr ||
	     rg_op_09_EQ_0_10_OR_rg_op_09_EQ_2_12_AND_rg_am_ETC___d395 ||
	     NOT_rg_op_09_EQ_0_10_11_AND_NOT_rg_op_09_EQ_2__ETC___d400 ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d404 =
	     rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d403 ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d422 =
	     rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_2_EQ_0b0_9_42_OR_tlb_lookup_rg_sat_ETC___d417 &&
	     NOT_cfg_verbosity_read__9_ULT_2_13___d414 &&
	     dmem_not_imem &&
	     tlb$lookup[68] &&
	     tlb$lookup[73] ;
  assign rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d425 =
	     rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	     NOT_cfg_verbosity_read__9_ULT_2_13___d414 &&
	     (!dmem_not_imem || !tlb$lookup[68] || !tlb$lookup[73]) ;
  assign rg_priv_2_ULE_0b1___d83 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q32 = rg_st_amo_val[31:0] ;
  assign rg_state_9_EQ_13_049_AND_rg_op_09_EQ_0_10_OR_r_ETC___d1051 =
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h21448 == 4'd0 ;
  assign satp_pa__h2004 = { 8'd0, x__h4903 } ;
  assign shift_bits__h2916 = { f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64__h3068 = 8'b00000001 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h3071 = 8'b00000011 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h3074 = 8'b00001111 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d129 =
	     tlb$lookup[67] | y__h6039 ;
  assign tlb_lookup_rg_satp_5_BITS_59_TO_44_2_rg_addr_3_ETC___d358 =
	     tlb$lookup[72] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[73]) ;
  assign value__h6538 =
	     (rg_priv_2_ULE_0b1___d83 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_snd_fst__h5805 :
	       tlb$lookup[129:66] ;
  assign vpn_0_pa__h23476 = { 52'd0, rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h22443 = { 52'd0, rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h21546 = { 52'd0, rg_addr[38:30], 3'd0 } ;
  assign w19875_BITS_31_TO_0__q51 = w1__h29875[31:0] ;
  assign w1___1__h18683 =
	     { 32'd0,
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578[31:0] } ;
  assign w1___1__h29950 = { 32'd0, w1__h29875[31:0] } ;
  assign w2___1__h29951 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h29881 = (rg_f3 == 3'b010) ? w2___1__h29951 : rg_st_amo_val ;
  assign word64059_BITS_15_TO_0__q16 = word64__h7059[15:0] ;
  assign word64059_BITS_15_TO_8__q18 = word64__h7059[15:8] ;
  assign word64059_BITS_23_TO_16__q20 = word64__h7059[23:16] ;
  assign word64059_BITS_31_TO_0__q17 = word64__h7059[31:0] ;
  assign word64059_BITS_31_TO_16__q21 = word64__h7059[31:16] ;
  assign word64059_BITS_31_TO_24__q19 = word64__h7059[31:24] ;
  assign word64059_BITS_39_TO_32__q22 = word64__h7059[39:32] ;
  assign word64059_BITS_47_TO_32__q23 = word64__h7059[47:32] ;
  assign word64059_BITS_47_TO_40__q25 = word64__h7059[47:40] ;
  assign word64059_BITS_55_TO_48__q26 = word64__h7059[55:48] ;
  assign word64059_BITS_63_TO_32__q24 = word64__h7059[63:32] ;
  assign word64059_BITS_63_TO_48__q27 = word64__h7059[63:48] ;
  assign word64059_BITS_63_TO_56__q28 = word64__h7059[63:56] ;
  assign word64059_BITS_7_TO_0__q15 = word64__h7059[7:0] ;
  assign word64__h7059 = ram_word64_set$DOB & y__h7266 ;
  assign x1_avValue_exc_code__h5713 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h5712 = soc_map$m_is_mem_addr_addr ;
  assign x__h14921 = { 63'd0, lrsc_result__h14911 } ;
  assign x__h22523 = { master_xactor_f_rd_data$D_OUT[56:13], 12'b0 } ;
  assign x__h29870 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h29891 :
	       _theResult_____2__h29887 ;
  assign x__h4903 = { rg_satp[43:0], 12'b0 } ;
  assign x__h6224 = { tlb$lookup[119:76], rg_addr[11:0] } ;
  assign x__h6273 = { tlb$lookup[119:85], rg_addr[20:0] } ;
  assign x__h6342 = { tlb$lookup[119:94], rg_addr[29:0] } ;
  assign y__h6039 = rg_mstatus_MXR & tlb$lookup[69] ;
  assign y__h7266 =
	     {64{ram_state_and_ctag_cset$DOB[52] &&
		 ram_state_and_ctag_cset_b_read__96_BITS_51_TO__ETC___d201}} ;
  always@(f_fabric_write_reqs$D_OUT)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0: x__h2949 = 3'b0;
      2'b01: x__h2949 = 3'b001;
      2'b10: x__h2949 = 3'b010;
      2'b11: x__h2949 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h29427 = 3'b0;
      2'b01: value__h29427 = 3'b001;
      2'b10: value__h29427 = 3'b010;
      2'd3: value__h29427 = 3'b011;
    endcase
  end
  always@(tlb$lookup or
	  rg_addr or pa___1__h6221 or pa___1__h6270 or pa___1__h6339)
  begin
    case (tlb$lookup[65:64])
      2'd0: _theResult___fst__h6215 = pa___1__h6221;
      2'd1: _theResult___fst__h6215 = pa___1__h6270;
      2'd2: _theResult___fst__h6215 = pa___1__h6339;
      2'd3: _theResult___fst__h6215 = rg_addr;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or _theResult___fst__h3069)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h3133 = _theResult___fst__h3069;
      2'd3: mem_req_wr_data_wdata__h3133 = f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or
	  strobe64__h3068 or strobe64__h3071 or strobe64__h3074)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0: mem_req_wr_data_wstrb__h3134 = strobe64__h3068;
      2'b01: mem_req_wr_data_wstrb__h3134 = strobe64__h3071;
      2'b10: mem_req_wr_data_wstrb__h3134 = strobe64__h3074;
      2'b11: mem_req_wr_data_wstrb__h3134 = 8'b11111111;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d228 =
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224;
      3'd7:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d228 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d236 =
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d236 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d228 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d236 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_NOT_ETC___d242)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d228;
      3'b001, 3'b101:
	  IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_OR_rg_ad_ETC___d236;
      3'b010, 3'b110:
	  IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_NOT_ETC___d242;
      default: IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_52__ETC___d224;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29 =
	      IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_06_EQ_0b0_07_OR_rg_f3_06_EQ_0b100_08__ETC___d250;
    endcase
  end
  always@(x1_avValue_pa__h5712 or
	  NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d298 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d299 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29;
      3'd7:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d299 =
	      NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d298;
    endcase
  end
  always@(x1_avValue_pa__h5712 or
	  NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d303 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d304 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_06_ETC__q29;
      default: IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d304 =
		   NOT_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS__ETC___d303;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_06_EQ_0b11_43_44_OR_rg_amo_funct7_14_ETC___d308 or
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d299 or
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d304 or
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d307)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d311 =
	      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d299;
      3'b001:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d311 =
	      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d304;
      3'b010:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d311 =
	      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d307;
      default: IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d311 =
		   NOT_rg_f3_06_EQ_0b11_43_44_OR_rg_amo_funct7_14_ETC___d308;
    endcase
  end
  always@(rg_addr or
	  result__h13622 or
	  result__h13650 or
	  result__h13678 or
	  result__h13706 or
	  result__h13734 or
	  result__h13762 or result__h13790 or result__h13818)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13622;
      3'h1:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13650;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13678;
      3'h3:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13706;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13734;
      3'h5:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13762;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13790;
      3'h7:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 =
	      result__h13818;
    endcase
  end
  always@(rg_addr or
	  result__h13863 or
	  result__h13891 or
	  result__h13919 or
	  result__h13947 or
	  result__h13975 or
	  result__h14003 or result__h14031 or result__h14059)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h13863;
      3'h1:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h13891;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h13919;
      3'h3:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h13947;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h13975;
      3'h5:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h14003;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h14031;
      3'h7:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 =
	      result__h14059;
    endcase
  end
  always@(rg_addr or
	  result__h14104 or
	  result__h14132 or result__h14160 or result__h14188)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 =
	      result__h14104;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 =
	      result__h14132;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 =
	      result__h14160;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 =
	      result__h14188;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h14229 or
	  result__h14257 or result__h14285 or result__h14313)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 =
	      result__h14229;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 =
	      result__h14257;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 =
	      result__h14285;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 =
	      result__h14313;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14421 or result__h14449)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570 =
	      result__h14421;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570 =
	      result__h14449;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14354 or result__h14382)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4354_0x4_re_ETC__q30 =
	      result__h14354;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4354_0x4_re_ETC__q30 =
	      result__h14382;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result4354_0x4_re_ETC__q30 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4354_0x4_re_ETC__q30 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524;
      3'b001:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552;
      3'b010:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result4354_0x4_re_ETC__q30;
      3'b011:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571;
      3'b100:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540;
      3'b101:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560;
      3'b110:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570;
      3'd7: IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC___d578 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 or
	  w1___1__h18683 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570)
  begin
    case (rg_f3)
      3'b0:
	  w1__h18612 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524;
      3'b001:
	  w1__h18612 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552;
      3'b010: w1__h18612 = w1___1__h18683;
      3'b011:
	  w1__h18612 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571;
      3'b100:
	  w1__h18612 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540;
      3'b101:
	  w1__h18612 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560;
      3'b110:
	  w1__h18612 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570;
      3'd7: w1__h18612 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5712 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5712 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552 or
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC__q31 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d524;
      3'b001:
	  IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d552;
      3'b010:
	  IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 =
	      { {32{IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC__q31[31]}},
		IF_rg_f3_06_EQ_0b0_07_THEN_IF_rg_addr_3_BITS_2_ETC__q31 };
      3'b011:
	  IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_ram_ETC___d571;
      3'b100:
	  IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d540;
      3'b101:
	  IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d560;
      3'b110:
	  IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d570;
      3'd7: IF_rg_f3_06_EQ_0b10_37_THEN_SEXT_IF_rg_f3_06_E_ETC___d640 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h19723 or
	  new_st_val__h18715 or
	  w2__h29881 or
	  new_st_val__h19695 or
	  new_st_val__h19703 or
	  new_st_val__h19699 or
	  new_st_val__h19718 or new_st_val__h19707 or new_st_val__h19712)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h18620 = new_st_val__h18715;
      5'b00001: _theResult_____2__h18620 = w2__h29881;
      5'b00100: _theResult_____2__h18620 = new_st_val__h19695;
      5'b01000: _theResult_____2__h18620 = new_st_val__h19703;
      5'b01100: _theResult_____2__h18620 = new_st_val__h19699;
      5'b10000: _theResult_____2__h18620 = new_st_val__h19718;
      5'b11000: _theResult_____2__h18620 = new_st_val__h19707;
      5'b11100: _theResult_____2__h18620 = new_st_val__h19712;
      default: _theResult_____2__h18620 = new_st_val__h19723;
    endcase
  end
  always@(x1_avValue_pa__h5712 or ram_word64_set$DOB or new_st_val__h18342)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756 =
	      { ram_word64_set$DOB[63:16], new_st_val__h18342[15:0] };
      3'h2:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18342[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18342[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756 =
	      { new_st_val__h18342[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5712 or ram_word64_set$DOB or new_st_val__h18342)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { ram_word64_set$DOB[63:8], new_st_val__h18342[7:0] };
      3'h1:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h18342[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h18342[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18342[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h18342[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18342[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h18342[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 =
	      { new_st_val__h18342[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h5712 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0:
	  CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682 or
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691 or
	  CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q33 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700 =
	      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d682;
      3'b001:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700 =
	      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d691;
      3'b010:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700 =
	      CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q33;
      3'b011:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700 =
	      rg_st_amo_val;
      default: IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h28164 or
	  result__h28191 or result__h28218 or result__h28245)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121 =
	      result__h28164;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121 =
	      result__h28191;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121 =
	      result__h28218;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121 =
	      result__h28245;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28285 or
	  result__h28312 or result__h28339 or result__h28366)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129 =
	      result__h28285;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129 =
	      result__h28312;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129 =
	      result__h28339;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129 =
	      result__h28366;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h27931 or
	  result__h27958 or
	  result__h27985 or
	  result__h28012 or
	  result__h28039 or
	  result__h28066 or result__h28093 or result__h28120)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h27931;
      3'h1:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h27958;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h27985;
      3'h3:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h28012;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h28039;
      3'h5:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h28066;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h28093;
      3'h7:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 =
	      result__h28120;
    endcase
  end
  always@(rg_addr or
	  result__h27695 or
	  result__h27725 or
	  result__h27752 or
	  result__h27779 or
	  result__h27806 or
	  result__h27833 or result__h27860 or result__h27887)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27695;
      3'h1:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27725;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27752;
      3'h3:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27779;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27806;
      3'h5:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27833;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27860;
      3'h7:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 =
	      result__h27887;
    endcase
  end
  always@(rg_addr or result__h28406 or result__h28433)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8406_0x4_re_ETC__q34 =
	      result__h28406;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8406_0x4_re_ETC__q34 =
	      result__h28433;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result8406_0x4_re_ETC__q34 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h28471 or result__h28498)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8471_0x4_re_ETC__q35 =
	      result__h28471;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8471_0x4_re_ETC__q35 =
	      result__h28498;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result8471_0x4_re_ETC__q35 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8406_0x4_re_ETC__q34 or
	  rg_addr or
	  master_xactor_f_rd_data$D_OUT or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8471_0x4_re_ETC__q35)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h27635 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1093;
      3'b001:
	  ld_val__h27635 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1121;
      3'b010:
	  ld_val__h27635 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result8406_0x4_re_ETC__q34;
      3'b011:
	  ld_val__h27635 =
	      (rg_addr[2:0] == 3'h0) ?
		master_xactor_f_rd_data$D_OUT[66:3] :
		64'd0;
      3'b100:
	  ld_val__h27635 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1109;
      3'b101:
	  ld_val__h27635 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1129;
      3'b110:
	  ld_val__h27635 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result8471_0x4_re_ETC__q35;
      3'd7: ld_val__h27635 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h31749 or result__h31777)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248 =
	      result__h31749;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248 =
	      result__h31777;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h31557 or
	  result__h31585 or result__h31613 or result__h31641)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 =
	      result__h31557;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 =
	      result__h31585;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 =
	      result__h31613;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 =
	      result__h31641;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h31191 or
	  result__h31219 or
	  result__h31247 or
	  result__h31275 or
	  result__h31303 or
	  result__h31331 or result__h31359 or result__h31387)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31191;
      3'h1:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31219;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31247;
      3'h3:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31275;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31303;
      3'h5:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31331;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31359;
      3'h7:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 =
	      result__h31387;
    endcase
  end
  always@(rg_addr or
	  result__h31432 or
	  result__h31460 or result__h31488 or result__h31516)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 =
	      result__h31432;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 =
	      result__h31460;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 =
	      result__h31488;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 =
	      result__h31516;
      default: IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30070 or
	  result__h30978 or
	  result__h31006 or
	  result__h31034 or
	  result__h31062 or
	  result__h31090 or result__h31118 or result__h31146)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h30070;
      3'h1:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h30978;
      3'h2:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h31006;
      3'h3:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h31034;
      3'h4:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h31062;
      3'h5:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h31090;
      3'h6:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h31118;
      3'h7:
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 =
	      result__h31146;
    endcase
  end
  always@(rg_addr or result__h31682 or result__h31710)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1682_0x4_re_ETC__q50 =
	      result__h31682;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1682_0x4_re_ETC__q50 =
	      result__h31710;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result1682_0x4_re_ETC__q50 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1682_0x4_re_ETC__q50 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248)
  begin
    case (rg_f3)
      3'b0:
	  w1__h29875 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202;
      3'b001:
	  w1__h29875 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230;
      3'b010:
	  w1__h29875 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result1682_0x4_re_ETC__q50;
      3'b011:
	  w1__h29875 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249;
      3'b100:
	  w1__h29875 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218;
      3'b101:
	  w1__h29875 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238;
      3'b110:
	  w1__h29875 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248;
      3'd7: w1__h29875 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 or
	  w1___1__h29950 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248)
  begin
    case (rg_f3)
      3'b0:
	  w1__h29879 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202;
      3'b001:
	  w1__h29879 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230;
      3'b010: w1__h29879 = w1___1__h29950;
      3'b011:
	  w1__h29879 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249;
      3'b100:
	  w1__h29879 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218;
      3'b101:
	  w1__h29879 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238;
      3'b110:
	  w1__h29879 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248;
      3'd7: w1__h29879 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230 or
	  w19875_BITS_31_TO_0__q51 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238 or
	  IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h29841 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1202;
      3'b001:
	  new_ld_val__h29841 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_SEX_ETC___d1230;
      3'b010:
	  new_ld_val__h29841 =
	      { {32{w19875_BITS_31_TO_0__q51[31]}},
		w19875_BITS_31_TO_0__q51 };
      3'b011:
	  new_ld_val__h29841 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_IF__ETC___d1249;
      3'b100:
	  new_ld_val__h29841 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1218;
      3'b101:
	  new_ld_val__h29841 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1238;
      3'b110:
	  new_ld_val__h29841 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_0_C_ETC___d1248;
      3'd7: new_ld_val__h29841 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h31870 or
	  new_st_val__h29982 or
	  w2__h29881 or
	  new_st_val__h31842 or
	  new_st_val__h31850 or
	  new_st_val__h31846 or
	  new_st_val__h31865 or new_st_val__h31854 or new_st_val__h31859)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h29887 = new_st_val__h29982;
      5'b00001: _theResult_____2__h29887 = w2__h29881;
      5'b00100: _theResult_____2__h29887 = new_st_val__h31842;
      5'b01000: _theResult_____2__h29887 = new_st_val__h31850;
      5'b01100: _theResult_____2__h29887 = new_st_val__h31846;
      5'b10000: _theResult_____2__h29887 = new_st_val__h31865;
      5'b11000: _theResult_____2__h29887 = new_st_val__h31854;
      5'b11100: _theResult_____2__h29887 = new_st_val__h31859;
      default: _theResult_____2__h29887 = new_st_val__h31870;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_1_E_ETC___d586)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_rg_f3_0b0_IF_rg_addr_3_BITS_2_TO_0_10_EQ__ETC__q52 =
	      IF_rg_addr_3_BITS_2_TO_0_10_EQ_0x0_11_THEN_1_E_ETC___d586;
      3'd7: CASE_rg_f3_0b0_IF_rg_addr_3_BITS_2_TO_0_10_EQ__ETC__q52 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5712 or ram_word64_set$DOB or new_st_val__h18342)
  begin
    case (x1_avValue_pa__h5712[2:0])
      3'h0:
	  CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q53 =
	      { ram_word64_set$DOB[63:32], new_st_val__h18342[31:0] };
      3'h4:
	  CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q53 =
	      { new_st_val__h18342[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q53 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747 or
	  IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756 or
	  CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q53 or
	  new_st_val__h18342)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765 =
	      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d747;
      3'b001:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765 =
	      IF_IF_rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_6_ETC___d756;
      3'b010:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765 =
	      CASE_x1_avValue_pa712_BITS_2_TO_0_0x0_ram_word_ETC__q53;
      3'b011:
	  IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765 =
	      new_st_val__h18342;
      default: IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 6'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h3377 = $stime;
	  #0;
	end
    v__h3371 = v__h3377 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h3371);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", f_fabric_write_reqs$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", x__h2949);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", mem_req_wr_data_wdata__h3133);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", mem_req_wr_data_wstrb__h3134);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4533 = $stime;
	  #0;
	end
    v__h4527 = v__h4533 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4527,
		   "D_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4527,
		   "I_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4634 = $stime;
	  #0;
	end
    v__h4628 = v__h4634 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4628, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4628, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h4783 = $stime;
	  #0;
	end
    v__h4777 = v__h4783 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4777,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4777,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[63:60],
		 rg_satp[59:44],
		 satp_pa__h2004,
		 rg_addr[29:21],
		 rg_addr[20:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:12],
		 rg_addr[11:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d361)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d364)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_priv_2_ULE_0b1___d83 &&
	  rg_satp[63:60] == 4'd8 &&
	  !tlb$lookup[130])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", x1_avValue_pa__h5712);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", x1_avValue_exc_code__h5713);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d376)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", value__h6538, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("TLB_Lookup_Result { ", "hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("'h%h", tlb$lookup[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("'h%h", tlb$lookup[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("'h%h", tlb$lookup[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d422)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d425)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("'h%h", x1_avValue_pa__h5712);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("'h%h", x1_avValue_exc_code__h5713);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d425)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d422)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("'h%h", value__h6538, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_2_ULE_0b1_3_AND_rg_satp_5_BITS_63_TO_6_ETC___d386 &&
	  NOT_cfg_verbosity_read__9_ULT_2_13___d414)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d439)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d601)
	begin
	  v__h14534 = $stime;
	  #0;
	end
    v__h14528 = v__h14534 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d601)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h14528,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h7059,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h14528,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h7059,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d614)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h5712);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d601)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h7059);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d620)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d626)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d778)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5712);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d784)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h5712);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d790)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d796)
	$display("        AMO SC result = %0d", lrsc_result__h14911);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d802)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5712,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d802)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d802)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d802)
	$write(" 0x%0x",
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d700);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d802)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_2_ULE_0b1___d83 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d807)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5712,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d814)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d814)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d820)
	begin
	  v__h18122 = $stime;
	  #0;
	end
    v__h18116 = v__h18122 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d820)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18116,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18116,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d820)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d827)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$display("          PA 0x%0h ", x1_avValue_pa__h5712);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h7059,
		 word64__h7059);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h7059,
		 word64__h7059,
		 new_st_val__h18342);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$write(" 0x%0x",
	       IF_rg_f3_06_EQ_0b0_07_THEN_IF_IF_rg_priv_2_ULE_ETC___d765);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d832)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_2_ULE_0b1_3_4_OR_NOT_rg_satp_5_BIT_ETC___d838)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5712);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h21494 = $stime;
	  #0;
	end
    v__h21488 = v__h21494 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		   v__h21488,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		   v__h21488,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", lev_2_pte_pa_w64_fa__h21549);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898)
	begin
	  v__h22412 = $stime;
	  #0;
	end
    v__h22406 = v__h22412 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22406,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22406,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	begin
	  v__h22169 = $stime;
	  #0;
	end
    v__h22163 = v__h22169 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h22163,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h22163,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$display("    Req for level 1 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", lev_1_pte_pa_w64_fa__h22446);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d924)
	begin
	  v__h22700 = $stime;
	  #0;
	end
    v__h22694 = v__h22700 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d924)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h22694,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h22694,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  master_xactor_f_rd_data$D_OUT[3] &&
	  (master_xactor_f_rd_data$D_OUT[4] ||
	   !master_xactor_f_rd_data$D_OUT[5]) &&
	  (master_xactor_f_rd_data$D_OUT[6] ||
	   master_xactor_f_rd_data$D_OUT[4]) &&
	  (master_xactor_f_rd_data$D_OUT[30:22] != 9'd0 ||
	   master_xactor_f_rd_data$D_OUT[21:13] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 exc_code___1__h6113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d936)
	begin
	  v__h22812 = $stime;
	  #0;
	end
    v__h22806 = v__h22812 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d936)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h22806,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h22806,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d936)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h22442);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h22341 = $stime;
	  #0;
	end
    v__h22335 = v__h22341 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22335,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2685);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22335,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2685);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898)
	begin
	  v__h23445 = $stime;
	  #0;
	end
    v__h23439 = v__h23445 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23439,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23439,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	begin
	  v__h23205 = $stime;
	  #0;
	end
    v__h23199 = v__h23205 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23199,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23199,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", lev_0_pte_pa_w64_fa__h23479);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d971)
	begin
	  v__h23845 = $stime;
	  #0;
	end
    v__h23839 = v__h23845 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d971)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h23839,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h23839,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d971)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h22442);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d977)
	begin
	  v__h23733 = $stime;
	  #0;
	end
    v__h23727 = v__h23733 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d977)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23727,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23727,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  master_xactor_f_rd_data$D_OUT[3] &&
	  (master_xactor_f_rd_data$D_OUT[4] ||
	   !master_xactor_f_rd_data$D_OUT[5]) &&
	  (master_xactor_f_rd_data$D_OUT[6] ||
	   master_xactor_f_rd_data$D_OUT[4]) &&
	  master_xactor_f_rd_data$D_OUT[21:13] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h6113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h23374 = $stime;
	  #0;
	end
    v__h23368 = v__h23374 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23368,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2685);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23368,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2685);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898)
	begin
	  v__h24316 = $stime;
	  #0;
	end
    v__h24310 = v__h24316 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d898)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24310,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24310,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	begin
	  v__h24387 = $stime;
	  #0;
	end
    v__h24381 = v__h24387 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d908)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24381,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24381,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa,
		   exc_code___1__h6113);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d1002)
	begin
	  v__h24469 = $stime;
	  #0;
	end
    v__h24463 = v__h24469 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d1002)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24463,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24463,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_f_rd_data$D_OUT[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__58_BITS_2_TO_1__ETC___d1002)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h22442);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h24245 = $stime;
	  #0;
	end
    v__h24239 = v__h24245 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24239,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2685);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24239,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2685);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h24596 = $stime;
	  #0;
	end
    v__h24590 = v__h24596 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h24590,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h24590,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", cline_fabric_addr__h24649);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	begin
	  v__h25355 = $stime;
	  #0;
	end
    v__h25349 = v__h25355 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25349,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25349,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h25577 = $stime;
	  #0;
	end
    v__h25571 = v__h25577 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h25571,
		   "D_MMU_Cache",
		   access_exc_code__h2685);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h25571,
		   "I_MMU_Cache",
		   access_exc_code__h2685);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write(" 0x%0x", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_021___d1022)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:6],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h27176 = $stime;
	  #0;
	end
    v__h27170 = v__h27176 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27170,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27170,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", value__h29427);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h27526 = $stime;
	  #0;
	end
    v__h27520 = v__h27526 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27520,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27520,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h28626 = $stime;
	  #0;
	end
    v__h28620 = v__h28626 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28620,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h27635);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28620,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h27635);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h28733 = $stime;
	  #0;
	end
    v__h28727 = v__h28733 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h28727,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h28727,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h28838 = $stime;
	  #0;
	end
    v__h28832 = v__h28838 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28832,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28832,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h28918 = $stime;
	  #0;
	end
    v__h28912 = v__h28918 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28912,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28912,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29128 = $stime;
	  #0;
	end
    v__h29122 = v__h29128 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29122,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29122,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29246 = $stime;
	  #0;
	end
    v__h29240 = v__h29246 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29240,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29240,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", value__h29427);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29540 = $stime;
	  #0;
	end
    v__h29534 = v__h29540 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29534,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29534,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29715 = $stime;
	  #0;
	end
    v__h29709 = v__h29715 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29709,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29709,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h31974 = $stime;
	  #0;
	end
    v__h31968 = v__h31974 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h31968,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h29841);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h31968,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h29841);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h29811 = $stime;
	  #0;
	end
    v__h29805 = v__h29811 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h29805,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h29805,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h32581 = $stime;
	  #0;
	end
    v__h32575 = v__h32581 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h32575,
		 "D_MMU_Cache",
		 $unsigned(b__h21448));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h32575,
		 "I_MMU_Cache",
		 $unsigned(b__h21448));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	begin
	  v__h32542 = $stime;
	  #0;
	end
    v__h32536 = v__h32542 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h32536,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h32536,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h4162 = $stime;
	  #0;
	end
    v__h4156 = v__h4162 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h4156, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h4156, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h32930 = $stime;
	  #0;
	end
    v__h32924 = v__h32930 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write("%0d: %m.req: op:", v__h32924);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_f3,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40) $write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__9_ULE_1___d40)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_334_EQ_0b0_335_OR_req_f3_BI_ETC___d1364 &&
	  !cfg_verbosity_read__9_ULE_1___d40)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__9_ULE_1___d40)
	begin
	  v__h34106 = $stime;
	  #0;
	end
    v__h34100 = v__h34106 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__9_ULE_1___d40)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h34100, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h34100, "I_MMU_Cache");
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

