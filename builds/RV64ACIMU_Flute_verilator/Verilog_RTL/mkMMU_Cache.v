//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    64
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    64 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [10 : 0] crg_sb_to_load_delay$port0__write_1,
		crg_sb_to_load_delay$port2__read;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire crg_sb_to_load_delay$EN_port1__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register crg_sb_to_load_delay
  reg [10 : 0] crg_sb_to_load_delay;
  wire [10 : 0] crg_sb_to_load_delay$D_IN;
  wire crg_sb_to_load_delay$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [5 : 0] rg_cset_in_cache;
  wire [5 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [63 : 0] rg_lrsc_pa;
  wire [63 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  wire [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_fabric_write_reqs
  reg [130 : 0] f_fabric_write_reqs$D_IN;
  wire [130 : 0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$CLR,
       f_fabric_write_reqs$DEQ,
       f_fabric_write_reqs$EMPTY_N,
       f_fabric_write_reqs$ENQ,
       f_fabric_write_reqs$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  wire [96 : 0] master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [96 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [72 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [52 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [5 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_fabric_send_write_req,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_fabric_send_write_req,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [130 : 0] MUX_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_f_fabric_write_reqs$enq_1__VAL_3;
  wire [96 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2;
  wire [52 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [4 : 0] MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_3;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1;
  wire MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_12,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3045;
  reg [31 : 0] v__h3966;
  reg [31 : 0] v__h4067;
  reg [31 : 0] v__h4520;
  reg [31 : 0] v__h12989;
  reg [31 : 0] v__h16634;
  reg [31 : 0] v__h19878;
  reg [31 : 0] v__h20682;
  reg [31 : 0] v__h20923;
  reg [31 : 0] v__h22527;
  reg [31 : 0] v__h22877;
  reg [31 : 0] v__h23979;
  reg [31 : 0] v__h24086;
  reg [31 : 0] v__h24191;
  reg [31 : 0] v__h24271;
  reg [31 : 0] v__h24481;
  reg [31 : 0] v__h24599;
  reg [31 : 0] v__h24893;
  reg [31 : 0] v__h25068;
  reg [31 : 0] v__h27327;
  reg [31 : 0] v__h25164;
  reg [31 : 0] v__h27934;
  reg [31 : 0] v__h27895;
  reg [31 : 0] v__h3603;
  reg [31 : 0] v__h28283;
  reg [31 : 0] v__h3039;
  reg [31 : 0] v__h3597;
  reg [31 : 0] v__h3960;
  reg [31 : 0] v__h4061;
  reg [31 : 0] v__h4514;
  reg [31 : 0] v__h12983;
  reg [31 : 0] v__h16628;
  reg [31 : 0] v__h19872;
  reg [31 : 0] v__h20676;
  reg [31 : 0] v__h20917;
  reg [31 : 0] v__h22521;
  reg [31 : 0] v__h22871;
  reg [31 : 0] v__h23973;
  reg [31 : 0] v__h24080;
  reg [31 : 0] v__h24185;
  reg [31 : 0] v__h24265;
  reg [31 : 0] v__h24475;
  reg [31 : 0] v__h24593;
  reg [31 : 0] v__h24887;
  reg [31 : 0] v__h25062;
  reg [31 : 0] v__h25158;
  reg [31 : 0] v__h27321;
  reg [31 : 0] v__h27889;
  reg [31 : 0] v__h27928;
  reg [31 : 0] v__h28277;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32,
	       CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2809_0x4_re_ETC__q29,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3757_0x4_re_ETC__q33,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3822_0x4_re_ETC__q34,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result7035_0x4_re_ETC__q49,
	       CASE_rg_f3_0b0_IF_rg_addr_8_BITS_2_TO_0_30_EQ__ETC__q51,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452,
	       IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461,
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298,
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396,
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470,
	       IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338,
	       _theResult_____2__h17134,
	       _theResult_____2__h25240,
	       ld_val__h22986,
	       mem_req_wr_data_wdata__h2796,
	       new_ld_val__h25194,
	       w1__h17126,
	       w1__h25228,
	       w1__h25232;
  reg [7 : 0] mem_req_wr_data_wstrb__h2797;
  reg [2 : 0] value__h24780, x__h2617;
  wire [63 : 0] IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_1_E_ETC___d306,
		IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784,
		IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291,
		IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402,
		IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d484,
		_theResult___snd_fst__h2804,
		cline_fabric_addr__h19931,
		new_st_val__h16856,
		new_st_val__h17138,
		new_st_val__h17229,
		new_st_val__h18209,
		new_st_val__h18213,
		new_st_val__h18217,
		new_st_val__h18221,
		new_st_val__h18226,
		new_st_val__h18232,
		new_st_val__h18237,
		new_st_val__h25244,
		new_st_val__h25335,
		new_st_val__h27195,
		new_st_val__h27199,
		new_st_val__h27203,
		new_st_val__h27207,
		new_st_val__h27212,
		new_st_val__h27218,
		new_st_val__h27223,
		new_value__h15724,
		new_value__h5696,
		result__h12077,
		result__h12105,
		result__h12133,
		result__h12161,
		result__h12189,
		result__h12217,
		result__h12245,
		result__h12273,
		result__h12318,
		result__h12346,
		result__h12374,
		result__h12402,
		result__h12430,
		result__h12458,
		result__h12486,
		result__h12514,
		result__h12559,
		result__h12587,
		result__h12615,
		result__h12643,
		result__h12684,
		result__h12712,
		result__h12740,
		result__h12768,
		result__h12809,
		result__h12837,
		result__h12876,
		result__h12904,
		result__h23046,
		result__h23076,
		result__h23103,
		result__h23130,
		result__h23157,
		result__h23184,
		result__h23211,
		result__h23238,
		result__h23282,
		result__h23309,
		result__h23336,
		result__h23363,
		result__h23390,
		result__h23417,
		result__h23444,
		result__h23471,
		result__h23515,
		result__h23542,
		result__h23569,
		result__h23596,
		result__h23636,
		result__h23663,
		result__h23690,
		result__h23717,
		result__h23757,
		result__h23784,
		result__h23822,
		result__h23849,
		result__h25423,
		result__h26331,
		result__h26359,
		result__h26387,
		result__h26415,
		result__h26443,
		result__h26471,
		result__h26499,
		result__h26544,
		result__h26572,
		result__h26600,
		result__h26628,
		result__h26656,
		result__h26684,
		result__h26712,
		result__h26740,
		result__h26785,
		result__h26813,
		result__h26841,
		result__h26869,
		result__h26910,
		result__h26938,
		result__h26966,
		result__h26994,
		result__h27035,
		result__h27063,
		result__h27102,
		result__h27130,
		w1___1__h17197,
		w1___1__h25303,
		w2___1__h25304,
		w2__h25234,
		word64__h5515,
		x__h13376,
		x__h25223,
		y__h5721;
  wire [31 : 0] IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC__q30,
		ld_val2986_BITS_31_TO_0__q37,
		ld_val2986_BITS_63_TO_32__q44,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q11,
		rg_st_amo_val_BITS_31_TO_0__q31,
		w15228_BITS_31_TO_0__q50,
		word64515_BITS_31_TO_0__q17,
		word64515_BITS_63_TO_32__q24;
  wire [15 : 0] ld_val2986_BITS_15_TO_0__q36,
		ld_val2986_BITS_31_TO_16__q40,
		ld_val2986_BITS_47_TO_32__q43,
		ld_val2986_BITS_63_TO_48__q47,
		master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6,
		master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q10,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q14,
		word64515_BITS_15_TO_0__q16,
		word64515_BITS_31_TO_16__q20,
		word64515_BITS_47_TO_32__q23,
		word64515_BITS_63_TO_48__q27;
  wire [7 : 0] ld_val2986_BITS_15_TO_8__q38,
	       ld_val2986_BITS_23_TO_16__q39,
	       ld_val2986_BITS_31_TO_24__q41,
	       ld_val2986_BITS_39_TO_32__q42,
	       ld_val2986_BITS_47_TO_40__q45,
	       ld_val2986_BITS_55_TO_48__q46,
	       ld_val2986_BITS_63_TO_56__q48,
	       ld_val2986_BITS_7_TO_0__q35,
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1,
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4,
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5,
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q8,
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q9,
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q7,
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q13,
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q12,
	       strobe64__h2734,
	       strobe64__h2736,
	       strobe64__h2738,
	       word64515_BITS_15_TO_8__q18,
	       word64515_BITS_23_TO_16__q19,
	       word64515_BITS_31_TO_24__q21,
	       word64515_BITS_39_TO_32__q22,
	       word64515_BITS_47_TO_40__q25,
	       word64515_BITS_55_TO_48__q26,
	       word64515_BITS_63_TO_56__q28,
	       word64515_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h2584;
  wire [4 : 0] IF_rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d144,
	       IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d143;
  wire [3 : 0] access_exc_code__h2352, b__h19832;
  wire IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d112,
       NOT_cfg_verbosity_read__9_ULE_1_0___d41,
       NOT_cfg_verbosity_read__9_ULE_2_48___d549,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d334,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d345,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d479,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d487,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d499,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d520,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d527,
       NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d529,
       NOT_ram_state_and_ctag_cset_b_read__03_BIT_52__ETC___d153,
       NOT_req_f3_BITS_1_TO_0_69_EQ_0b0_70_71_AND_NOT_ETC___d890,
       NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d139,
       NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d482,
       NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d502,
       NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d510,
       NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d162,
       NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d342,
       NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d476,
       NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d518,
       NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d521,
       NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d525,
       NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d340,
       NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d474,
       NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d500,
       NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d504,
       NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d508,
       dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_rg_ETC___d114,
       lrsc_result__h13366,
       ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108,
       ram_state_and_ctag_cset_b_read__03_BIT_52_04_A_ETC___d154,
       req_f3_BITS_1_TO_0_69_EQ_0b0_70_OR_req_f3_BITS_ETC___d899,
       rg_addr_8_EQ_rg_lrsc_pa_6___d151,
       rg_amo_funct7_5_BITS_6_TO_2_6_EQ_0b10_7_AND_NO_ETC___d328,
       rg_lrsc_pa_6_EQ_rg_addr_8___d97,
       rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d134,
       rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d165,
       rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d167,
       rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d170,
       rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d311,
       rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d324,
       rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d163,
       rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d343,
       rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d477,
       rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d480,
       rg_op_2_EQ_2_4_AND_rg_amo_funct7_5_BITS_6_TO_2_ETC___d514,
       rg_state_4_EQ_13_84_AND_rg_op_2_EQ_0_3_OR_rg_o_ETC___d586,
       rg_state_4_EQ_3_15_AND_NOT_rg_op_2_EQ_0_3_16_A_ETC___d124;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h22986 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h25194 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h22986;
      MUX_dw_output_ld_val$wset_1__SEL_2: word64 = new_ld_val__h25194;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 5'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule f_fabric_write_reqs
  FIFO2 #(.width(32'd131), .guarded(32'd1)) f_fabric_write_reqs(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_fabric_write_reqs$D_IN),
								.ENQ(f_fabric_write_reqs$ENQ),
								.DEQ(f_fabric_write_reqs$DEQ),
								.CLR(f_fabric_write_reqs$CLR),
								.D_OUT(f_fabric_write_reqs$D_OUT),
								.FULL_N(f_fabric_write_reqs$FULL_N),
								.EMPTY_N(f_fabric_write_reqs$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd53),
	  .MEMSIZE(7'd64)) ram_state_and_ctag_cset(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(ram_state_and_ctag_cset$ADDRA),
						   .ADDRB(ram_state_and_ctag_cset$ADDRB),
						   .DIA(ram_state_and_ctag_cset$DIA),
						   .DIB(ram_state_and_ctag_cset$DIB),
						   .WEA(ram_state_and_ctag_cset$WEA),
						   .WEB(ram_state_and_ctag_cset$WEB),
						   .ENA(ram_state_and_ctag_cset$ENA),
						   .ENB(ram_state_and_ctag_cset$ENB),
						   .DOA(),
						   .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_rl_fabric_send_write_req
  assign CAN_FIRE_RL_rl_fabric_send_write_req =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_fabric_send_write_req =
	     CAN_FIRE_RL_rl_fabric_send_write_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = WILL_FIRE_RL_rl_reset ;
  assign WILL_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 6'd63 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 5'd1 ;

  // rule RL_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_rg_ETC___d114 &&
	     rg_state_4_EQ_3_15_AND_NOT_rg_op_2_EQ_0_3_16_A_ETC___d124 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd9 &&
	     b__h19832 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 5'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     master_xactor_f_rd_addr$FULL_N &&
	     rg_state_4_EQ_13_84_AND_rg_op_2_EQ_0_3_OR_rg_o_ETC___d586 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 5'd14 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     f_fabric_write_reqs$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 5'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      f_fabric_write_reqs$FULL_N) &&
	     rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h19832 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d170 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d482 ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_69_EQ_0b0_70_OR_req_f3_BITS_ETC___d899 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_69_EQ_0b0_70_71_AND_NOT_ETC___d890 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d334 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d165 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     f_reset_reqs$EMPTY_N && rg_state != 5'd1 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d134 ||
	      NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d139) ;
  assign MUX_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h5696 :
	       new_value__h15724 ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = { rg_f3, rg_pa, x__h25223 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 =
	     { rg_f3,
	       rg_addr,
	       IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d484 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_3 =
	     { rg_f3, rg_pa, rg_st_amo_val } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, rg_pa, 8'd0, value__h24780, 18'd65536 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, cline_fabric_addr__h19931, 29'd15532032 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396 :
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 6'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h13376 :
	       IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 ;
  assign MUX_rg_state$write_1__VAL_1 =
	     NOT_req_f3_BITS_1_TO_0_69_EQ_0b0_70_71_AND_NOT_ETC___d890 ?
	       5'd4 :
	       5'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ? 5'd15 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (dmem_not_imem && !soc_map$m_is_mem_addr) ?
	       5'd13 :
	       IF_rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d144 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d170 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h19832 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h19832 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;
  assign crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, crg_sb_to_load_delay[10:1] } ;
  assign crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d479 ;
  assign crg_sb_to_load_delay$port2__read =
	     crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       crg_sb_to_load_delay$port0__write_1 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register crg_sb_to_load_delay
  assign crg_sb_to_load_delay$D_IN = crg_sb_to_load_delay$port2__read ;
  assign crg_sb_to_load_delay$EN = 1'b1 ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or access_exc_code__h2352)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h2352;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_69_EQ_0b0_70_71_AND_NOT_ETC___d890 ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h25194 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h22986 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2: rg_ld_val$D_IN = new_ld_val__h25194;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h22986;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d334 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d167 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d165 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : rg_addr ;
  assign rg_pa$EN = EN_req || WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN = 64'h0 ;
  assign rg_pte_pa$EN = 1'b0 ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h16856 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d529 ||
	     EN_req ;

  // register rg_state
  always@(EN_req or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__VAL_10 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_rg_state$write_1__SEL_12 or
	  MUX_rg_state$write_1__VAL_12 or MUX_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 5'd16;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_write_req:
	rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 5'd14;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 5'd3;
    MUX_rg_state$write_1__SEL_10:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 5'd10;
    MUX_rg_state$write_1__SEL_12:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    MUX_rg_state$write_1__SEL_13: rg_state$D_IN = 5'd2;
    default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     MUX_rg_state$write_1__SEL_12 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_fabric_write_reqs
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_f_fabric_write_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_f_fabric_write_reqs$enq_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_3;
      default: f_fabric_write_reqs$D_IN =
		   131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d482 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr$D_IN =
	     MUX_master_xactor_f_rd_addr$enq_1__SEL_1 ?
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_1 :
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_2 ;
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ;
  assign master_xactor_f_rd_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       f_fabric_write_reqs$D_OUT[127:64],
	       8'd0,
	       x__h2617,
	       18'd65536 } ;
  assign master_xactor_f_wr_addr$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { mem_req_wr_data_wdata__h2796,
	       mem_req_wr_data_wstrb__h2797,
	       1'd1 } ;
  assign master_xactor_f_wr_data$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = CAN_FIRE_RL_rl_discard_write_rsp ;
  assign master_xactor_f_wr_resp$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       rg_addr[11:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       53'h0AAAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       53'h0AAAAAAAAAAAAA /* unspecified value */  :
	       53'h0AAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_69_EQ_0b0_70_OR_req_f3_BITS_ETC___d899 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_f_rd_data$D_OUT[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d345 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_69_EQ_0b0_70_OR_req_f3_BITS_ETC___d899 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = rg_addr ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_1_E_ETC___d306 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h22986 : 64'd0 ;
  assign IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291 =
	     (rg_addr[2:0] == 3'h0) ? word64__h5515 : 64'd0 ;
  assign IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC__q30 =
	     IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298[31:0] ;
  assign IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q31[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q31 } :
	       rg_st_amo_val ;
  assign IF_rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d144 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       5'd9 :
	       IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d143 ;
  assign IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d112 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h13366 ||
	       f_fabric_write_reqs$FULL_N :
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 ||
	       f_fabric_write_reqs$FULL_N ;
  assign IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d143 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       5'd12 :
	       ((!ram_state_and_ctag_cset$DOB[52] ||
		 !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) ?
		  5'd9 :
		  5'd12) ;
  assign IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d484 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_st_amo_val :
	       new_st_val__h16856 ;
  assign NOT_cfg_verbosity_read__9_ULE_1_0___d41 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read__9_ULE_2_48___d549 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d334 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[52] &&
	      ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d345 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d343 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d479 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d477 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d487 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     rg_addr_8_EQ_rg_lrsc_pa_6___d151 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d499 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d520 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d518 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d521 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d527 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d525 ;
  assign NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d529 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d342 ;
  assign NOT_ram_state_and_ctag_cset_b_read__03_BIT_52__ETC___d153 =
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     rg_addr_8_EQ_rg_lrsc_pa_6___d151 ;
  assign NOT_req_f3_BITS_1_TO_0_69_EQ_0b0_70_71_AND_NOT_ETC___d890 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d139 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_6_EQ_rg_addr_8___d97) ;
  assign NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d482 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d480 ||
	      NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d342) ;
  assign NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d502 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d500 ;
  assign NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d510 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d508 ;
  assign NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d162 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     rg_addr_8_EQ_rg_lrsc_pa_6___d151 ;
  assign NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d342 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 ;
  assign NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d476 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     (rg_f3 == 3'b0 || rg_f3 == 3'b001) ;
  assign NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d518 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d521 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d525 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     rg_addr_8_EQ_rg_lrsc_pa_6___d151 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d340 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_6_EQ_rg_addr_8___d97) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 ;
  assign NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d474 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_6_EQ_rg_addr_8___d97) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     (rg_f3 == 3'b0 || rg_f3 == 3'b001) ;
  assign NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d500 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_6_EQ_rg_addr_8___d97) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d504 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_6_EQ_rg_addr_8___d97) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d508 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_6_EQ_rg_addr_8___d97) &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign _theResult___snd_fst__h2804 =
	     f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2584 ;
  assign access_exc_code__h2352 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h19832 =
	     CAN_FIRE_RL_rl_fabric_send_write_req ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cline_fabric_addr__h19931 = { rg_pa[63:6], 6'd0 } ;
  assign dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_rg_ETC___d114 =
	     dmem_not_imem && !soc_map$m_is_mem_addr || rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	     IF_rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_ETC___d112 ;
  assign ld_val2986_BITS_15_TO_0__q36 = ld_val__h22986[15:0] ;
  assign ld_val2986_BITS_15_TO_8__q38 = ld_val__h22986[15:8] ;
  assign ld_val2986_BITS_23_TO_16__q39 = ld_val__h22986[23:16] ;
  assign ld_val2986_BITS_31_TO_0__q37 = ld_val__h22986[31:0] ;
  assign ld_val2986_BITS_31_TO_16__q40 = ld_val__h22986[31:16] ;
  assign ld_val2986_BITS_31_TO_24__q41 = ld_val__h22986[31:24] ;
  assign ld_val2986_BITS_39_TO_32__q42 = ld_val__h22986[39:32] ;
  assign ld_val2986_BITS_47_TO_32__q43 = ld_val__h22986[47:32] ;
  assign ld_val2986_BITS_47_TO_40__q45 = ld_val__h22986[47:40] ;
  assign ld_val2986_BITS_55_TO_48__q46 = ld_val__h22986[55:48] ;
  assign ld_val2986_BITS_63_TO_32__q44 = ld_val__h22986[63:32] ;
  assign ld_val2986_BITS_63_TO_48__q47 = ld_val__h22986[63:48] ;
  assign ld_val2986_BITS_63_TO_56__q48 = ld_val__h22986[63:56] ;
  assign ld_val2986_BITS_7_TO_0__q35 = ld_val__h22986[7:0] ;
  assign lrsc_result__h13366 =
	     !rg_lrsc_valid || !rg_lrsc_pa_6_EQ_rg_addr_8___d97 ;
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 =
	     master_xactor_f_rd_data$D_OUT[10:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 =
	     master_xactor_f_rd_data$D_OUT[18:11] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 =
	     master_xactor_f_rd_data$D_OUT[18:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 =
	     master_xactor_f_rd_data$D_OUT[26:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 =
	     master_xactor_f_rd_data$D_OUT[34:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q8 =
	     master_xactor_f_rd_data$D_OUT[34:27] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 =
	     master_xactor_f_rd_data$D_OUT[34:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q9 =
	     master_xactor_f_rd_data$D_OUT[42:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q10 =
	     master_xactor_f_rd_data$D_OUT[50:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q7 =
	     master_xactor_f_rd_data$D_OUT[50:43] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q13 =
	     master_xactor_f_rd_data$D_OUT[58:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q11 =
	     master_xactor_f_rd_data$D_OUT[66:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q14 =
	     master_xactor_f_rd_data$D_OUT[66:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q12 =
	     master_xactor_f_rd_data$D_OUT[66:59] ;
  assign new_st_val__h16856 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h17138 :
	       _theResult_____2__h17134 ;
  assign new_st_val__h17138 = { 32'd0, _theResult_____2__h17134[31:0] } ;
  assign new_st_val__h17229 =
	     IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 +
	     IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402 ;
  assign new_st_val__h18209 = w1__h17126 ^ w2__h25234 ;
  assign new_st_val__h18213 = w1__h17126 & w2__h25234 ;
  assign new_st_val__h18217 = w1__h17126 | w2__h25234 ;
  assign new_st_val__h18221 =
	     (w1__h17126 < w2__h25234) ? w1__h17126 : w2__h25234 ;
  assign new_st_val__h18226 =
	     (w1__h17126 <= w2__h25234) ? w2__h25234 : w1__h17126 ;
  assign new_st_val__h18232 =
	     ((IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402 ^
	       64'h8000000000000000)) ?
	       w1__h17126 :
	       w2__h25234 ;
  assign new_st_val__h18237 =
	     ((IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402 ^
	       64'h8000000000000000)) ?
	       w2__h25234 :
	       w1__h17126 ;
  assign new_st_val__h25244 = { 32'd0, _theResult_____2__h25240[31:0] } ;
  assign new_st_val__h25335 =
	     new_ld_val__h25194 +
	     IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402 ;
  assign new_st_val__h27195 = w1__h25232 ^ w2__h25234 ;
  assign new_st_val__h27199 = w1__h25232 & w2__h25234 ;
  assign new_st_val__h27203 = w1__h25232 | w2__h25234 ;
  assign new_st_val__h27207 =
	     (w1__h25232 < w2__h25234) ? w1__h25232 : w2__h25234 ;
  assign new_st_val__h27212 =
	     (w1__h25232 <= w2__h25234) ? w2__h25234 : w1__h25232 ;
  assign new_st_val__h27218 =
	     ((new_ld_val__h25194 ^ 64'h8000000000000000) <
	      (IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402 ^
	       64'h8000000000000000)) ?
	       w1__h25232 :
	       w2__h25234 ;
  assign new_st_val__h27223 =
	     ((new_ld_val__h25194 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_rg_st_amo_val_ETC___d402 ^
	       64'h8000000000000000)) ?
	       w2__h25234 :
	       w1__h25232 ;
  assign new_value__h15724 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       64'd1 :
	       CASE_rg_f3_0b0_IF_rg_addr_8_BITS_2_TO_0_30_EQ__ETC__q51 ;
  assign new_value__h5696 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       word64__h5515 :
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 ;
  assign ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 =
	     ram_state_and_ctag_cset$DOB[51:0] == rg_addr[63:12] ;
  assign ram_state_and_ctag_cset_b_read__03_BIT_52_04_A_ETC___d154 =
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__03_BIT_52__ETC___d153 ;
  assign req_f3_BITS_1_TO_0_69_EQ_0b0_70_OR_req_f3_BITS_ETC___d899 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h12077 =
	     { {56{word64515_BITS_7_TO_0__q15[7]}},
	       word64515_BITS_7_TO_0__q15 } ;
  assign result__h12105 =
	     { {56{word64515_BITS_15_TO_8__q18[7]}},
	       word64515_BITS_15_TO_8__q18 } ;
  assign result__h12133 =
	     { {56{word64515_BITS_23_TO_16__q19[7]}},
	       word64515_BITS_23_TO_16__q19 } ;
  assign result__h12161 =
	     { {56{word64515_BITS_31_TO_24__q21[7]}},
	       word64515_BITS_31_TO_24__q21 } ;
  assign result__h12189 =
	     { {56{word64515_BITS_39_TO_32__q22[7]}},
	       word64515_BITS_39_TO_32__q22 } ;
  assign result__h12217 =
	     { {56{word64515_BITS_47_TO_40__q25[7]}},
	       word64515_BITS_47_TO_40__q25 } ;
  assign result__h12245 =
	     { {56{word64515_BITS_55_TO_48__q26[7]}},
	       word64515_BITS_55_TO_48__q26 } ;
  assign result__h12273 =
	     { {56{word64515_BITS_63_TO_56__q28[7]}},
	       word64515_BITS_63_TO_56__q28 } ;
  assign result__h12318 = { 56'd0, word64__h5515[7:0] } ;
  assign result__h12346 = { 56'd0, word64__h5515[15:8] } ;
  assign result__h12374 = { 56'd0, word64__h5515[23:16] } ;
  assign result__h12402 = { 56'd0, word64__h5515[31:24] } ;
  assign result__h12430 = { 56'd0, word64__h5515[39:32] } ;
  assign result__h12458 = { 56'd0, word64__h5515[47:40] } ;
  assign result__h12486 = { 56'd0, word64__h5515[55:48] } ;
  assign result__h12514 = { 56'd0, word64__h5515[63:56] } ;
  assign result__h12559 =
	     { {48{word64515_BITS_15_TO_0__q16[15]}},
	       word64515_BITS_15_TO_0__q16 } ;
  assign result__h12587 =
	     { {48{word64515_BITS_31_TO_16__q20[15]}},
	       word64515_BITS_31_TO_16__q20 } ;
  assign result__h12615 =
	     { {48{word64515_BITS_47_TO_32__q23[15]}},
	       word64515_BITS_47_TO_32__q23 } ;
  assign result__h12643 =
	     { {48{word64515_BITS_63_TO_48__q27[15]}},
	       word64515_BITS_63_TO_48__q27 } ;
  assign result__h12684 = { 48'd0, word64__h5515[15:0] } ;
  assign result__h12712 = { 48'd0, word64__h5515[31:16] } ;
  assign result__h12740 = { 48'd0, word64__h5515[47:32] } ;
  assign result__h12768 = { 48'd0, word64__h5515[63:48] } ;
  assign result__h12809 =
	     { {32{word64515_BITS_31_TO_0__q17[31]}},
	       word64515_BITS_31_TO_0__q17 } ;
  assign result__h12837 =
	     { {32{word64515_BITS_63_TO_32__q24[31]}},
	       word64515_BITS_63_TO_32__q24 } ;
  assign result__h12876 = { 32'd0, word64__h5515[31:0] } ;
  assign result__h12904 = { 32'd0, word64__h5515[63:32] } ;
  assign result__h23046 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 } ;
  assign result__h23076 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 } ;
  assign result__h23103 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 } ;
  assign result__h23130 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q8[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q8 } ;
  assign result__h23157 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q9[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q9 } ;
  assign result__h23184 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q7[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q7 } ;
  assign result__h23211 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q13[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q13 } ;
  assign result__h23238 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q12[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q12 } ;
  assign result__h23282 = { 56'd0, master_xactor_f_rd_data$D_OUT[10:3] } ;
  assign result__h23309 = { 56'd0, master_xactor_f_rd_data$D_OUT[18:11] } ;
  assign result__h23336 = { 56'd0, master_xactor_f_rd_data$D_OUT[26:19] } ;
  assign result__h23363 = { 56'd0, master_xactor_f_rd_data$D_OUT[34:27] } ;
  assign result__h23390 = { 56'd0, master_xactor_f_rd_data$D_OUT[42:35] } ;
  assign result__h23417 = { 56'd0, master_xactor_f_rd_data$D_OUT[50:43] } ;
  assign result__h23444 = { 56'd0, master_xactor_f_rd_data$D_OUT[58:51] } ;
  assign result__h23471 = { 56'd0, master_xactor_f_rd_data$D_OUT[66:59] } ;
  assign result__h23515 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 } ;
  assign result__h23542 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 } ;
  assign result__h23569 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q10[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q10 } ;
  assign result__h23596 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q14[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q14 } ;
  assign result__h23636 = { 48'd0, master_xactor_f_rd_data$D_OUT[18:3] } ;
  assign result__h23663 = { 48'd0, master_xactor_f_rd_data$D_OUT[34:19] } ;
  assign result__h23690 = { 48'd0, master_xactor_f_rd_data$D_OUT[50:35] } ;
  assign result__h23717 = { 48'd0, master_xactor_f_rd_data$D_OUT[66:51] } ;
  assign result__h23757 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 } ;
  assign result__h23784 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q11[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q11 } ;
  assign result__h23822 = { 32'd0, master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign result__h23849 = { 32'd0, master_xactor_f_rd_data$D_OUT[66:35] } ;
  assign result__h25423 =
	     { {56{ld_val2986_BITS_7_TO_0__q35[7]}},
	       ld_val2986_BITS_7_TO_0__q35 } ;
  assign result__h26331 =
	     { {56{ld_val2986_BITS_15_TO_8__q38[7]}},
	       ld_val2986_BITS_15_TO_8__q38 } ;
  assign result__h26359 =
	     { {56{ld_val2986_BITS_23_TO_16__q39[7]}},
	       ld_val2986_BITS_23_TO_16__q39 } ;
  assign result__h26387 =
	     { {56{ld_val2986_BITS_31_TO_24__q41[7]}},
	       ld_val2986_BITS_31_TO_24__q41 } ;
  assign result__h26415 =
	     { {56{ld_val2986_BITS_39_TO_32__q42[7]}},
	       ld_val2986_BITS_39_TO_32__q42 } ;
  assign result__h26443 =
	     { {56{ld_val2986_BITS_47_TO_40__q45[7]}},
	       ld_val2986_BITS_47_TO_40__q45 } ;
  assign result__h26471 =
	     { {56{ld_val2986_BITS_55_TO_48__q46[7]}},
	       ld_val2986_BITS_55_TO_48__q46 } ;
  assign result__h26499 =
	     { {56{ld_val2986_BITS_63_TO_56__q48[7]}},
	       ld_val2986_BITS_63_TO_56__q48 } ;
  assign result__h26544 = { 56'd0, ld_val__h22986[7:0] } ;
  assign result__h26572 = { 56'd0, ld_val__h22986[15:8] } ;
  assign result__h26600 = { 56'd0, ld_val__h22986[23:16] } ;
  assign result__h26628 = { 56'd0, ld_val__h22986[31:24] } ;
  assign result__h26656 = { 56'd0, ld_val__h22986[39:32] } ;
  assign result__h26684 = { 56'd0, ld_val__h22986[47:40] } ;
  assign result__h26712 = { 56'd0, ld_val__h22986[55:48] } ;
  assign result__h26740 = { 56'd0, ld_val__h22986[63:56] } ;
  assign result__h26785 =
	     { {48{ld_val2986_BITS_15_TO_0__q36[15]}},
	       ld_val2986_BITS_15_TO_0__q36 } ;
  assign result__h26813 =
	     { {48{ld_val2986_BITS_31_TO_16__q40[15]}},
	       ld_val2986_BITS_31_TO_16__q40 } ;
  assign result__h26841 =
	     { {48{ld_val2986_BITS_47_TO_32__q43[15]}},
	       ld_val2986_BITS_47_TO_32__q43 } ;
  assign result__h26869 =
	     { {48{ld_val2986_BITS_63_TO_48__q47[15]}},
	       ld_val2986_BITS_63_TO_48__q47 } ;
  assign result__h26910 = { 48'd0, ld_val__h22986[15:0] } ;
  assign result__h26938 = { 48'd0, ld_val__h22986[31:16] } ;
  assign result__h26966 = { 48'd0, ld_val__h22986[47:32] } ;
  assign result__h26994 = { 48'd0, ld_val__h22986[63:48] } ;
  assign result__h27035 =
	     { {32{ld_val2986_BITS_31_TO_0__q37[31]}},
	       ld_val2986_BITS_31_TO_0__q37 } ;
  assign result__h27063 =
	     { {32{ld_val2986_BITS_63_TO_32__q44[31]}},
	       ld_val2986_BITS_63_TO_32__q44 } ;
  assign result__h27102 = { 32'd0, ld_val__h22986[31:0] } ;
  assign result__h27130 = { 32'd0, ld_val__h22986[63:32] } ;
  assign rg_addr_8_EQ_rg_lrsc_pa_6___d151 = rg_addr == rg_lrsc_pa ;
  assign rg_amo_funct7_5_BITS_6_TO_2_6_EQ_0b10_7_AND_NO_ETC___d328 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) &&
	     rg_addr_8_EQ_rg_lrsc_pa_6___d151 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign rg_lrsc_pa_6_EQ_rg_addr_8___d97 = rg_lrsc_pa == rg_addr ;
  assign rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d134 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) ;
  assign rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d165 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__03_BIT_52_04_A_ETC___d154 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d163 ;
  assign rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d167 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 ;
  assign rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d170 =
	     rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d167 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13366 ;
  assign rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d311 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d324 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108) &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d163 =
	     rg_op == 2'd1 && rg_addr_8_EQ_rg_lrsc_pa_6___d151 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d162 ;
  assign rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d343 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d340 ||
	     NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d342 ;
  assign rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d477 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d474 ||
	     NOT_rg_op_2_EQ_1_0_59_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d476 ;
  assign rg_op_2_EQ_1_0_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d480 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_6_EQ_rg_addr_8___d97) ;
  assign rg_op_2_EQ_2_4_AND_rg_amo_funct7_5_BITS_6_TO_2_ETC___d514 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13366 &&
	     NOT_cfg_verbosity_read__9_ULE_1_0___d41 ;
  assign rg_st_amo_val_BITS_31_TO_0__q31 = rg_st_amo_val[31:0] ;
  assign rg_state_4_EQ_13_84_AND_rg_op_2_EQ_0_3_OR_rg_o_ETC___d586 =
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h19832 == 4'd0 ;
  assign rg_state_4_EQ_3_15_AND_NOT_rg_op_2_EQ_0_3_16_A_ETC___d124 =
	     rg_state == 5'd3 &&
	     (rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	      crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign shift_bits__h2584 = { f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64__h2734 = 8'b00000001 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2736 = 8'b00000011 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2738 = 8'b00001111 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign w15228_BITS_31_TO_0__q50 = w1__h25228[31:0] ;
  assign w1___1__h17197 =
	     { 32'd0,
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298[31:0] } ;
  assign w1___1__h25303 = { 32'd0, w1__h25228[31:0] } ;
  assign w2___1__h25304 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h25234 = (rg_f3 == 3'b010) ? w2___1__h25304 : rg_st_amo_val ;
  assign word64515_BITS_15_TO_0__q16 = word64__h5515[15:0] ;
  assign word64515_BITS_15_TO_8__q18 = word64__h5515[15:8] ;
  assign word64515_BITS_23_TO_16__q19 = word64__h5515[23:16] ;
  assign word64515_BITS_31_TO_0__q17 = word64__h5515[31:0] ;
  assign word64515_BITS_31_TO_16__q20 = word64__h5515[31:16] ;
  assign word64515_BITS_31_TO_24__q21 = word64__h5515[31:24] ;
  assign word64515_BITS_39_TO_32__q22 = word64__h5515[39:32] ;
  assign word64515_BITS_47_TO_32__q23 = word64__h5515[47:32] ;
  assign word64515_BITS_47_TO_40__q25 = word64__h5515[47:40] ;
  assign word64515_BITS_55_TO_48__q26 = word64__h5515[55:48] ;
  assign word64515_BITS_63_TO_32__q24 = word64__h5515[63:32] ;
  assign word64515_BITS_63_TO_48__q27 = word64__h5515[63:48] ;
  assign word64515_BITS_63_TO_56__q28 = word64__h5515[63:56] ;
  assign word64515_BITS_7_TO_0__q15 = word64__h5515[7:0] ;
  assign word64__h5515 = ram_word64_set$DOB & y__h5721 ;
  assign x__h13376 = { 63'd0, lrsc_result__h13366 } ;
  assign x__h25223 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h25244 :
	       _theResult_____2__h25240 ;
  assign y__h5721 =
	     {64{ram_state_and_ctag_cset$DOB[52] &&
		 ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108}} ;
  always@(f_fabric_write_reqs$D_OUT)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0: x__h2617 = 3'b0;
      2'b01: x__h2617 = 3'b001;
      2'b10: x__h2617 = 3'b010;
      2'b11: x__h2617 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h24780 = 3'b0;
      2'b01: value__h24780 = 3'b001;
      2'b10: value__h24780 = 3'b010;
      2'd3: value__h24780 = 3'b011;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or
	  strobe64__h2734 or strobe64__h2736 or strobe64__h2738)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0: mem_req_wr_data_wstrb__h2797 = strobe64__h2734;
      2'b01: mem_req_wr_data_wstrb__h2797 = strobe64__h2736;
      2'b10: mem_req_wr_data_wstrb__h2797 = strobe64__h2738;
      2'b11: mem_req_wr_data_wstrb__h2797 = 8'b11111111;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or _theResult___snd_fst__h2804)
  begin
    case (f_fabric_write_reqs$D_OUT[129:128])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h2796 = _theResult___snd_fst__h2804;
      2'd3: mem_req_wr_data_wdata__h2796 = f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(rg_addr or
	  result__h12077 or
	  result__h12105 or
	  result__h12133 or
	  result__h12161 or
	  result__h12189 or
	  result__h12217 or result__h12245 or result__h12273)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12077;
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12105;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12133;
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12161;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12189;
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12217;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12245;
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 =
	      result__h12273;
    endcase
  end
  always@(rg_addr or
	  result__h12318 or
	  result__h12346 or
	  result__h12374 or
	  result__h12402 or
	  result__h12430 or
	  result__h12458 or result__h12486 or result__h12514)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12318;
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12346;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12374;
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12402;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12430;
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12458;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12486;
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 =
	      result__h12514;
    endcase
  end
  always@(rg_addr or
	  result__h12559 or
	  result__h12587 or result__h12615 or result__h12643)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 =
	      result__h12559;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 =
	      result__h12587;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 =
	      result__h12615;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 =
	      result__h12643;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h12684 or
	  result__h12712 or result__h12740 or result__h12768)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 =
	      result__h12684;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 =
	      result__h12712;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 =
	      result__h12740;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 =
	      result__h12768;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12876 or result__h12904)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289 =
	      result__h12876;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289 =
	      result__h12904;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12809 or result__h12837)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2809_0x4_re_ETC__q29 =
	      result__h12809;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2809_0x4_re_ETC__q29 =
	      result__h12837;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2809_0x4_re_ETC__q29 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2809_0x4_re_ETC__q29 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238;
      3'b001:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268;
      3'b010:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2809_0x4_re_ETC__q29;
      3'b011:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291;
      3'b100:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255;
      3'b101:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277;
      3'b110:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289;
      3'd7: IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d298 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 or
	  w1___1__h17197 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289)
  begin
    case (rg_f3)
      3'b0:
	  w1__h17126 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238;
      3'b001:
	  w1__h17126 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268;
      3'b010: w1__h17126 = w1___1__h17197;
      3'b011:
	  w1__h17126 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291;
      3'b100:
	  w1__h17126 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255;
      3'b101:
	  w1__h17126 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277;
      3'b110:
	  w1__h17126 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289;
      3'd7: w1__h17126 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268 or
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC__q30 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d238;
      3'b001:
	  IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d268;
      3'b010:
	  IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 =
	      { {32{IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC__q30[31]}},
		IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC__q30 };
      3'b011:
	  IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d291;
      3'b100:
	  IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d255;
      3'b101:
	  IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d277;
      3'b110:
	  IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d289;
      3'd7: IF_rg_f3_05_EQ_0b10_78_THEN_SEXT_IF_rg_f3_05_E_ETC___d338 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h18237 or
	  new_st_val__h17229 or
	  w2__h25234 or
	  new_st_val__h18209 or
	  new_st_val__h18217 or
	  new_st_val__h18213 or
	  new_st_val__h18232 or new_st_val__h18221 or new_st_val__h18226)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h17134 = new_st_val__h17229;
      5'b00001: _theResult_____2__h17134 = w2__h25234;
      5'b00100: _theResult_____2__h17134 = new_st_val__h18209;
      5'b01000: _theResult_____2__h17134 = new_st_val__h18217;
      5'b01100: _theResult_____2__h17134 = new_st_val__h18213;
      5'b10000: _theResult_____2__h17134 = new_st_val__h18232;
      5'b11000: _theResult_____2__h17134 = new_st_val__h18221;
      5'b11100: _theResult_____2__h17134 = new_st_val__h18226;
      default: _theResult_____2__h17134 = new_st_val__h18237;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16856)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461 =
	      { ram_word64_set$DOB[63:16], new_st_val__h16856[15:0] };
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h16856[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h16856[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461 =
	      { new_st_val__h16856[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16856)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { ram_word64_set$DOB[63:8], new_st_val__h16856[7:0] };
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h16856[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h16856[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h16856[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h16856[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h16856[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h16856[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 =
	      { new_st_val__h16856[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d378;
      3'b001:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d387;
      3'b010:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32;
      3'b011:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396 =
	      rg_st_amo_val;
      default: IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h23515 or
	  result__h23542 or result__h23569 or result__h23596)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656 =
	      result__h23515;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656 =
	      result__h23542;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656 =
	      result__h23569;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656 =
	      result__h23596;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23636 or
	  result__h23663 or result__h23690 or result__h23717)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664 =
	      result__h23636;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664 =
	      result__h23663;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664 =
	      result__h23690;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664 =
	      result__h23717;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23282 or
	  result__h23309 or
	  result__h23336 or
	  result__h23363 or
	  result__h23390 or
	  result__h23417 or result__h23444 or result__h23471)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23282;
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23309;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23336;
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23363;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23390;
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23417;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23444;
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 =
	      result__h23471;
    endcase
  end
  always@(rg_addr or
	  result__h23046 or
	  result__h23076 or
	  result__h23103 or
	  result__h23130 or
	  result__h23157 or
	  result__h23184 or result__h23211 or result__h23238)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23046;
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23076;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23103;
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23130;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23157;
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23184;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23211;
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 =
	      result__h23238;
    endcase
  end
  always@(rg_addr or result__h23757 or result__h23784)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3757_0x4_re_ETC__q33 =
	      result__h23757;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3757_0x4_re_ETC__q33 =
	      result__h23784;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3757_0x4_re_ETC__q33 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h23822 or result__h23849)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3822_0x4_re_ETC__q34 =
	      result__h23822;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3822_0x4_re_ETC__q34 =
	      result__h23849;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3822_0x4_re_ETC__q34 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3757_0x4_re_ETC__q33 or
	  rg_addr or
	  master_xactor_f_rd_data$D_OUT or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3822_0x4_re_ETC__q34)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h22986 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d628;
      3'b001:
	  ld_val__h22986 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d656;
      3'b010:
	  ld_val__h22986 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3757_0x4_re_ETC__q33;
      3'b011:
	  ld_val__h22986 =
	      (rg_addr[2:0] == 3'h0) ?
		master_xactor_f_rd_data$D_OUT[66:3] :
		64'd0;
      3'b100:
	  ld_val__h22986 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d644;
      3'b101:
	  ld_val__h22986 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d664;
      3'b110:
	  ld_val__h22986 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3822_0x4_re_ETC__q34;
      3'd7: ld_val__h22986 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h27102 or result__h27130)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783 =
	      result__h27102;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783 =
	      result__h27130;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26785 or
	  result__h26813 or result__h26841 or result__h26869)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 =
	      result__h26785;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 =
	      result__h26813;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 =
	      result__h26841;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 =
	      result__h26869;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26910 or
	  result__h26938 or result__h26966 or result__h26994)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 =
	      result__h26910;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 =
	      result__h26938;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 =
	      result__h26966;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 =
	      result__h26994;
      default: IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26544 or
	  result__h26572 or
	  result__h26600 or
	  result__h26628 or
	  result__h26656 or
	  result__h26684 or result__h26712 or result__h26740)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26544;
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26572;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26600;
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26628;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26656;
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26684;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26712;
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 =
	      result__h26740;
    endcase
  end
  always@(rg_addr or
	  result__h25423 or
	  result__h26331 or
	  result__h26359 or
	  result__h26387 or
	  result__h26415 or
	  result__h26443 or result__h26471 or result__h26499)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h25423;
      3'h1:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h26331;
      3'h2:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h26359;
      3'h3:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h26387;
      3'h4:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h26415;
      3'h5:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h26443;
      3'h6:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h26471;
      3'h7:
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 =
	      result__h26499;
    endcase
  end
  always@(rg_addr or result__h27035 or result__h27063)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7035_0x4_re_ETC__q49 =
	      result__h27035;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7035_0x4_re_ETC__q49 =
	      result__h27063;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result7035_0x4_re_ETC__q49 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7035_0x4_re_ETC__q49 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783)
  begin
    case (rg_f3)
      3'b0:
	  w1__h25228 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737;
      3'b001:
	  w1__h25228 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765;
      3'b010:
	  w1__h25228 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result7035_0x4_re_ETC__q49;
      3'b011:
	  w1__h25228 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784;
      3'b100:
	  w1__h25228 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753;
      3'b101:
	  w1__h25228 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773;
      3'b110:
	  w1__h25228 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783;
      3'd7: w1__h25228 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 or
	  w1___1__h25303 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783)
  begin
    case (rg_f3)
      3'b0:
	  w1__h25232 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737;
      3'b001:
	  w1__h25232 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765;
      3'b010: w1__h25232 = w1___1__h25303;
      3'b011:
	  w1__h25232 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784;
      3'b100:
	  w1__h25232 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753;
      3'b101:
	  w1__h25232 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773;
      3'b110:
	  w1__h25232 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783;
      3'd7: w1__h25232 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765 or
	  w15228_BITS_31_TO_0__q50 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h25194 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d737;
      3'b001:
	  new_ld_val__h25194 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_SEX_ETC___d765;
      3'b010:
	  new_ld_val__h25194 =
	      { {32{w15228_BITS_31_TO_0__q50[31]}},
		w15228_BITS_31_TO_0__q50 };
      3'b011:
	  new_ld_val__h25194 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_IF__ETC___d784;
      3'b100:
	  new_ld_val__h25194 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d753;
      3'b101:
	  new_ld_val__h25194 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d773;
      3'b110:
	  new_ld_val__h25194 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_0_C_ETC___d783;
      3'd7: new_ld_val__h25194 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h27223 or
	  new_st_val__h25335 or
	  w2__h25234 or
	  new_st_val__h27195 or
	  new_st_val__h27203 or
	  new_st_val__h27199 or
	  new_st_val__h27218 or new_st_val__h27207 or new_st_val__h27212)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h25240 = new_st_val__h25335;
      5'b00001: _theResult_____2__h25240 = w2__h25234;
      5'b00100: _theResult_____2__h25240 = new_st_val__h27195;
      5'b01000: _theResult_____2__h25240 = new_st_val__h27203;
      5'b01100: _theResult_____2__h25240 = new_st_val__h27199;
      5'b10000: _theResult_____2__h25240 = new_st_val__h27218;
      5'b11000: _theResult_____2__h25240 = new_st_val__h27207;
      5'b11100: _theResult_____2__h25240 = new_st_val__h27212;
      default: _theResult_____2__h25240 = new_st_val__h27223;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_1_E_ETC___d306)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_rg_f3_0b0_IF_rg_addr_8_BITS_2_TO_0_30_EQ__ETC__q51 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_1_E_ETC___d306;
      3'd7: CASE_rg_f3_0b0_IF_rg_addr_8_BITS_2_TO_0_30_EQ__ETC__q51 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16856)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 =
	      { ram_word64_set$DOB[63:32], new_st_val__h16856[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 =
	      { new_st_val__h16856[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452 or
	  IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 or
	  new_st_val__h16856)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d452;
      3'b001:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470 =
	      IF_rg_addr_8_BITS_2_TO_0_30_EQ_0x0_07_THEN_ram_ETC___d461;
      3'b010:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52;
      3'b011:
	  IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470 =
	      new_st_val__h16856;
      default: IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (crg_sb_to_load_delay$EN)
	  crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      crg_sb_to_load_delay$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    crg_sb_to_load_delay = 11'h2AA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 6'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_op = 2'h2;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h3045 = $stime;
	  #0;
	end
    v__h3039 = v__h3045 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h3039);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", f_fabric_write_reqs$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", x__h2617);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", mem_req_wr_data_wdata__h2796);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", mem_req_wr_data_wstrb__h2797);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h3966 = $stime;
	  #0;
	end
    v__h3960 = v__h3966 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3960,
		   "D_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3960,
		   "I_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4067 = $stime;
	  #0;
	end
    v__h4061 = v__h4067 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4061, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4061, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h4520 = $stime;
	  #0;
	end
    v__h4514 = v__h4520 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4514,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4514,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:12],
		 rg_addr[11:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && dmem_not_imem &&
	  !soc_map$m_is_mem_addr &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d311)
	begin
	  v__h12989 = $stime;
	  #0;
	end
    v__h12983 = v__h12989 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d311)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12983,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h5515,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12983,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h5515,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00010 &&
	  ram_state_and_ctag_cset$DOB[52] &&
	  ram_state_and_ctag_cset_b_read__03_BITS_51_TO__ETC___d108 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("        AMO LR: reserving PA 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d311)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h5515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_2_EQ_0_3_OR_rg_op_2_EQ_2_4_AND_rg_amo_fu_ETC___d324)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7_5_BITS_6_TO_2_6_EQ_0b10_7_AND_NO_ETC___d328)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d487)
	$display("        ST: cancelling LR/SC reservation for PA", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  rg_lrsc_valid &&
	  !rg_lrsc_pa_6_EQ_rg_addr_8___d97 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  !rg_lrsc_valid &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d499)
	$display("        AMO SC result = %0d", lrsc_result__h13366);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d502)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d502)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d502)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d502)
	$write(" 0x%0x",
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d396);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d502)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  (rg_op == 2'd1 ||
	   rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_rg_op_2_EQ_2_4_17_OR_NOT_rg_amo_funct7_5_B_ETC___d504)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d510)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_2_EQ_0_3_16_AND_NOT_rg_op_2_EQ_2_4_1_ETC___d510)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_2_EQ_2_4_AND_rg_amo_funct7_5_BITS_6_TO_2_ETC___d514)
	begin
	  v__h16634 = $stime;
	  #0;
	end
    v__h16628 = v__h16634 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_2_EQ_2_4_AND_rg_amo_funct7_5_BITS_6_TO_2_ETC___d514)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16628,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16628,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_2_EQ_2_4_AND_rg_amo_funct7_5_BITS_6_TO_2_ETC___d514)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d520)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$display("          PA 0x%0h ", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h5515,
		 word64__h5515);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h5515,
		 word64__h5515,
		 new_st_val__h16856);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$write(" 0x%0x",
	       IF_rg_f3_05_EQ_0b0_06_THEN_IF_rg_addr_8_BITS_2_ETC___d470);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d523)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_47_OR_soc_map_m_is_mem_addr__ETC___d527)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h19878 = $stime;
	  #0;
	end
    v__h19872 = v__h19878 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h19872,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h19872,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", cline_fabric_addr__h19931);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	begin
	  v__h20682 = $stime;
	  #0;
	end
    v__h20676 = v__h20682 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20676,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20676,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h20923 = $stime;
	  #0;
	end
    v__h20917 = v__h20923 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20917,
		   "D_MMU_Cache",
		   access_exc_code__h2352);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20917,
		   "I_MMU_Cache",
		   access_exc_code__h2352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	   rg_error_during_refill) &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write(" 0x%0x", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__9_ULE_2_48___d549)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:6],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h22527 = $stime;
	  #0;
	end
    v__h22521 = v__h22527 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22521,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22521,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", value__h24780);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h22877 = $stime;
	  #0;
	end
    v__h22871 = v__h22877 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22871,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22871,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h23979 = $stime;
	  #0;
	end
    v__h23973 = v__h23979 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23973,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h22986);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23973,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h22986);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h24086 = $stime;
	  #0;
	end
    v__h24080 = v__h24086 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24080,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24080,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h24191 = $stime;
	  #0;
	end
    v__h24185 = v__h24191 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24185,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24185,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h24271 = $stime;
	  #0;
	end
    v__h24265 = v__h24271 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24265,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24265,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h24481 = $stime;
	  #0;
	end
    v__h24475 = v__h24481 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24475,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24475,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h24599 = $stime;
	  #0;
	end
    v__h24593 = v__h24599 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24593,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24593,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", value__h24780);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h24893 = $stime;
	  #0;
	end
    v__h24887 = v__h24893 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24887,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24887,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h25068 = $stime;
	  #0;
	end
    v__h25062 = v__h25068 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h25062,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h25062,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h27327 = $stime;
	  #0;
	end
    v__h27321 = v__h27327 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27321,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h25194);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27321,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h25194);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h25164 = $stime;
	  #0;
	end
    v__h25158 = v__h25164 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h25158,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h25158,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h27934 = $stime;
	  #0;
	end
    v__h27928 = v__h27934 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h27928,
		 "D_MMU_Cache",
		 $unsigned(b__h19832));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h27928,
		 "I_MMU_Cache",
		 $unsigned(b__h19832));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	begin
	  v__h27895 = $stime;
	  #0;
	end
    v__h27889 = v__h27895 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h27889,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h27889,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h3603 = $stime;
	  #0;
	end
    v__h3597 = v__h3603 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3597, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3597, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	begin
	  v__h28283 = $stime;
	  #0;
	end
    v__h28277 = v__h28283 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h28277, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h28277, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_69_EQ_0b0_70_OR_req_f3_BITS_ETC___d899 &&
	  NOT_cfg_verbosity_read__9_ULE_1_0___d41)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:3]);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

