//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1
// mem_master_wid                 O     4 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    64
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_awready,
//    mem_master_wready,
//    mem_master_arready,
//    EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wid
  output [3 : 0] mem_master_wid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion,
	       mem_master_wid;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [96 : 0] master_xactor_rg_rd_addr;
  reg [96 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [70 : 0] master_xactor_rg_rd_data;
  wire [70 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [96 : 0] master_xactor_rg_wr_addr;
  reg [96 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [76 : 0] master_xactor_rg_wr_data;
  reg [76 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [5 : 0] master_xactor_rg_wr_resp;
  wire [5 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [5 : 0] rg_cset_in_cache;
  wire [5 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [63 : 0] rg_lrsc_pa;
  wire [63 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  reg [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_pte_writebacks
  wire [127 : 0] f_pte_writebacks$D_IN, f_pte_writebacks$D_OUT;
  wire f_pte_writebacks$CLR,
       f_pte_writebacks$DEQ,
       f_pte_writebacks$EMPTY_N,
       f_pte_writebacks$ENQ,
       f_pte_writebacks$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [52 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [5 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // ports of submodule tlb
  reg [1 : 0] tlb$insert_level;
  wire [130 : 0] tlb$lookup;
  wire [63 : 0] tlb$insert_pte, tlb$insert_pte_pa;
  wire [26 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [15 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_ptw_level_2,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_RL_rl_writeback_updated_PTE,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_ptw_level_2,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_RL_rl_writeback_updated_PTE,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [96 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_4,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_5,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_6,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_4;
  wire [76 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2,
		MUX_master_xactor_rg_wr_data$write_1__VAL_3,
		MUX_master_xactor_rg_wr_data$write_1__VAL_4;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [52 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [4 : 0] MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_14,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_5;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_6;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_1,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_2,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_3,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_2__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_exc_code$write_1__SEL_8,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_18,
       MUX_rg_state$write_1__SEL_2,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3,
       MUX_tlb$insert_1__SEL_4;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h4794;
  reg [31 : 0] v__h4895;
  reg [31 : 0] v__h30787;
  reg [31 : 0] v__h31685;
  reg [31 : 0] v__h4423;
  reg [31 : 0] v__h23935;
  reg [31 : 0] v__h23692;
  reg [31 : 0] v__h24246;
  reg [31 : 0] v__h24358;
  reg [31 : 0] v__h23864;
  reg [31 : 0] v__h24992;
  reg [31 : 0] v__h24752;
  reg [31 : 0] v__h25415;
  reg [31 : 0] v__h25303;
  reg [31 : 0] v__h24921;
  reg [31 : 0] v__h25887;
  reg [31 : 0] v__h25958;
  reg [31 : 0] v__h26040;
  reg [31 : 0] v__h25816;
  reg [31 : 0] v__h26950;
  reg [31 : 0] v__h5044;
  reg [31 : 0] v__h14792;
  reg [31 : 0] v__h18954;
  reg [31 : 0] v__h18379;
  reg [31 : 0] v__h22336;
  reg [31 : 0] v__h27287;
  reg [31 : 0] v__h27509;
  reg [31 : 0] v__h29101;
  reg [31 : 0] v__h29475;
  reg [31 : 0] v__h30575;
  reg [31 : 0] v__h30682;
  reg [31 : 0] v__h30867;
  reg [31 : 0] v__h31389;
  reg [31 : 0] v__h31803;
  reg [31 : 0] v__h3766;
  reg [31 : 0] v__h32121;
  reg [31 : 0] v__h32296;
  reg [31 : 0] v__h34909;
  reg [31 : 0] v__h35161;
  reg [31 : 0] v__h32392;
  reg [31 : 0] v__h22972;
  reg [31 : 0] v__h36131;
  reg [31 : 0] v__h26167;
  reg [31 : 0] v__h37285;
  reg [31 : 0] v__h35781;
  reg [31 : 0] v__h35742;
  reg [31 : 0] v__h3760;
  reg [31 : 0] v__h4417;
  reg [31 : 0] v__h4788;
  reg [31 : 0] v__h4889;
  reg [31 : 0] v__h5038;
  reg [31 : 0] v__h14786;
  reg [31 : 0] v__h18373;
  reg [31 : 0] v__h18948;
  reg [31 : 0] v__h22330;
  reg [31 : 0] v__h22966;
  reg [31 : 0] v__h23686;
  reg [31 : 0] v__h23858;
  reg [31 : 0] v__h23929;
  reg [31 : 0] v__h24240;
  reg [31 : 0] v__h24352;
  reg [31 : 0] v__h24746;
  reg [31 : 0] v__h24915;
  reg [31 : 0] v__h24986;
  reg [31 : 0] v__h25297;
  reg [31 : 0] v__h25409;
  reg [31 : 0] v__h25810;
  reg [31 : 0] v__h25881;
  reg [31 : 0] v__h25952;
  reg [31 : 0] v__h26034;
  reg [31 : 0] v__h26161;
  reg [31 : 0] v__h26944;
  reg [31 : 0] v__h27281;
  reg [31 : 0] v__h27503;
  reg [31 : 0] v__h29095;
  reg [31 : 0] v__h29469;
  reg [31 : 0] v__h30569;
  reg [31 : 0] v__h30676;
  reg [31 : 0] v__h30781;
  reg [31 : 0] v__h30861;
  reg [31 : 0] v__h31383;
  reg [31 : 0] v__h31679;
  reg [31 : 0] v__h31797;
  reg [31 : 0] v__h32115;
  reg [31 : 0] v__h32290;
  reg [31 : 0] v__h32386;
  reg [31 : 0] v__h34903;
  reg [31 : 0] v__h35155;
  reg [31 : 0] v__h35736;
  reg [31 : 0] v__h35775;
  reg [31 : 0] v__h36125;
  reg [31 : 0] v__h37279;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result0355_0x4_re_ETC__q34,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result0420_0x4_re_ETC__q35,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result4511_0x4_re_ETC__q50,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result4613_0x4_re_ETC__q30,
	       CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q33,
	       CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q52,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509,
	       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537,
	       IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683,
	       IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748,
	       IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623,
	       _theResult_____2__h19483,
	       _theResult_____2__h32716,
	       _theResult___fst__h6475,
	       ld_val__h29584,
	       mem_req_wr_data_wdata__h18755,
	       mem_req_wr_data_wdata__h22137,
	       mem_req_wr_data_wdata__h31190,
	       mem_req_wr_data_wdata__h32694,
	       new_ld_val__h32422,
	       new_value__h17470,
	       new_value__h7500,
	       w1__h19475,
	       w1__h32704,
	       w1__h32708;
  reg [7 : 0] mem_req_wr_data_wstrb__h18756, mem_req_wr_data_wstrb__h32695;
  reg [2 : 0] value__h32007, value__h35033;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29,
      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d282,
      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d287,
      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d200,
      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d208,
      IF_rg_f3_78_BITS_1_TO_0_35_EQ_0b0_36_OR_rg_f3__ETC___d242,
      IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222,
      IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d294;
  wire [63 : 0] IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_1_E_ETC___d570,
		IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291,
		IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556,
		IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687,
		IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d770,
		_theResult___fst__h18687,
		_theResult___fst__h22069,
		_theResult___fst__h31122,
		_theResult___fst__h32626,
		_theResult___fst__h6061,
		_theResult___fst__h6132,
		_theResult___snd_fst__h6063,
		_theResult___snd_fst__h6134,
		_theResult___snd_fst__h6704,
		cline_addr__h27002,
		cline_fabric_addr__h27003,
		lev_0_pte_pa__h25024,
		lev_0_pte_pa_w64_fa__h25026,
		lev_1_PTN_pa__h23965,
		lev_1_pte_pa__h23967,
		lev_1_pte_pa_w64_fa__h23969,
		lev_2_pte_pa__h23025,
		lev_2_pte_pa_w64_fa__h23027,
		new_st_val__h19205,
		new_st_val__h19487,
		new_st_val__h19578,
		new_st_val__h20558,
		new_st_val__h20562,
		new_st_val__h20566,
		new_st_val__h20570,
		new_st_val__h20575,
		new_st_val__h20581,
		new_st_val__h20586,
		new_st_val__h32720,
		new_st_val__h32811,
		new_st_val__h34671,
		new_st_val__h34675,
		new_st_val__h34679,
		new_st_val__h34683,
		new_st_val__h34688,
		new_st_val__h34694,
		new_st_val__h34699,
		pa___1__h6481,
		pa___1__h6530,
		pa___1__h6599,
		pte___1__h6753,
		pte___1__h6781,
		pte___2__h6473,
		result__h13909,
		result__h13937,
		result__h13965,
		result__h13993,
		result__h14021,
		result__h14049,
		result__h14077,
		result__h14122,
		result__h14150,
		result__h14178,
		result__h14206,
		result__h14234,
		result__h14262,
		result__h14290,
		result__h14318,
		result__h14363,
		result__h14391,
		result__h14419,
		result__h14447,
		result__h14488,
		result__h14516,
		result__h14544,
		result__h14572,
		result__h14613,
		result__h14641,
		result__h14680,
		result__h14708,
		result__h29644,
		result__h29674,
		result__h29701,
		result__h29728,
		result__h29755,
		result__h29782,
		result__h29809,
		result__h29836,
		result__h29880,
		result__h29907,
		result__h29934,
		result__h29961,
		result__h29988,
		result__h30015,
		result__h30042,
		result__h30069,
		result__h30113,
		result__h30140,
		result__h30167,
		result__h30194,
		result__h30234,
		result__h30261,
		result__h30288,
		result__h30315,
		result__h30355,
		result__h30382,
		result__h30420,
		result__h30447,
		result__h32899,
		result__h33807,
		result__h33835,
		result__h33863,
		result__h33891,
		result__h33919,
		result__h33947,
		result__h33975,
		result__h34020,
		result__h34048,
		result__h34076,
		result__h34104,
		result__h34132,
		result__h34160,
		result__h34188,
		result__h34216,
		result__h34261,
		result__h34289,
		result__h34317,
		result__h34345,
		result__h34386,
		result__h34414,
		result__h34442,
		result__h34470,
		result__h34511,
		result__h34539,
		result__h34578,
		result__h34606,
		result__h7553,
		satp_pa__h2469,
		st_val__h32434,
		value__h6798,
		vpn_0_pa__h25023,
		vpn_1_pa__h23966,
		vpn_2_pa__h23024,
		w1___1__h19546,
		w1___1__h32779,
		w2___1__h32780,
		w2__h32710,
		word64__h7319,
		x1_avValue_pa__h5972,
		x__h15179,
		y__h7589;
  wire [55 : 0] x__h24070, x__h5164, x__h6484, x__h6533, x__h6602;
  wire [31 : 0] ld_val9584_BITS_31_TO_0__q38,
		ld_val9584_BITS_63_TO_32__q45,
		master_xactor_rg_rd_data_BITS_34_TO_3__q3,
		master_xactor_rg_rd_data_BITS_66_TO_35__q10,
		new_value500_BITS_31_TO_0__q31,
		rg_st_amo_val_BITS_31_TO_0__q32,
		w12704_BITS_31_TO_0__q51,
		word64319_BITS_31_TO_0__q17,
		word64319_BITS_63_TO_32__q24;
  wire [15 : 0] ld_val9584_BITS_15_TO_0__q37,
		ld_val9584_BITS_31_TO_16__q41,
		ld_val9584_BITS_47_TO_32__q44,
		ld_val9584_BITS_63_TO_48__q48,
		master_xactor_rg_rd_data_BITS_18_TO_3__q2,
		master_xactor_rg_rd_data_BITS_34_TO_19__q6,
		master_xactor_rg_rd_data_BITS_50_TO_35__q9,
		master_xactor_rg_rd_data_BITS_66_TO_51__q13,
		word64319_BITS_15_TO_0__q16,
		word64319_BITS_31_TO_16__q20,
		word64319_BITS_47_TO_32__q23,
		word64319_BITS_63_TO_48__q27;
  wire [7 : 0] ld_val9584_BITS_15_TO_8__q39,
	       ld_val9584_BITS_23_TO_16__q40,
	       ld_val9584_BITS_31_TO_24__q42,
	       ld_val9584_BITS_39_TO_32__q43,
	       ld_val9584_BITS_47_TO_40__q46,
	       ld_val9584_BITS_55_TO_48__q47,
	       ld_val9584_BITS_63_TO_56__q49,
	       ld_val9584_BITS_7_TO_0__q36,
	       master_xactor_rg_rd_data_BITS_10_TO_3__q1,
	       master_xactor_rg_rd_data_BITS_18_TO_11__q4,
	       master_xactor_rg_rd_data_BITS_26_TO_19__q5,
	       master_xactor_rg_rd_data_BITS_34_TO_27__q7,
	       master_xactor_rg_rd_data_BITS_42_TO_35__q8,
	       master_xactor_rg_rd_data_BITS_50_TO_43__q11,
	       master_xactor_rg_rd_data_BITS_58_TO_51__q12,
	       master_xactor_rg_rd_data_BITS_66_TO_59__q14,
	       strobe64__h18686,
	       strobe64__h18689,
	       strobe64__h18692,
	       strobe64__h32625,
	       strobe64__h32628,
	       strobe64__h32631,
	       word64319_BITS_15_TO_8__q18,
	       word64319_BITS_23_TO_16__q19,
	       word64319_BITS_31_TO_24__q21,
	       word64319_BITS_39_TO_32__q22,
	       word64319_BITS_47_TO_40__q25,
	       word64319_BITS_55_TO_48__q26,
	       word64319_BITS_63_TO_56__q28,
	       word64319_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h18551, shift_bits__h32490;
  wire [4 : 0] IF_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_ETC___d392,
	       IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d391,
	       IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d394;
  wire [3 : 0] access_exc_code__h3212,
	       b__h22926,
	       exc_code___1__h6373,
	       x1_avValue_exc_code__h5973;
  wire IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d290,
       IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_NOT_ETC___d214,
       IF_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_ETC___d302,
       IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d301,
       IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428,
       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d281,
       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d286,
       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d289,
       NOT_cfg_verbosity_read__8_ULE_2_043___d1044,
       NOT_cfg_verbosity_read__8_ULT_2_98___d399,
       NOT_dmem_not_imem_8_AND_rg_op_3_EQ_0_4_OR_rg_o_ETC___d334,
       NOT_dmem_not_imem_8_OR_NOT_rg_op_3_EQ_0_4_5_AN_ETC___d105,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d617,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d630,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d781,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d799,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d838,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d843,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d849,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d857,
       NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d861,
       NOT_master_xactor_rg_rd_data_80_BITS_2_TO_1_81_ETC___d904,
       NOT_master_xactor_rg_rd_data_80_BITS_2_TO_1_81_ETC___d967,
       NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d911,
       NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d973,
       NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196,
       NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d430,
       NOT_req_f3_BITS_1_TO_0_381_EQ_0b0_382_383_AND__ETC___d1402,
       NOT_rg_f3_78_EQ_0b11_15_16_OR_rg_amo_funct7_8__ETC___d291,
       NOT_rg_op_3_EQ_0_4_5_AND_NOT_rg_op_3_EQ_2_6_7__ETC___d385,
       NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d439,
       NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d627,
       NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d836,
       NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d841,
       NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d847,
       NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d855,
       NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d625,
       NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d802,
       NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d808,
       NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d814,
       NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d820,
       NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d341,
       NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d364,
       NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d402,
       NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d576,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d139,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d304,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d346,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d361,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d413,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d414,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d421,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d424,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d445,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d451,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d452,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d579,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d584,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d597,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d603,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d609,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d619,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d632,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d754,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d783,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d789,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d795,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d801,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d806,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d812,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d818,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d824,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d825,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d832,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d833,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d840,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d851,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d859,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d863,
       NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d120,
       NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d136,
       cfg_verbosity_read__8_ULE_1___d19,
       dmem_not_imem_AND_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_ETC___d336,
       dmem_not_imem_OR_NOT_rg_op_3_EQ_0_4_5_AND_NOT__ETC___d97,
       lrsc_result__h15169,
       master_xactor_crg_rd_data_full_port1__read__79_ETC___d1214,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d1024,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d946,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d954,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d958,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d989,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d993,
       master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d999,
       ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175,
       ram_state_and_ctag_cset_b_read__70_BIT_52_71_A_ETC___d431,
       req_f3_BITS_1_TO_0_381_EQ_0b0_382_OR_req_f3_BI_ETC___d1411,
       rg_amo_funct7_8_BITS_6_TO_2_9_EQ_0b10_0_AND_NO_ETC___d606,
       rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231,
       rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d380,
       rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d417,
       rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d442,
       rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d446,
       rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d581,
       rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d600,
       rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d440,
       rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d628,
       rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d750,
       rg_op_3_EQ_2_6_AND_rg_amo_funct7_8_BITS_6_TO_2_ETC___d245,
       rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d114,
       rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d127,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d123,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d306,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d349,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d388,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d389,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d407,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d410,
       rg_priv_6_ULE_0b1___d57,
       tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d103,
       tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d343,
       y__h6299;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h29584 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h32422 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h29584;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = new_ld_val__h32422;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 5'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_rg_wr_addr[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_rg_wr_addr[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_rg_wr_addr[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_rg_wr_addr[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_rg_wr_addr[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_rg_wr_addr[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_rg_wr_addr[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_rg_wr_addr[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wid
  assign mem_master_wid = master_xactor_rg_wr_data[76:73] ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_rg_wr_data[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_rg_rd_addr[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_rg_rd_addr[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_rg_rd_addr[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_rg_rd_addr[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_rg_rd_addr[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_rg_rd_addr[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_rg_rd_addr[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_rg_rd_addr[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // submodule f_pte_writebacks
  FIFO2 #(.width(32'd128), .guarded(32'd1)) f_pte_writebacks(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_pte_writebacks$D_IN),
							     .ENQ(f_pte_writebacks$ENQ),
							     .DEQ(f_pte_writebacks$DEQ),
							     .CLR(f_pte_writebacks$CLR),
							     .D_OUT(f_pte_writebacks$D_OUT),
							     .FULL_N(f_pte_writebacks$FULL_N),
							     .EMPTY_N(f_pte_writebacks$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd53),
	  .MEMSIZE(7'd64)) ram_state_and_ctag_cset(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(ram_state_and_ctag_cset$ADDRA),
						   .ADDRB(ram_state_and_ctag_cset$ADDRB),
						   .DIA(ram_state_and_ctag_cset$DIA),
						   .DIB(ram_state_and_ctag_cset$DIB),
						   .WEA(ram_state_and_ctag_cset$WEA),
						   .WEB(ram_state_and_ctag_cset$WEB),
						   .ENA(ram_state_and_ctag_cset$ENA),
						   .ENB(ram_state_and_ctag_cset$ENB),
						   .DOA(),
						   .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 6'd63 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 5'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 5'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 5'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 5'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_2
  assign CAN_FIRE_RL_rl_ptw_level_2 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     NOT_master_xactor_rg_rd_data_80_BITS_2_TO_1_81_ETC___d904 &&
	     rg_state == 5'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_2 =
	     CAN_FIRE_RL_rl_ptw_level_2 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     NOT_master_xactor_rg_rd_data_80_BITS_2_TO_1_81_ETC___d967 &&
	     rg_state == 5'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      !master_xactor_rg_rd_data[3] ||
	      !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5] ||
	      !master_xactor_rg_rd_data[6] && !master_xactor_rg_rd_data[4] ||
	      tlb$RDY_insert) &&
	     rg_state == 5'd8 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_rl_ptw_level_2 &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__8_ULE_1___d19 || tlb$RDY_lookup) &&
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup) &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d306 &&
	     rg_state == 5'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 5'd14 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 5'd13 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd13 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_rl_writeback_updated_PTE =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     f_pte_writebacks$EMPTY_N ;
  assign WILL_FIRE_RL_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_rl_writeback_updated_PTE &&
	     !WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_rl_io_write_req &&
	     !WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_crg_rd_data_full_port1__read__79_ETC___d1214 &&
	     rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd5 &&
	     b__h22926 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd9 &&
	     b__h22926 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h22926 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d452 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_381_EQ_0b0_382_OR_req_f3_BI_ETC___d1411 ;
  assign MUX_ram_word64_set$a_put_2__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_381_EQ_0b0_382_383_AND__ETC___d1402 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d123 ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[3] ||
	      !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5] ||
	      !master_xactor_rg_rd_data[6] && !master_xactor_rg_rd_data[4] ||
	      master_xactor_rg_rd_data[2:1] != 2'b0) ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d973 ;
  assign MUX_rg_exc_code$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d911 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d619 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d445 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d389 ;
  assign MUX_rg_state$write_1__SEL_18 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d954 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d989 ;
  assign MUX_tlb$insert_1__SEL_4 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h7500 :
	       new_value__h17470 ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { 4'd0, lev_1_pte_pa_w64_fa__h23969, 29'd851968 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { 4'd0, lev_0_pte_pa_w64_fa__h25026, 29'd851968 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 =
	     { 4'd0, rg_pa, 8'd0, value__h32007, 18'd65536 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_4 =
	     { 4'd0, lev_2_pte_pa_w64_fa__h23027, 29'd851968 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_5 =
	     { 4'd0, cline_addr__h27002, 29'd851968 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_6 =
	     { 4'd0, cline_fabric_addr__h27003, 29'd851968 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { 4'd0, rg_pa, 8'd0, value__h35033, 18'd65536 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { 4'd0, x1_avValue_pa__h5972, 8'd0, value__h35033, 18'd65536 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_4 =
	     { 4'd0, f_pte_writebacks$D_OUT[127:64], 29'd851968 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { 4'd0,
	       mem_req_wr_data_wdata__h32694,
	       mem_req_wr_data_wstrb__h32695,
	       1'd1 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { 4'd0,
	       IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d770,
	       mem_req_wr_data_wstrb__h18756,
	       1'd1 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_3 =
	     { 4'd0, f_pte_writebacks$D_OUT[63:0], 9'd511 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_4 =
	     { 4'd0,
	       mem_req_wr_data_wdata__h31190,
	       mem_req_wr_data_wstrb__h32695,
	       1'd1 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683 :
	       IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 6'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_6 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ?
	       exc_code___1__h6373 :
	       access_exc_code__h3212 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h15179 :
	       IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     NOT_req_f3_BITS_1_TO_0_381_EQ_0b0_382_383_AND__ETC___d1402 ?
	       5'd4 :
	       5'd3 ;
  assign MUX_rg_state$write_1__VAL_5 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ? 5'd15 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130]) ?
	       5'd5 :
	       IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d394 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ?
	       ((!master_xactor_rg_rd_data[3] ||
		 !master_xactor_rg_rd_data[4] &&
		 master_xactor_rg_rd_data[5] ||
		 !master_xactor_rg_rd_data[6] &&
		 !master_xactor_rg_rd_data[4]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ?
	       ((!master_xactor_rg_rd_data[3] ||
		 !master_xactor_rg_rd_data[4] &&
		 master_xactor_rg_rd_data[5]) ?
		  5'd4 :
		  ((!master_xactor_rg_rd_data[6] &&
		    !master_xactor_rg_rd_data[4]) ?
		     5'd8 :
		     ((master_xactor_rg_rd_data[21:13] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_14 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ?
	       ((!master_xactor_rg_rd_data[3] ||
		 !master_xactor_rg_rd_data[4] &&
		 master_xactor_rg_rd_data[5]) ?
		  5'd4 :
		  ((!master_xactor_rg_rd_data[6] &&
		    !master_xactor_rg_rd_data[4]) ?
		     5'd7 :
		     ((master_xactor_rg_rd_data[30:22] != 9'd0 ||
		       master_xactor_rg_rd_data[21:13] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_read_rsp ||
	      WILL_FIRE_RL_rl_io_AMO_read_rsp) &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d452 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755 ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755 ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     (WILL_FIRE_RL_rl_ptw_level_1 || WILL_FIRE_RL_rl_ptw_level_2) &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755 ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ;
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_3:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h22926 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h22926 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_3 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_3:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_4;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_5;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_6;
      default: master_xactor_rg_rd_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_writeback_updated_PTE or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      WILL_FIRE_RL_rl_writeback_updated_PTE:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_4;
      default: master_xactor_rg_wr_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755 ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ;

  // register master_xactor_rg_wr_data
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_writeback_updated_PTE or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_2;
      WILL_FIRE_RL_rl_writeback_updated_PTE:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_3;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_4;
      default: master_xactor_rg_wr_data$D_IN =
		   77'h0AAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755 ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN =
	     { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3212 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  x1_avValue_exc_code__h5973 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__VAL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or MUX_rg_exc_code$write_1__SEL_8)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3212;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5973;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_6;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_6;
    MUX_rg_exc_code$write_1__SEL_8:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_6;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d123 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_381_EQ_0b0_382_383_AND__ETC___d1402 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d911 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d973 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[3] ||
	      !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5] ||
	      !master_xactor_rg_rd_data[6] && !master_xactor_rg_rd_data[4] ||
	      master_xactor_rg_rd_data[2:1] != 2'b0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h32422 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h29584 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  rg_ld_val$D_IN = new_ld_val__h32422;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h29584;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d619 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = soc_map$m_is_mem_addr_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d446 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d445 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : soc_map$m_is_mem_addr_addr ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d414 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  lev_1_pte_pa__h23967 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  lev_0_pte_pa__h25024 or
	  WILL_FIRE_RL_rl_start_tlb_refill or lev_2_pte_pa__h23025)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  rg_pte_pa$D_IN = lev_1_pte_pa__h23967;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  rg_pte_pa$D_IN = lev_0_pte_pa__h25024;
      WILL_FIRE_RL_rl_start_tlb_refill: rg_pte_pa$D_IN = lev_2_pte_pa__h23025;
      default: rg_pte_pa$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd56;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h19205 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d863 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__VAL_10 or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_12 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_ptw_level_2 or
	  MUX_rg_state$write_1__VAL_14 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_18)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 5'd2;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 5'd10;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 5'd6;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 5'd16;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 5'd14;
    MUX_rg_state$write_1__SEL_10:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_ptw_level_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_14;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_rl_io_AMO_SC_req: rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 5'd3;
    MUX_rg_state$write_1__SEL_18: rg_state$D_IN = 5'd2;
    default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d389 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_pte_writebacks
  assign f_pte_writebacks$D_IN = { tlb$lookup[63:0], value__h6798 } ;
  assign f_pte_writebacks$ENQ = MUX_tlb$insert_1__SEL_1 ;
  assign f_pte_writebacks$DEQ = WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign f_pte_writebacks$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       rg_addr[11:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       53'h0AAAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       53'h0AAAAAAAAAAAAA /* unspecified value */  :
	       53'h0AAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_381_EQ_0b0_382_OR_req_f3_BI_ETC___d1411 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_2__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_2__SEL_1 ?
	       master_xactor_rg_rd_data[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d632 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_381_EQ_0b0_382_OR_req_f3_BI_ETC___d1411 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr =
	     (rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8) ?
	       _theResult___fst__h6061 :
	       rg_addr ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[59:44] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  tlb$lookup or
	  MUX_tlb$insert_1__SEL_2 or
	  MUX_tlb$insert_1__SEL_3 or MUX_tlb$insert_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = tlb$lookup[65:64];
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd2;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_4: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte =
	     (MUX_tlb$insert_1__SEL_2 || MUX_tlb$insert_1__SEL_3 ||
	      MUX_tlb$insert_1__SEL_4) ?
	       master_xactor_rg_rd_data[66:3] :
	       value__h6798 ;
  assign tlb$insert_pte_pa =
	     MUX_tlb$insert_1__SEL_1 ? tlb$lookup[63:0] : rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[38:12] ;
  assign tlb$lookup_asid = rg_satp[59:44] ;
  assign tlb$lookup_vpn = rg_addr[38:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d954 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d989 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d290 =
	     (x1_avValue_pa__h5972[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29 :
	       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d289 ;
  assign IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_1_E_ETC___d570 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h29584 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_NOT_ETC___d214 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196 ;
  assign IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556 =
	     (rg_addr[2:0] == 3'h0) ? word64__h7319 : 64'd0 ;
  assign IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q32[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q32 } :
	       rg_st_amo_val ;
  assign IF_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_ETC___d302 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 ||
	       IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222 :
	       IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d301 ;
  assign IF_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_ETC___d392 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       5'd9 :
	       IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d391 ;
  assign IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d301 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_3_EQ_2_6_AND_rg_amo_funct7_8_BITS_6_TO_2_ETC___d245 :
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read &&
	       IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d294 &&
	       IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222 &&
	       IF_rg_f3_78_BITS_1_TO_0_35_EQ_0b0_36_OR_rg_f3__ETC___d242 ;
  assign IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d391 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       5'd12 :
	       ((!ram_state_and_ctag_cset$DOB[52] ||
		 !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) ?
		  5'd9 :
		  5'd12) ;
  assign IF_rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_am_ETC___d770 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h18755 :
	       mem_req_wr_data_wdata__h22137 ;
  assign IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d394 =
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d123 ?
	       5'd4 :
	       ((dmem_not_imem && !soc_map$m_is_mem_addr) ?
		  5'd13 :
		  IF_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_ETC___d392) ;
  assign IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428 =
	     x1_avValue_pa__h5972 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d281 =
	     x1_avValue_pa__h5972[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29 ;
  assign NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d286 =
	     x1_avValue_pa__h5972[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29 ;
  assign NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d289 =
	     x1_avValue_pa__h5972[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29 ;
  assign NOT_cfg_verbosity_read__8_ULE_2_043___d1044 = cfg_verbosity > 4'd2 ;
  assign NOT_cfg_verbosity_read__8_ULT_2_98___d399 = cfg_verbosity >= 4'd2 ;
  assign NOT_dmem_not_imem_8_AND_rg_op_3_EQ_0_4_OR_rg_o_ETC___d334 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[69] ;
  assign NOT_dmem_not_imem_8_OR_NOT_rg_op_3_EQ_0_4_5_AN_ETC___d105 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d103 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d617 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[52] &&
	      ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d630 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d628 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d781 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d799 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d838 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d836 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d843 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d841 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d849 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d847 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d857 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d855 ;
  assign NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d861 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d627 ;
  assign NOT_master_xactor_rg_rd_data_80_BITS_2_TO_1_81_ETC___d904 =
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     !master_xactor_rg_rd_data[3] ||
	     !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5] ||
	     ((!master_xactor_rg_rd_data[6] && !master_xactor_rg_rd_data[4]) ?
		!master_xactor_crg_rd_addr_full$port2__read :
		master_xactor_rg_rd_data[30:22] != 9'd0 ||
		master_xactor_rg_rd_data[21:13] != 9'd0 ||
		tlb$RDY_insert) ;
  assign NOT_master_xactor_rg_rd_data_80_BITS_2_TO_1_81_ETC___d967 =
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     !master_xactor_rg_rd_data[3] ||
	     !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5] ||
	     ((!master_xactor_rg_rd_data[6] && !master_xactor_rg_rd_data[4]) ?
		!master_xactor_crg_rd_addr_full$port2__read :
		master_xactor_rg_rd_data[21:13] != 9'd0 || tlb$RDY_insert) ;
  assign NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d911 =
	     !master_xactor_rg_rd_data[3] ||
	     !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5] ||
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     (master_xactor_rg_rd_data[30:22] != 9'd0 ||
	      master_xactor_rg_rd_data[21:13] != 9'd0) ||
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign NOT_master_xactor_rg_rd_data_80_BIT_3_84_85_OR_ETC___d973 =
	     !master_xactor_rg_rd_data[3] ||
	     !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5] ||
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     master_xactor_rg_rd_data[21:13] != 9'd0 ||
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196 =
	     !ram_state_and_ctag_cset$DOB[52] || !rg_priv_6_ULE_0b1___d57 ||
	     rg_satp[63:60] != 4'd8 ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d430 =
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428 ;
  assign NOT_req_f3_BITS_1_TO_0_381_EQ_0b0_382_383_AND__ETC___d1402 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_78_EQ_0b11_15_16_OR_rg_amo_funct7_8__ETC___d291 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29 ;
  assign NOT_rg_op_3_EQ_0_4_5_AND_NOT_rg_op_3_EQ_2_6_7__ETC___d385 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231) ;
  assign NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d439 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428 ;
  assign NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d627 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 ;
  assign NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d836 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d841 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d847 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d855 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d625 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 ;
  assign NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d802 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d808 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d814 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231) &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d820 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d341 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_8_AND_rg_op_3_EQ_0_4_OR_rg_o_ETC___d334 ||
	      dmem_not_imem_AND_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_ETC___d336 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[68]) ;
  assign NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d364 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[68] ;
  assign NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d402 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     tlb$lookup[72] &&
	     !pte___2__h6473[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d576 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[69] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d103) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d139 =
	     !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d127 ||
	     NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d136 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d304 =
	     (NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d139 ||
	      tlb$RDY_insert && tlb$RDY_lookup && f_pte_writebacks$FULL_N) &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      IF_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_ETC___d302) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d346 =
	     !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	     tlb$lookup[130] &&
	     NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d341 &&
	     tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d343 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d361 =
	     !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d127 ||
	     NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d136 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d413 =
	     !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d341 &&
	     tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d343 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d414 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d413 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d421 =
	     !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d417 &&
	     tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d343 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d424 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d421 &&
	     dmem_not_imem &&
	     !soc_map$m_is_mem_addr &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d445 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d413 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d442 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d451 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d413 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d446 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h15169) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d452 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d451 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d579 =
	     !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d576 &&
	     tlb$lookup[72] ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d584 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d579 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d581 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d579 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d597 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d579 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d603 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d579 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d600 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d609 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d579 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_8_BITS_6_TO_2_9_EQ_0b10_0_AND_NO_ETC___d606 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 =
	     !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d364 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d619 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d617 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d632 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d630 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d754 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d750 ||
	      NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d627) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d755 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d754 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d783 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d781 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d789 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d795 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d801 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d799 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d806 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d802 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d806 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d812 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d808 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d818 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d814 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d818 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d824 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d820 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d825 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d824 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d832 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h15169 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d833 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d832 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d840 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d838 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d843 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d851 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d849 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d859 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d857 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d863 =
	     (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d613 &&
	     NOT_dmem_not_imem_8_OR_soc_map_m_is_mem_addr_I_ETC___d861 ;
  assign NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d120 =
	     !tlb$lookup[72] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[73] ;
  assign NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d136 =
	     !tlb$lookup[72] || !tlb$lookup[73] || pte___2__h6473[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign _theResult___fst__h18687 = rg_st_amo_val << shift_bits__h18551 ;
  assign _theResult___fst__h22069 = new_st_val__h19205 << shift_bits__h18551 ;
  assign _theResult___fst__h31122 = rg_st_amo_val << shift_bits__h32490 ;
  assign _theResult___fst__h32626 = st_val__h32434 << shift_bits__h32490 ;
  assign _theResult___fst__h6061 =
	     tlb$lookup[130] ? _theResult___fst__h6132 : rg_addr ;
  assign _theResult___fst__h6132 =
	     (rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d114 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d120) ?
	       rg_addr :
	       _theResult___fst__h6475 ;
  assign _theResult___snd_fst__h6063 =
	     tlb$lookup[130] ?
	       _theResult___snd_fst__h6134 :
	       tlb$lookup[129:66] ;
  assign _theResult___snd_fst__h6134 =
	     (rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d114 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d120) ?
	       tlb$lookup[129:66] :
	       _theResult___snd_fst__h6704 ;
  assign _theResult___snd_fst__h6704 =
	     (!pte___2__h6473[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h6781 :
	       pte___2__h6473 ;
  assign access_exc_code__h3212 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h22926 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__8_ULE_1___d19 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h27002 = { rg_pa[63:6], 6'd0 } ;
  assign cline_fabric_addr__h27003 =
	     cline_addr__h27002 | rg_req_byte_in_cline ;
  assign dmem_not_imem_AND_rg_op_3_EQ_0_4_OR_rg_op_3_EQ_ETC___d336 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d103 ;
  assign dmem_not_imem_OR_NOT_rg_op_3_EQ_0_4_5_AND_NOT__ETC___d97 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[69] ;
  assign exc_code___1__h6373 = x1_avValue_exc_code__h5973 ;
  assign ld_val9584_BITS_15_TO_0__q37 = ld_val__h29584[15:0] ;
  assign ld_val9584_BITS_15_TO_8__q39 = ld_val__h29584[15:8] ;
  assign ld_val9584_BITS_23_TO_16__q40 = ld_val__h29584[23:16] ;
  assign ld_val9584_BITS_31_TO_0__q38 = ld_val__h29584[31:0] ;
  assign ld_val9584_BITS_31_TO_16__q41 = ld_val__h29584[31:16] ;
  assign ld_val9584_BITS_31_TO_24__q42 = ld_val__h29584[31:24] ;
  assign ld_val9584_BITS_39_TO_32__q43 = ld_val__h29584[39:32] ;
  assign ld_val9584_BITS_47_TO_32__q44 = ld_val__h29584[47:32] ;
  assign ld_val9584_BITS_47_TO_40__q46 = ld_val__h29584[47:40] ;
  assign ld_val9584_BITS_55_TO_48__q47 = ld_val__h29584[55:48] ;
  assign ld_val9584_BITS_63_TO_32__q45 = ld_val__h29584[63:32] ;
  assign ld_val9584_BITS_63_TO_48__q48 = ld_val__h29584[63:48] ;
  assign ld_val9584_BITS_63_TO_56__q49 = ld_val__h29584[63:56] ;
  assign ld_val9584_BITS_7_TO_0__q36 = ld_val__h29584[7:0] ;
  assign lev_0_pte_pa__h25024 = lev_1_PTN_pa__h23965 + vpn_0_pa__h25023 ;
  assign lev_0_pte_pa_w64_fa__h25026 = { lev_0_pte_pa__h25024[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h23965 = { 8'd0, x__h24070 } ;
  assign lev_1_pte_pa__h23967 = lev_1_PTN_pa__h23965 + vpn_1_pa__h23966 ;
  assign lev_1_pte_pa_w64_fa__h23969 = { lev_1_pte_pa__h23967[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h23025 = satp_pa__h2469 + vpn_2_pa__h23024 ;
  assign lev_2_pte_pa_w64_fa__h23027 = { lev_2_pte_pa__h23025[63:3], 3'b0 } ;
  assign lrsc_result__h15169 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231 ;
  assign master_xactor_crg_rd_data_full_port1__read__79_ETC___d1214 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d1024 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     (!master_xactor_rg_rd_data[3] ||
	      !master_xactor_rg_rd_data[4] && master_xactor_rg_rd_data[5]) &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[5] &&
	     !master_xactor_rg_rd_data[6] &&
	     !master_xactor_rg_rd_data[4] &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d946 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     (master_xactor_rg_rd_data[30:22] != 9'd0 ||
	      master_xactor_rg_rd_data[21:13] != 9'd0) &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d954 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     master_xactor_rg_rd_data[30:22] == 9'd0 &&
	     master_xactor_rg_rd_data[21:13] == 9'd0 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d958 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     master_xactor_rg_rd_data[30:22] == 9'd0 &&
	     master_xactor_rg_rd_data[21:13] == 9'd0 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d989 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     master_xactor_rg_rd_data[21:13] == 9'd0 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d993 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     master_xactor_rg_rd_data[21:13] == 9'd0 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d999 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     master_xactor_rg_rd_data[3] &&
	     (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	     (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	     master_xactor_rg_rd_data[21:13] != 9'd0 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign master_xactor_rg_rd_data_BITS_10_TO_3__q1 =
	     master_xactor_rg_rd_data[10:3] ;
  assign master_xactor_rg_rd_data_BITS_18_TO_11__q4 =
	     master_xactor_rg_rd_data[18:11] ;
  assign master_xactor_rg_rd_data_BITS_18_TO_3__q2 =
	     master_xactor_rg_rd_data[18:3] ;
  assign master_xactor_rg_rd_data_BITS_26_TO_19__q5 =
	     master_xactor_rg_rd_data[26:19] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_19__q6 =
	     master_xactor_rg_rd_data[34:19] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_27__q7 =
	     master_xactor_rg_rd_data[34:27] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_3__q3 =
	     master_xactor_rg_rd_data[34:3] ;
  assign master_xactor_rg_rd_data_BITS_42_TO_35__q8 =
	     master_xactor_rg_rd_data[42:35] ;
  assign master_xactor_rg_rd_data_BITS_50_TO_35__q9 =
	     master_xactor_rg_rd_data[50:35] ;
  assign master_xactor_rg_rd_data_BITS_50_TO_43__q11 =
	     master_xactor_rg_rd_data[50:43] ;
  assign master_xactor_rg_rd_data_BITS_58_TO_51__q12 =
	     master_xactor_rg_rd_data[58:51] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_35__q10 =
	     master_xactor_rg_rd_data[66:35] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_51__q13 =
	     master_xactor_rg_rd_data[66:51] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_59__q14 =
	     master_xactor_rg_rd_data[66:59] ;
  assign new_st_val__h19205 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h19487 :
	       _theResult_____2__h19483 ;
  assign new_st_val__h19487 = { 32'd0, _theResult_____2__h19483[31:0] } ;
  assign new_st_val__h19578 =
	     IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 +
	     IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687 ;
  assign new_st_val__h20558 = w1__h19475 ^ w2__h32710 ;
  assign new_st_val__h20562 = w1__h19475 & w2__h32710 ;
  assign new_st_val__h20566 = w1__h19475 | w2__h32710 ;
  assign new_st_val__h20570 =
	     (w1__h19475 < w2__h32710) ? w1__h19475 : w2__h32710 ;
  assign new_st_val__h20575 =
	     (w1__h19475 <= w2__h32710) ? w2__h32710 : w1__h19475 ;
  assign new_st_val__h20581 =
	     ((IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687 ^
	       64'h8000000000000000)) ?
	       w1__h19475 :
	       w2__h32710 ;
  assign new_st_val__h20586 =
	     ((IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687 ^
	       64'h8000000000000000)) ?
	       w2__h32710 :
	       w1__h19475 ;
  assign new_st_val__h32720 = { 32'd0, _theResult_____2__h32716[31:0] } ;
  assign new_st_val__h32811 =
	     new_ld_val__h32422 +
	     IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687 ;
  assign new_st_val__h34671 = w1__h32708 ^ w2__h32710 ;
  assign new_st_val__h34675 = w1__h32708 & w2__h32710 ;
  assign new_st_val__h34679 = w1__h32708 | w2__h32710 ;
  assign new_st_val__h34683 =
	     (w1__h32708 < w2__h32710) ? w1__h32708 : w2__h32710 ;
  assign new_st_val__h34688 =
	     (w1__h32708 <= w2__h32710) ? w2__h32710 : w1__h32708 ;
  assign new_st_val__h34694 =
	     ((new_ld_val__h32422 ^ 64'h8000000000000000) <
	      (IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687 ^
	       64'h8000000000000000)) ?
	       w1__h32708 :
	       w2__h32710 ;
  assign new_st_val__h34699 =
	     ((new_ld_val__h32422 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_rg_st_amo_val_ETC___d687 ^
	       64'h8000000000000000)) ?
	       w2__h32710 :
	       w1__h32708 ;
  assign new_value500_BITS_31_TO_0__q31 = new_value__h7500[31:0] ;
  assign pa___1__h6481 = { 8'd0, x__h6484 } ;
  assign pa___1__h6530 = { 8'd0, x__h6533 } ;
  assign pa___1__h6599 = { 8'd0, x__h6602 } ;
  assign pte___1__h6753 = { tlb$lookup[129:73], 1'd1, tlb$lookup[71:66] } ;
  assign pte___1__h6781 =
	     { pte___2__h6473[63:8], 1'd1, pte___2__h6473[6:0] } ;
  assign pte___2__h6473 =
	     tlb$lookup[72] ? tlb$lookup[129:66] : pte___1__h6753 ;
  assign ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 =
	     ram_state_and_ctag_cset$DOB[51:0] ==
	     x1_avValue_pa__h5972[63:12] ;
  assign ram_state_and_ctag_cset_b_read__70_BIT_52_71_A_ETC___d431 =
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d430 ;
  assign req_f3_BITS_1_TO_0_381_EQ_0b0_382_OR_req_f3_BI_ETC___d1411 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13909 =
	     { {56{word64319_BITS_15_TO_8__q18[7]}},
	       word64319_BITS_15_TO_8__q18 } ;
  assign result__h13937 =
	     { {56{word64319_BITS_23_TO_16__q19[7]}},
	       word64319_BITS_23_TO_16__q19 } ;
  assign result__h13965 =
	     { {56{word64319_BITS_31_TO_24__q21[7]}},
	       word64319_BITS_31_TO_24__q21 } ;
  assign result__h13993 =
	     { {56{word64319_BITS_39_TO_32__q22[7]}},
	       word64319_BITS_39_TO_32__q22 } ;
  assign result__h14021 =
	     { {56{word64319_BITS_47_TO_40__q25[7]}},
	       word64319_BITS_47_TO_40__q25 } ;
  assign result__h14049 =
	     { {56{word64319_BITS_55_TO_48__q26[7]}},
	       word64319_BITS_55_TO_48__q26 } ;
  assign result__h14077 =
	     { {56{word64319_BITS_63_TO_56__q28[7]}},
	       word64319_BITS_63_TO_56__q28 } ;
  assign result__h14122 = { 56'd0, word64__h7319[7:0] } ;
  assign result__h14150 = { 56'd0, word64__h7319[15:8] } ;
  assign result__h14178 = { 56'd0, word64__h7319[23:16] } ;
  assign result__h14206 = { 56'd0, word64__h7319[31:24] } ;
  assign result__h14234 = { 56'd0, word64__h7319[39:32] } ;
  assign result__h14262 = { 56'd0, word64__h7319[47:40] } ;
  assign result__h14290 = { 56'd0, word64__h7319[55:48] } ;
  assign result__h14318 = { 56'd0, word64__h7319[63:56] } ;
  assign result__h14363 =
	     { {48{word64319_BITS_15_TO_0__q16[15]}},
	       word64319_BITS_15_TO_0__q16 } ;
  assign result__h14391 =
	     { {48{word64319_BITS_31_TO_16__q20[15]}},
	       word64319_BITS_31_TO_16__q20 } ;
  assign result__h14419 =
	     { {48{word64319_BITS_47_TO_32__q23[15]}},
	       word64319_BITS_47_TO_32__q23 } ;
  assign result__h14447 =
	     { {48{word64319_BITS_63_TO_48__q27[15]}},
	       word64319_BITS_63_TO_48__q27 } ;
  assign result__h14488 = { 48'd0, word64__h7319[15:0] } ;
  assign result__h14516 = { 48'd0, word64__h7319[31:16] } ;
  assign result__h14544 = { 48'd0, word64__h7319[47:32] } ;
  assign result__h14572 = { 48'd0, word64__h7319[63:48] } ;
  assign result__h14613 =
	     { {32{word64319_BITS_31_TO_0__q17[31]}},
	       word64319_BITS_31_TO_0__q17 } ;
  assign result__h14641 =
	     { {32{word64319_BITS_63_TO_32__q24[31]}},
	       word64319_BITS_63_TO_32__q24 } ;
  assign result__h14680 = { 32'd0, word64__h7319[31:0] } ;
  assign result__h14708 = { 32'd0, word64__h7319[63:32] } ;
  assign result__h29644 =
	     { {56{master_xactor_rg_rd_data_BITS_10_TO_3__q1[7]}},
	       master_xactor_rg_rd_data_BITS_10_TO_3__q1 } ;
  assign result__h29674 =
	     { {56{master_xactor_rg_rd_data_BITS_18_TO_11__q4[7]}},
	       master_xactor_rg_rd_data_BITS_18_TO_11__q4 } ;
  assign result__h29701 =
	     { {56{master_xactor_rg_rd_data_BITS_26_TO_19__q5[7]}},
	       master_xactor_rg_rd_data_BITS_26_TO_19__q5 } ;
  assign result__h29728 =
	     { {56{master_xactor_rg_rd_data_BITS_34_TO_27__q7[7]}},
	       master_xactor_rg_rd_data_BITS_34_TO_27__q7 } ;
  assign result__h29755 =
	     { {56{master_xactor_rg_rd_data_BITS_42_TO_35__q8[7]}},
	       master_xactor_rg_rd_data_BITS_42_TO_35__q8 } ;
  assign result__h29782 =
	     { {56{master_xactor_rg_rd_data_BITS_50_TO_43__q11[7]}},
	       master_xactor_rg_rd_data_BITS_50_TO_43__q11 } ;
  assign result__h29809 =
	     { {56{master_xactor_rg_rd_data_BITS_58_TO_51__q12[7]}},
	       master_xactor_rg_rd_data_BITS_58_TO_51__q12 } ;
  assign result__h29836 =
	     { {56{master_xactor_rg_rd_data_BITS_66_TO_59__q14[7]}},
	       master_xactor_rg_rd_data_BITS_66_TO_59__q14 } ;
  assign result__h29880 = { 56'd0, master_xactor_rg_rd_data[10:3] } ;
  assign result__h29907 = { 56'd0, master_xactor_rg_rd_data[18:11] } ;
  assign result__h29934 = { 56'd0, master_xactor_rg_rd_data[26:19] } ;
  assign result__h29961 = { 56'd0, master_xactor_rg_rd_data[34:27] } ;
  assign result__h29988 = { 56'd0, master_xactor_rg_rd_data[42:35] } ;
  assign result__h30015 = { 56'd0, master_xactor_rg_rd_data[50:43] } ;
  assign result__h30042 = { 56'd0, master_xactor_rg_rd_data[58:51] } ;
  assign result__h30069 = { 56'd0, master_xactor_rg_rd_data[66:59] } ;
  assign result__h30113 =
	     { {48{master_xactor_rg_rd_data_BITS_18_TO_3__q2[15]}},
	       master_xactor_rg_rd_data_BITS_18_TO_3__q2 } ;
  assign result__h30140 =
	     { {48{master_xactor_rg_rd_data_BITS_34_TO_19__q6[15]}},
	       master_xactor_rg_rd_data_BITS_34_TO_19__q6 } ;
  assign result__h30167 =
	     { {48{master_xactor_rg_rd_data_BITS_50_TO_35__q9[15]}},
	       master_xactor_rg_rd_data_BITS_50_TO_35__q9 } ;
  assign result__h30194 =
	     { {48{master_xactor_rg_rd_data_BITS_66_TO_51__q13[15]}},
	       master_xactor_rg_rd_data_BITS_66_TO_51__q13 } ;
  assign result__h30234 = { 48'd0, master_xactor_rg_rd_data[18:3] } ;
  assign result__h30261 = { 48'd0, master_xactor_rg_rd_data[34:19] } ;
  assign result__h30288 = { 48'd0, master_xactor_rg_rd_data[50:35] } ;
  assign result__h30315 = { 48'd0, master_xactor_rg_rd_data[66:51] } ;
  assign result__h30355 =
	     { {32{master_xactor_rg_rd_data_BITS_34_TO_3__q3[31]}},
	       master_xactor_rg_rd_data_BITS_34_TO_3__q3 } ;
  assign result__h30382 =
	     { {32{master_xactor_rg_rd_data_BITS_66_TO_35__q10[31]}},
	       master_xactor_rg_rd_data_BITS_66_TO_35__q10 } ;
  assign result__h30420 = { 32'd0, master_xactor_rg_rd_data[34:3] } ;
  assign result__h30447 = { 32'd0, master_xactor_rg_rd_data[66:35] } ;
  assign result__h32899 =
	     { {56{ld_val9584_BITS_7_TO_0__q36[7]}},
	       ld_val9584_BITS_7_TO_0__q36 } ;
  assign result__h33807 =
	     { {56{ld_val9584_BITS_15_TO_8__q39[7]}},
	       ld_val9584_BITS_15_TO_8__q39 } ;
  assign result__h33835 =
	     { {56{ld_val9584_BITS_23_TO_16__q40[7]}},
	       ld_val9584_BITS_23_TO_16__q40 } ;
  assign result__h33863 =
	     { {56{ld_val9584_BITS_31_TO_24__q42[7]}},
	       ld_val9584_BITS_31_TO_24__q42 } ;
  assign result__h33891 =
	     { {56{ld_val9584_BITS_39_TO_32__q43[7]}},
	       ld_val9584_BITS_39_TO_32__q43 } ;
  assign result__h33919 =
	     { {56{ld_val9584_BITS_47_TO_40__q46[7]}},
	       ld_val9584_BITS_47_TO_40__q46 } ;
  assign result__h33947 =
	     { {56{ld_val9584_BITS_55_TO_48__q47[7]}},
	       ld_val9584_BITS_55_TO_48__q47 } ;
  assign result__h33975 =
	     { {56{ld_val9584_BITS_63_TO_56__q49[7]}},
	       ld_val9584_BITS_63_TO_56__q49 } ;
  assign result__h34020 = { 56'd0, ld_val__h29584[7:0] } ;
  assign result__h34048 = { 56'd0, ld_val__h29584[15:8] } ;
  assign result__h34076 = { 56'd0, ld_val__h29584[23:16] } ;
  assign result__h34104 = { 56'd0, ld_val__h29584[31:24] } ;
  assign result__h34132 = { 56'd0, ld_val__h29584[39:32] } ;
  assign result__h34160 = { 56'd0, ld_val__h29584[47:40] } ;
  assign result__h34188 = { 56'd0, ld_val__h29584[55:48] } ;
  assign result__h34216 = { 56'd0, ld_val__h29584[63:56] } ;
  assign result__h34261 =
	     { {48{ld_val9584_BITS_15_TO_0__q37[15]}},
	       ld_val9584_BITS_15_TO_0__q37 } ;
  assign result__h34289 =
	     { {48{ld_val9584_BITS_31_TO_16__q41[15]}},
	       ld_val9584_BITS_31_TO_16__q41 } ;
  assign result__h34317 =
	     { {48{ld_val9584_BITS_47_TO_32__q44[15]}},
	       ld_val9584_BITS_47_TO_32__q44 } ;
  assign result__h34345 =
	     { {48{ld_val9584_BITS_63_TO_48__q48[15]}},
	       ld_val9584_BITS_63_TO_48__q48 } ;
  assign result__h34386 = { 48'd0, ld_val__h29584[15:0] } ;
  assign result__h34414 = { 48'd0, ld_val__h29584[31:16] } ;
  assign result__h34442 = { 48'd0, ld_val__h29584[47:32] } ;
  assign result__h34470 = { 48'd0, ld_val__h29584[63:48] } ;
  assign result__h34511 =
	     { {32{ld_val9584_BITS_31_TO_0__q38[31]}},
	       ld_val9584_BITS_31_TO_0__q38 } ;
  assign result__h34539 =
	     { {32{ld_val9584_BITS_63_TO_32__q45[31]}},
	       ld_val9584_BITS_63_TO_32__q45 } ;
  assign result__h34578 = { 32'd0, ld_val__h29584[31:0] } ;
  assign result__h34606 = { 32'd0, ld_val__h29584[63:32] } ;
  assign result__h7553 =
	     { {56{word64319_BITS_7_TO_0__q15[7]}},
	       word64319_BITS_7_TO_0__q15 } ;
  assign rg_amo_funct7_8_BITS_6_TO_2_9_EQ_0b10_0_AND_NO_ETC___d606 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231 =
	     rg_lrsc_pa == x1_avValue_pa__h5972 ;
  assign rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d380 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) ;
  assign rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d417 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d103 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     tlb$lookup[68] ;
  assign rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d442 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__70_BIT_52_71_A_ETC___d431 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d440 ;
  assign rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d446 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 ;
  assign rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d581 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175 &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d600 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175) &&
	     !cfg_verbosity_read__8_ULE_1___d19 ;
  assign rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d440 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_T_ETC___d428 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d439 ;
  assign rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d628 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_3_EQ_2_6_7_OR_NOT_rg_amo_funct7_8_BI_ETC___d625 ||
	     NOT_rg_op_3_EQ_1_24_36_AND_NOT_rg_op_3_EQ_2_6__ETC___d627 ;
  assign rg_op_3_EQ_1_24_OR_rg_op_3_EQ_2_6_AND_rg_amo_f_ETC___d750 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_30_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d231) ;
  assign rg_op_3_EQ_2_6_AND_rg_amo_funct7_8_BITS_6_TO_2_ETC___d245 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h15169 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     IF_rg_f3_78_BITS_1_TO_0_35_EQ_0b0_36_OR_rg_f3__ETC___d242 ;
  assign rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d114 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_3_EQ_0_4_5_AND_NOT__ETC___d97 &&
	     NOT_dmem_not_imem_8_OR_NOT_rg_op_3_EQ_0_4_5_AN_ETC___d105 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[68]) ;
  assign rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d127 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[68] ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d123 =
	     rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     (rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d114 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d120) ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d306 =
	     rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     (rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d123 ?
		tlb$RDY_lookup :
		NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d304) ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d349 =
	     rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8 &&
	     (rg_priv_6_EQ_0b0_3_AND_NOT_tlb_lookup_rg_satp__ETC___d114 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_ad_ETC___d120) &&
	     tlb$lookup[130] ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 =
	     rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d364 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] &&
	     !pte___2__h6473[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d388 =
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d123 ||
	     dmem_not_imem && !soc_map$m_is_mem_addr ||
	     rg_op_3_EQ_0_4_OR_rg_op_3_EQ_2_6_AND_rg_amo_fu_ETC___d380 ||
	     NOT_rg_op_3_EQ_0_4_5_AND_NOT_rg_op_3_EQ_2_6_7__ETC___d385 ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d389 =
	     rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d388 ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d407 =
	     rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_6_EQ_0b0_3_27_OR_tlb_lookup_rg_sat_ETC___d402 &&
	     NOT_cfg_verbosity_read__8_ULT_2_98___d399 &&
	     dmem_not_imem &&
	     tlb$lookup[68] &&
	     tlb$lookup[73] ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d410 =
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	     NOT_cfg_verbosity_read__8_ULT_2_98___d399 &&
	     (!dmem_not_imem || !tlb$lookup[68] || !tlb$lookup[73]) ;
  assign rg_priv_6_ULE_0b1___d57 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q32 = rg_st_amo_val[31:0] ;
  assign satp_pa__h2469 = { 8'd0, x__h5164 } ;
  assign shift_bits__h18551 = { x1_avValue_pa__h5972[2:0], 3'b0 } ;
  assign shift_bits__h32490 = { rg_pa[2:0], 3'b0 } ;
  assign st_val__h32434 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h32720 :
	       _theResult_____2__h32716 ;
  assign strobe64__h18686 = 8'b00000001 << x1_avValue_pa__h5972[2:0] ;
  assign strobe64__h18689 = 8'b00000011 << x1_avValue_pa__h5972[2:0] ;
  assign strobe64__h18692 = 8'b00001111 << x1_avValue_pa__h5972[2:0] ;
  assign strobe64__h32625 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h32628 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h32631 = 8'b00001111 << rg_pa[2:0] ;
  assign tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d103 =
	     tlb$lookup[67] | y__h6299 ;
  assign tlb_lookup_rg_satp_9_BITS_59_TO_44_6_rg_addr_7_ETC___d343 =
	     tlb$lookup[72] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[73]) ;
  assign value__h6798 =
	     (rg_priv_6_ULE_0b1___d57 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_fst__h6063 :
	       tlb$lookup[129:66] ;
  assign vpn_0_pa__h25023 = { 52'd0, rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h23966 = { 52'd0, rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h23024 = { 52'd0, rg_addr[38:30], 3'd0 } ;
  assign w12704_BITS_31_TO_0__q51 = w1__h32704[31:0] ;
  assign w1___1__h19546 = { 32'd0, new_value__h7500[31:0] } ;
  assign w1___1__h32779 = { 32'd0, w1__h32704[31:0] } ;
  assign w2___1__h32780 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h32710 = (rg_f3 == 3'b010) ? w2___1__h32780 : rg_st_amo_val ;
  assign word64319_BITS_15_TO_0__q16 = word64__h7319[15:0] ;
  assign word64319_BITS_15_TO_8__q18 = word64__h7319[15:8] ;
  assign word64319_BITS_23_TO_16__q19 = word64__h7319[23:16] ;
  assign word64319_BITS_31_TO_0__q17 = word64__h7319[31:0] ;
  assign word64319_BITS_31_TO_16__q20 = word64__h7319[31:16] ;
  assign word64319_BITS_31_TO_24__q21 = word64__h7319[31:24] ;
  assign word64319_BITS_39_TO_32__q22 = word64__h7319[39:32] ;
  assign word64319_BITS_47_TO_32__q23 = word64__h7319[47:32] ;
  assign word64319_BITS_47_TO_40__q25 = word64__h7319[47:40] ;
  assign word64319_BITS_55_TO_48__q26 = word64__h7319[55:48] ;
  assign word64319_BITS_63_TO_32__q24 = word64__h7319[63:32] ;
  assign word64319_BITS_63_TO_48__q27 = word64__h7319[63:48] ;
  assign word64319_BITS_63_TO_56__q28 = word64__h7319[63:56] ;
  assign word64319_BITS_7_TO_0__q15 = word64__h7319[7:0] ;
  assign word64__h7319 = ram_word64_set$DOB & y__h7589 ;
  assign x1_avValue_exc_code__h5973 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h5972 = soc_map$m_is_mem_addr_addr ;
  assign x__h15179 = { 63'd0, lrsc_result__h15169 } ;
  assign x__h24070 = { master_xactor_rg_rd_data[56:13], 12'b0 } ;
  assign x__h5164 = { rg_satp[43:0], 12'b0 } ;
  assign x__h6484 = { tlb$lookup[119:76], rg_addr[11:0] } ;
  assign x__h6533 = { tlb$lookup[119:85], rg_addr[20:0] } ;
  assign x__h6602 = { tlb$lookup[119:94], rg_addr[29:0] } ;
  assign y__h6299 = rg_mstatus_MXR & tlb$lookup[69] ;
  assign y__h7589 =
	     {64{ram_state_and_ctag_cset$DOB[52] &&
		 ram_state_and_ctag_cset_b_read__70_BITS_51_TO__ETC___d175}} ;
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h32007 = 3'b0;
      2'b01: value__h32007 = 3'b001;
      2'b10: value__h32007 = 3'b010;
      2'd3: value__h32007 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h35033 = 3'b0;
      2'b01: value__h35033 = 3'b001;
      2'b10: value__h35033 = 3'b010;
      2'b11: value__h35033 = 3'b011;
    endcase
  end
  always@(tlb$lookup or
	  rg_addr or pa___1__h6481 or pa___1__h6530 or pa___1__h6599)
  begin
    case (tlb$lookup[65:64])
      2'd0: _theResult___fst__h6475 = pa___1__h6481;
      2'd1: _theResult___fst__h6475 = pa___1__h6530;
      2'd2: _theResult___fst__h6475 = pa___1__h6599;
      2'd3: _theResult___fst__h6475 = rg_addr;
    endcase
  end
  always@(rg_f3 or strobe64__h32625 or strobe64__h32628 or strobe64__h32631)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h32695 = strobe64__h32625;
      2'b01: mem_req_wr_data_wstrb__h32695 = strobe64__h32628;
      2'b10: mem_req_wr_data_wstrb__h32695 = strobe64__h32631;
      2'b11: mem_req_wr_data_wstrb__h32695 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h31122)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h31190 = _theResult___fst__h31122;
      2'd3: mem_req_wr_data_wdata__h31190 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or strobe64__h18686 or strobe64__h18689 or strobe64__h18692)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h18756 = strobe64__h18686;
      2'b01: mem_req_wr_data_wstrb__h18756 = strobe64__h18689;
      2'b10: mem_req_wr_data_wstrb__h18756 = strobe64__h18692;
      2'b11: mem_req_wr_data_wstrb__h18756 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h18687)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h18755 = _theResult___fst__h18687;
      2'd3: mem_req_wr_data_wdata__h18755 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or rg_priv_6_ULE_0b1___d57 or rg_satp or tlb$RDY_lookup)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01:
	  IF_rg_f3_78_BITS_1_TO_0_35_EQ_0b0_36_OR_rg_f3__ETC___d242 =
	      !rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup;
      default: IF_rg_f3_78_BITS_1_TO_0_35_EQ_0b0_36_OR_rg_f3__ETC___d242 =
		   rg_f3[1:0] != 2'b10 || !rg_priv_6_ULE_0b1___d57 ||
		   rg_satp[63:60] != 4'd8 ||
		   tlb$RDY_lookup;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d200 =
	      NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196;
      3'd7:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d200 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d208 =
	      NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d208 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d200 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d208 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_NOT_ETC___d214)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d200;
      3'b001, 3'b101:
	  IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_OR_rg_ad_ETC___d208;
      3'b010, 3'b110:
	  IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_NOT_ETC___d214;
      default: IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__70_BIT_52__ETC___d196;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29 =
	      IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_78_EQ_0b0_79_OR_rg_f3_78_EQ_0b100_80__ETC___d222;
    endcase
  end
  always@(x1_avValue_pa__h5972 or
	  NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d281 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d282 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29;
      3'd7:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d282 =
	      NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d281;
    endcase
  end
  always@(x1_avValue_pa__h5972 or
	  NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d286 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d287 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_78_ETC__q29;
      default: IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d287 =
		   NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS__ETC___d286;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_78_EQ_0b11_15_16_OR_rg_amo_funct7_8__ETC___d291 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d282 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d287 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d290)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d294 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d282;
      3'b001:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d294 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d287;
      3'b010:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d294 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d290;
      default: IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d294 =
		   NOT_rg_f3_78_EQ_0b11_15_16_OR_rg_amo_funct7_8__ETC___d291;
    endcase
  end
  always@(rg_addr or
	  result__h7553 or
	  result__h13909 or
	  result__h13937 or
	  result__h13965 or
	  result__h13993 or
	  result__h14021 or result__h14049 or result__h14077)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h7553;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h13909;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h13937;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h13965;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h13993;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h14021;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h14049;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 =
	      result__h14077;
    endcase
  end
  always@(rg_addr or
	  result__h14122 or
	  result__h14150 or
	  result__h14178 or
	  result__h14206 or
	  result__h14234 or
	  result__h14262 or result__h14290 or result__h14318)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14122;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14150;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14178;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14206;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14234;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14262;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14290;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 =
	      result__h14318;
    endcase
  end
  always@(rg_addr or
	  result__h14363 or
	  result__h14391 or result__h14419 or result__h14447)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 =
	      result__h14363;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 =
	      result__h14391;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 =
	      result__h14419;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 =
	      result__h14447;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h14488 or
	  result__h14516 or result__h14544 or result__h14572)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 =
	      result__h14488;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 =
	      result__h14516;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 =
	      result__h14544;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 =
	      result__h14572;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14680 or result__h14708)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555 =
	      result__h14680;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555 =
	      result__h14708;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14613 or result__h14641)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4613_0x4_re_ETC__q30 =
	      result__h14613;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4613_0x4_re_ETC__q30 =
	      result__h14641;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result4613_0x4_re_ETC__q30 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4613_0x4_re_ETC__q30 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h7500 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509;
      3'b001:
	  new_value__h7500 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537;
      3'b010:
	  new_value__h7500 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result4613_0x4_re_ETC__q30;
      3'b011:
	  new_value__h7500 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556;
      3'b100:
	  new_value__h7500 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525;
      3'b101:
	  new_value__h7500 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545;
      3'b110:
	  new_value__h7500 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555;
      3'd7: new_value__h7500 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 or
	  w1___1__h19546 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555)
  begin
    case (rg_f3)
      3'b0:
	  w1__h19475 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509;
      3'b001:
	  w1__h19475 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537;
      3'b010: w1__h19475 = w1___1__h19546;
      3'b011:
	  w1__h19475 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556;
      3'b100:
	  w1__h19475 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525;
      3'b101:
	  w1__h19475 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545;
      3'b110:
	  w1__h19475 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555;
      3'd7: w1__h19475 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5972 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5972 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537 or
	  new_value500_BITS_31_TO_0__q31 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d509;
      3'b001:
	  IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d537;
      3'b010:
	  IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 =
	      { {32{new_value500_BITS_31_TO_0__q31[31]}},
		new_value500_BITS_31_TO_0__q31 };
      3'b011:
	  IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_ram_ETC___d556;
      3'b100:
	  IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d525;
      3'b101:
	  IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d545;
      3'b110:
	  IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d555;
      3'd7: IF_rg_f3_78_EQ_0b10_09_THEN_SEXT_IF_rg_f3_78_E_ETC___d623 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h20586 or
	  new_st_val__h19578 or
	  w2__h32710 or
	  new_st_val__h20558 or
	  new_st_val__h20566 or
	  new_st_val__h20562 or
	  new_st_val__h20581 or new_st_val__h20570 or new_st_val__h20575)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h19483 = new_st_val__h19578;
      5'b00001: _theResult_____2__h19483 = w2__h32710;
      5'b00100: _theResult_____2__h19483 = new_st_val__h20558;
      5'b01000: _theResult_____2__h19483 = new_st_val__h20566;
      5'b01100: _theResult_____2__h19483 = new_st_val__h20562;
      5'b10000: _theResult_____2__h19483 = new_st_val__h20581;
      5'b11000: _theResult_____2__h19483 = new_st_val__h20570;
      5'b11100: _theResult_____2__h19483 = new_st_val__h20575;
      default: _theResult_____2__h19483 = new_st_val__h20586;
    endcase
  end
  always@(rg_f3 or new_st_val__h19205 or _theResult___fst__h22069)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h22137 = _theResult___fst__h22069;
      2'd3: mem_req_wr_data_wdata__h22137 = new_st_val__h19205;
    endcase
  end
  always@(x1_avValue_pa__h5972 or ram_word64_set$DOB or new_st_val__h19205)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739 =
	      { ram_word64_set$DOB[63:16], new_st_val__h19205[15:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h19205[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h19205[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739 =
	      { new_st_val__h19205[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5972 or ram_word64_set$DOB or new_st_val__h19205)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { ram_word64_set$DOB[63:8], new_st_val__h19205[7:0] };
      3'h1:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h19205[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h19205[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h19205[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h19205[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h19205[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h19205[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 =
	      { new_st_val__h19205[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h5972 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0:
	  CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674 or
	  CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q33 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d665;
      3'b001:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d674;
      3'b010:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683 =
	      CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q33;
      3'b011:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683 =
	      rg_st_amo_val;
      default: IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h30234 or
	  result__h30261 or result__h30288 or result__h30315)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156 =
	      result__h30234;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156 =
	      result__h30261;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156 =
	      result__h30288;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156 =
	      result__h30315;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30113 or
	  result__h30140 or result__h30167 or result__h30194)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148 =
	      result__h30113;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148 =
	      result__h30140;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148 =
	      result__h30167;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148 =
	      result__h30194;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h29880 or
	  result__h29907 or
	  result__h29934 or
	  result__h29961 or
	  result__h29988 or
	  result__h30015 or result__h30042 or result__h30069)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h29880;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h29907;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h29934;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h29961;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h29988;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h30015;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h30042;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 =
	      result__h30069;
    endcase
  end
  always@(rg_addr or
	  result__h29644 or
	  result__h29674 or
	  result__h29701 or
	  result__h29728 or
	  result__h29755 or
	  result__h29782 or result__h29809 or result__h29836)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29644;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29674;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29701;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29728;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29755;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29782;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29809;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 =
	      result__h29836;
    endcase
  end
  always@(rg_addr or result__h30355 or result__h30382)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0355_0x4_re_ETC__q34 =
	      result__h30355;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0355_0x4_re_ETC__q34 =
	      result__h30382;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result0355_0x4_re_ETC__q34 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h30420 or result__h30447)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0420_0x4_re_ETC__q35 =
	      result__h30420;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0420_0x4_re_ETC__q35 =
	      result__h30447;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result0420_0x4_re_ETC__q35 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0355_0x4_re_ETC__q34 or
	  rg_addr or
	  master_xactor_rg_rd_data or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0420_0x4_re_ETC__q35)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h29584 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1120;
      3'b001:
	  ld_val__h29584 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1148;
      3'b010:
	  ld_val__h29584 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result0355_0x4_re_ETC__q34;
      3'b011:
	  ld_val__h29584 =
	      (rg_addr[2:0] == 3'h0) ? master_xactor_rg_rd_data[66:3] : 64'd0;
      3'b100:
	  ld_val__h29584 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1136;
      3'b101:
	  ld_val__h29584 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1156;
      3'b110:
	  ld_val__h29584 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result0420_0x4_re_ETC__q35;
      3'd7: ld_val__h29584 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h34578 or result__h34606)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290 =
	      result__h34578;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290 =
	      result__h34606;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h34386 or
	  result__h34414 or result__h34442 or result__h34470)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 =
	      result__h34386;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 =
	      result__h34414;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 =
	      result__h34442;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 =
	      result__h34470;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h34261 or
	  result__h34289 or result__h34317 or result__h34345)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 =
	      result__h34261;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 =
	      result__h34289;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 =
	      result__h34317;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 =
	      result__h34345;
      default: IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h34020 or
	  result__h34048 or
	  result__h34076 or
	  result__h34104 or
	  result__h34132 or
	  result__h34160 or result__h34188 or result__h34216)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34020;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34048;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34076;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34104;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34132;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34160;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34188;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 =
	      result__h34216;
    endcase
  end
  always@(rg_addr or
	  result__h32899 or
	  result__h33807 or
	  result__h33835 or
	  result__h33863 or
	  result__h33891 or
	  result__h33919 or result__h33947 or result__h33975)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h32899;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h33807;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h33835;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h33863;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h33891;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h33919;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h33947;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 =
	      result__h33975;
    endcase
  end
  always@(rg_addr or result__h34511 or result__h34539)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4511_0x4_re_ETC__q50 =
	      result__h34511;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4511_0x4_re_ETC__q50 =
	      result__h34539;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result4511_0x4_re_ETC__q50 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4511_0x4_re_ETC__q50 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290)
  begin
    case (rg_f3)
      3'b0:
	  w1__h32704 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244;
      3'b001:
	  w1__h32704 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272;
      3'b010:
	  w1__h32704 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result4511_0x4_re_ETC__q50;
      3'b011:
	  w1__h32704 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291;
      3'b100:
	  w1__h32704 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260;
      3'b101:
	  w1__h32704 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280;
      3'b110:
	  w1__h32704 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290;
      3'd7: w1__h32704 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 or
	  w1___1__h32779 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290)
  begin
    case (rg_f3)
      3'b0:
	  w1__h32708 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244;
      3'b001:
	  w1__h32708 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272;
      3'b010: w1__h32708 = w1___1__h32779;
      3'b011:
	  w1__h32708 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291;
      3'b100:
	  w1__h32708 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260;
      3'b101:
	  w1__h32708 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280;
      3'b110:
	  w1__h32708 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290;
      3'd7: w1__h32708 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272 or
	  w12704_BITS_31_TO_0__q51 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280 or
	  IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h32422 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1244;
      3'b001:
	  new_ld_val__h32422 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_SEX_ETC___d1272;
      3'b010:
	  new_ld_val__h32422 =
	      { {32{w12704_BITS_31_TO_0__q51[31]}},
		w12704_BITS_31_TO_0__q51 };
      3'b011:
	  new_ld_val__h32422 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_IF__ETC___d1291;
      3'b100:
	  new_ld_val__h32422 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1260;
      3'b101:
	  new_ld_val__h32422 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1280;
      3'b110:
	  new_ld_val__h32422 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_0_C_ETC___d1290;
      3'd7: new_ld_val__h32422 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h34699 or
	  new_st_val__h32811 or
	  w2__h32710 or
	  new_st_val__h34671 or
	  new_st_val__h34679 or
	  new_st_val__h34675 or
	  new_st_val__h34694 or new_st_val__h34683 or new_st_val__h34688)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h32716 = new_st_val__h32811;
      5'b00001: _theResult_____2__h32716 = w2__h32710;
      5'b00100: _theResult_____2__h32716 = new_st_val__h34671;
      5'b01000: _theResult_____2__h32716 = new_st_val__h34679;
      5'b01100: _theResult_____2__h32716 = new_st_val__h34675;
      5'b10000: _theResult_____2__h32716 = new_st_val__h34694;
      5'b11000: _theResult_____2__h32716 = new_st_val__h34683;
      5'b11100: _theResult_____2__h32716 = new_st_val__h34688;
      default: _theResult_____2__h32716 = new_st_val__h34699;
    endcase
  end
  always@(rg_f3 or st_val__h32434 or _theResult___fst__h32626)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h32694 = _theResult___fst__h32626;
      2'd3: mem_req_wr_data_wdata__h32694 = st_val__h32434;
    endcase
  end
  always@(x1_avValue_pa__h5972 or ram_word64_set$DOB or new_st_val__h19205)
  begin
    case (x1_avValue_pa__h5972[2:0])
      3'h0:
	  CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q52 =
	      { ram_word64_set$DOB[63:32], new_st_val__h19205[31:0] };
      3'h4:
	  CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q52 =
	      { new_st_val__h19205[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q52 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739 or
	  CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q52 or
	  new_st_val__h19205)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d730;
      3'b001:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_6_ETC___d739;
      3'b010:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748 =
	      CASE_x1_avValue_pa972_BITS_2_TO_0_0x0_ram_word_ETC__q52;
      3'b011:
	  IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748 =
	      new_st_val__h19205;
      default: IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_1_E_ETC___d570)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h17470 =
	      IF_rg_addr_7_BITS_2_TO_0_82_EQ_0x0_83_THEN_1_E_ETC___d570;
      3'd7: new_value__h17470 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 71'h2AAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 77'h0AAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 6'h2A;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 6'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4794 = $stime;
	  #0;
	end
    v__h4788 = v__h4794 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4788,
		   "D_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4788,
		   "I_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4895 = $stime;
	  #0;
	end
    v__h4889 = v__h4895 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4889, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4889, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__8_ULE_1___d19)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:6],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h30787 = $stime;
	  #0;
	end
    v__h30781 = v__h30787 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30781,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30781,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h31685 = $stime;
	  #0;
	end
    v__h31679 = v__h31685 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h31679,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h31679,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__8_ULE_1___d19)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__8_ULE_1___d19)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h4423 = $stime;
	  #0;
	end
    v__h4417 = v__h4423 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h4417, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h4417, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920)
	begin
	  v__h23935 = $stime;
	  #0;
	end
    v__h23929 = v__h23935 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23929,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23929,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	begin
	  v__h23692 = $stime;
	  #0;
	end
    v__h23686 = v__h23692 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h23686,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h23686,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$display("    Req for level 1 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", lev_1_pte_pa_w64_fa__h23969);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d946)
	begin
	  v__h24246 = $stime;
	  #0;
	end
    v__h24240 = v__h24246 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d946)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h24240,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h24240,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  master_xactor_rg_rd_data[3] &&
	  (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	  (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	  (master_xactor_rg_rd_data[30:22] != 9'd0 ||
	   master_xactor_rg_rd_data[21:13] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 exc_code___1__h6373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d958)
	begin
	  v__h24358 = $stime;
	  #0;
	end
    v__h24352 = v__h24358 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d958)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h24352,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h24352,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d958)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h23965);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h23864 = $stime;
	  #0;
	end
    v__h23858 = v__h23864 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23858,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3212);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23858,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3212);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920)
	begin
	  v__h24992 = $stime;
	  #0;
	end
    v__h24986 = v__h24992 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24986,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24986,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	begin
	  v__h24752 = $stime;
	  #0;
	end
    v__h24746 = v__h24752 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h24746,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h24746,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", lev_0_pte_pa_w64_fa__h25026);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d993)
	begin
	  v__h25415 = $stime;
	  #0;
	end
    v__h25409 = v__h25415 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d993)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h25409,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h25409,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d993)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h23965);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d999)
	begin
	  v__h25303 = $stime;
	  #0;
	end
    v__h25297 = v__h25303 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d999)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h25297,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h25297,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  master_xactor_rg_rd_data[3] &&
	  (master_xactor_rg_rd_data[4] || !master_xactor_rg_rd_data[5]) &&
	  (master_xactor_rg_rd_data[6] || master_xactor_rg_rd_data[4]) &&
	  master_xactor_rg_rd_data[21:13] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h6373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h24921 = $stime;
	  #0;
	end
    v__h24915 = v__h24921 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24915,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3212);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24915,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3212);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920)
	begin
	  v__h25887 = $stime;
	  #0;
	end
    v__h25881 = v__h25887 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d920)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h25881,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h25881,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	begin
	  v__h25958 = $stime;
	  #0;
	end
    v__h25952 = v__h25958 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d930)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h25952,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h25952,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa,
		   exc_code___1__h6373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d1024)
	begin
	  v__h26040 = $stime;
	  #0;
	end
    v__h26034 = v__h26040 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d1024)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h26034,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h26034,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[66:3],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_80_BITS_2_TO_1_81_EQ__ETC___d1024)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h23965);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h25816 = $stime;
	  #0;
	end
    v__h25810 = v__h25816 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h25810,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3212);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h25810,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3212);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	begin
	  v__h26950 = $stime;
	  #0;
	end
    v__h26944 = v__h26950 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_req_loop",
		   v__h26944,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_req_loop",
		   v__h26944,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", cline_fabric_addr__h27003);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h5044 = $stime;
	  #0;
	end
    v__h5038 = v__h5044 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h5038,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h5038,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[63:60],
		 rg_satp[59:44],
		 satp_pa__h2469,
		 rg_addr[29:21],
		 rg_addr[20:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:12],
		 rg_addr[11:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d346)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d349)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  rg_priv_6_ULE_0b1___d57 &&
	  rg_satp[63:60] == 4'd8 &&
	  !tlb$lookup[130])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", x1_avValue_exc_code__h5973);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d361)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", value__h6798, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("TLB_Lookup_Result { ", "hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("'h%h", tlb$lookup[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("'h%h", tlb$lookup[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("'h%h", tlb$lookup[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d407)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d410)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("'h%h", x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("'h%h", x1_avValue_exc_code__h5973);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d410)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d407)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("'h%h", value__h6798, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BITS_63_TO_6_ETC___d371 &&
	  NOT_cfg_verbosity_read__8_ULT_2_98___d399)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d424)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d584)
	begin
	  v__h14792 = $stime;
	  #0;
	end
    v__h14786 = v__h14792 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d584)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h14786,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h7319,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h14786,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h7319,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d597)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d584)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h7319);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d603)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d609)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d783)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d789)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d795)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d801)
	$display("        AMO SC result = %0d", lrsc_result__h15169);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5972,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807)
	$write(" 0x%0x",
	       IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d683);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d57 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d812)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5972,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d825)
	begin
	  v__h18954 = $stime;
	  #0;
	end
    v__h18948 = v__h18954 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d825)
	$display("%0d: ERROR: CreditCounter: overflow", v__h18948);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d825)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", value__h35033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", mem_req_wr_data_wdata__h18755);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", mem_req_wr_data_wstrb__h18756);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d819)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d833)
	begin
	  v__h18379 = $stime;
	  #0;
	end
    v__h18373 = v__h18379 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d833)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18373,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18373,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d833)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d840)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$display("          PA 0x%0h ", x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h7319,
		 word64__h7319);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h7319,
		 word64__h7319,
		 new_st_val__h19205);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(" 0x%0x",
	       IF_rg_f3_78_EQ_0b0_79_THEN_IF_IF_rg_priv_6_ULE_ETC___d748);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d851)
	begin
	  v__h22336 = $stime;
	  #0;
	end
    v__h22330 = v__h22336 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d851)
	$display("%0d: ERROR: CreditCounter: overflow", v__h22330);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d851)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", value__h35033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", mem_req_wr_data_wdata__h22137);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", mem_req_wr_data_wstrb__h18756);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d845)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d859)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	begin
	  v__h27287 = $stime;
	  #0;
	end
    v__h27281 = v__h27287 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h27281,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h27281,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h27509 = $stime;
	  #0;
	end
    v__h27503 = v__h27509 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h27503,
		   "D_MMU_Cache",
		   access_exc_code__h3212);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h27503,
		   "I_MMU_Cache",
		   access_exc_code__h3212);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_rg_rd_data[2:1] != 2'b0 || rg_error_during_refill) &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$display("        Updating Cache word64_set 0x%0x, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write(" 0x%0x", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__8_ULE_2_043___d1044)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h29101 = $stime;
	  #0;
	end
    v__h29095 = v__h29101 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29095,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29095,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", value__h32007);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h29475 = $stime;
	  #0;
	end
    v__h29469 = v__h29475 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29469,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29469,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h30575 = $stime;
	  #0;
	end
    v__h30569 = v__h30575 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30569,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h29584);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30569,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h29584);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h30682 = $stime;
	  #0;
	end
    v__h30676 = v__h30682 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h30676,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h30676,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h30867 = $stime;
	  #0;
	end
    v__h30861 = v__h30867 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30861,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30861,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h31389 = $stime;
	  #0;
	end
    v__h31383 = v__h31389 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h31383);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", value__h35033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", mem_req_wr_data_wdata__h31190);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", mem_req_wr_data_wstrb__h32695);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__8_ULE_1___d19)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h31803 = $stime;
	  #0;
	end
    v__h31797 = v__h31803 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h31797,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h31797,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", value__h32007);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h3766 = $stime;
	  #0;
	end
    v__h3760 = v__h3766 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h3760);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", f_pte_writebacks$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", f_pte_writebacks$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd255);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_updated_PTE &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h32121 = $stime;
	  #0;
	end
    v__h32115 = v__h32121 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h32115,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h32115,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h32296 = $stime;
	  #0;
	end
    v__h32290 = v__h32296 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32290,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32290,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h34909 = $stime;
	  #0;
	end
    v__h34903 = v__h34909 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h34903);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", value__h35033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", mem_req_wr_data_wdata__h32694);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", mem_req_wr_data_wstrb__h32695);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h35161 = $stime;
	  #0;
	end
    v__h35155 = v__h35161 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35155,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h32422);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35155,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h32422);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h32392 = $stime;
	  #0;
	end
    v__h32386 = v__h32392 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h32386,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h32386,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h22972 = $stime;
	  #0;
	end
    v__h22966 = v__h22972 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		   v__h22966,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 2 PTE",
		   v__h22966,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", lev_2_pte_pa_w64_fa__h23027);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h36131 = $stime;
	  #0;
	end
    v__h36125 = v__h36131 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h36125, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h36125, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__8_ULE_1___d19)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_381_EQ_0b0_382_OR_req_f3_BI_ETC___d1411 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h26167 = $stime;
	  #0;
	end
    v__h26161 = v__h26167 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h26161,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h26161,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", cline_addr__h27002);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h37285 = $stime;
	  #0;
	end
    v__h37279 = v__h37285 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h37279, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h37279, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	begin
	  v__h35781 = $stime;
	  #0;
	end
    v__h35775 = v__h35781 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h35775,
		 "D_MMU_Cache",
		 $unsigned(b__h22926));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h35775,
		 "I_MMU_Cache",
		 $unsigned(b__h22926));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_wr_resp[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", master_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__8_ULE_1___d19)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	begin
	  v__h35742 = $stime;
	  #0;
	end
    v__h35736 = v__h35742 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h35736,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h35736,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", master_xactor_rg_wr_resp[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", master_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

