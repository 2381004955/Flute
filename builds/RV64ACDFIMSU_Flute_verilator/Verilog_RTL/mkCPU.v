//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// dmem_master_awvalid            O     1 reg
// dmem_master_awid               O     4 reg
// dmem_master_awaddr             O    64 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_wvalid             O     1 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_bready             O     1 reg
// dmem_master_arvalid            O     1 reg
// dmem_master_arid               O     4 reg
// dmem_master_araddr             O    64 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arprot             O     3 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_rready             O     1 reg
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bid                I     4 reg
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rid                I     4 reg
// dmem_master_rdata              I    64 reg
// dmem_master_rresp              I     2 reg
// dmem_master_rlast              I     1 reg
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_set_verbosity               I     1
// EN_hart0_server_reset_response_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awid,

	     dmem_master_awaddr,

	     dmem_master_awlen,

	     dmem_master_awsize,

	     dmem_master_awburst,

	     dmem_master_awlock,

	     dmem_master_awcache,

	     dmem_master_awprot,

	     dmem_master_awqos,

	     dmem_master_awregion,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wlast,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_arid,

	     dmem_master_araddr,

	     dmem_master_arlen,

	     dmem_master_arsize,

	     dmem_master_arburst,

	     dmem_master_arlock,

	     dmem_master_arcache,

	     dmem_master_arprot,

	     dmem_master_arqos,

	     dmem_master_arregion,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rid,
	     dmem_master_rdata,
	     dmem_master_rresp,
	     dmem_master_rlast,

	     dmem_master_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wuser

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [3 : 0] dmem_master_bid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [3 : 0] dmem_master_rid;
  input  [63 : 0] dmem_master_rdata;
  input  [1 : 0] dmem_master_rresp;
  input  dmem_master_rlast;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       hart0_server_reset_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_instr_15_0
  reg [15 : 0] imem_rg_instr_15_0;
  wire [15 : 0] imem_rg_instr_15_0$D_IN;
  wire imem_rg_instr_15_0$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [63 : 0] imem_rg_pc;
  reg [63 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  wire [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [63 : 0] imem_rg_satp;
  wire [63 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register imem_rg_tval
  reg [63 : 0] imem_rg_tval;
  reg [63 : 0] imem_rg_tval$D_IN;
  wire imem_rg_tval$EN;

  // register rg_csr_pc
  reg [63 : 0] rg_csr_pc;
  wire [63 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [63 : 0] rg_csr_val1;
  wire [63 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_epoch
  reg [1 : 0] rg_epoch;
  reg [1 : 0] rg_epoch$D_IN;
  wire rg_epoch$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [63 : 0] rg_next_pc;
  reg [63 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_trap_info
  reg [131 : 0] rg_trap_info;
  reg [131 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage1_rg_stage_input
  reg [401 : 0] stage1_rg_stage_input;
  wire [401 : 0] stage1_rg_stage_input$D_IN;
  wire stage1_rg_stage_input$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [495 : 0] stage2_rg_stage2;
  wire [495 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [238 : 0] stage3_rg_stage3;
  wire [238 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // register stageD_rg_data
  reg [233 : 0] stageD_rg_data;
  wire [233 : 0] stageD_rg_data$D_IN;
  wire stageD_rg_data$EN;

  // register stageD_rg_full
  reg stageD_rg_full;
  reg stageD_rg_full$D_IN;
  wire stageD_rg_full$EN;

  // register stageF_rg_epoch
  reg [1 : 0] stageF_rg_epoch;
  reg [1 : 0] stageF_rg_epoch$D_IN;
  wire stageF_rg_epoch$EN;

  // register stageF_rg_full
  reg stageF_rg_full;
  reg stageF_rg_full$D_IN;
  wire stageF_rg_full$EN;

  // register stageF_rg_priv
  reg [1 : 0] stageF_rg_priv;
  wire [1 : 0] stageF_rg_priv$D_IN;
  wire stageF_rg_priv$EN;

  // ports of submodule csr_regfile
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [193 : 0] csr_regfile$csr_trap_actions;
  wire [129 : 0] csr_regfile$csr_ret_actions;
  wire [64 : 0] csr_regfile$read_csr;
  wire [63 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_csr_mcycle,
		csr_regfile$read_csr_minstret,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending,
	       csr_regfile$ma_update_fcsr_fflags_flags;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [2 : 0] csr_regfile$read_frm;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$ma_update_mstatus_fs_fs;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_ma_update_fcsr_fflags,
       csr_regfile$EN_ma_update_mstatus_fs,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_redirects
  wire [129 : 0] f_redirects$D_IN, f_redirects$D_OUT;
  wire f_redirects$CLR,
       f_redirects$DEQ,
       f_redirects$EMPTY_N,
       f_redirects$ENQ,
       f_redirects$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule fpr_regfile
  wire [63 : 0] fpr_regfile$read_rs1,
		fpr_regfile$read_rs2,
		fpr_regfile$read_rs3,
		fpr_regfile$write_rd_rd_val;
  wire [4 : 0] fpr_regfile$read_rs1_port2_rs1,
	       fpr_regfile$read_rs1_rs1,
	       fpr_regfile$read_rs2_rs2,
	       fpr_regfile$read_rs3_rs3,
	       fpr_regfile$write_rd_rd;
  wire fpr_regfile$EN_server_reset_request_put,
       fpr_regfile$EN_server_reset_response_get,
       fpr_regfile$EN_write_rd,
       fpr_regfile$RDY_server_reset_request_put,
       fpr_regfile$RDY_server_reset_response_get;

  // ports of submodule gpr_regfile
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [63 : 0] near_mem$dmem_req_store_value, near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$imem_pc,
		near_mem$imem_req_satp;
  wire [31 : 0] near_mem$imem_instr;
  wire [7 : 0] near_mem$dmem_master_arlen,
	       near_mem$dmem_master_awlen,
	       near_mem$dmem_master_wstrb,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code,
	       near_mem$dmem_master_arcache,
	       near_mem$dmem_master_arid,
	       near_mem$dmem_master_arqos,
	       near_mem$dmem_master_arregion,
	       near_mem$dmem_master_awcache,
	       near_mem$dmem_master_awid,
	       near_mem$dmem_master_awqos,
	       near_mem$dmem_master_awregion,
	       near_mem$dmem_master_bid,
	       near_mem$dmem_master_rid,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_arsize,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_master_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3;
  wire [1 : 0] near_mem$dmem_master_arburst,
	       near_mem$dmem_master_awburst,
	       near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arlock,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awlock,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rlast,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wlast,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_fbox
  wire [63 : 0] stage2_fbox$req_v1,
		stage2_fbox$req_v2,
		stage2_fbox$req_v3,
		stage2_fbox$word_fst;
  wire [6 : 0] stage2_fbox$req_f7, stage2_fbox$req_opcode;
  wire [4 : 0] stage2_fbox$req_rs2, stage2_fbox$word_snd;
  wire [2 : 0] stage2_fbox$req_rm;
  wire stage2_fbox$EN_req,
       stage2_fbox$EN_server_reset_request_put,
       stage2_fbox$EN_server_reset_response_get,
       stage2_fbox$RDY_server_reset_request_put,
       stage2_fbox$RDY_server_reset_response_get,
       stage2_fbox$valid;

  // ports of submodule stage2_mbox
  wire [63 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // ports of submodule stageD_f_reset_reqs
  wire stageD_f_reset_reqs$CLR,
       stageD_f_reset_reqs$DEQ,
       stageD_f_reset_reqs$EMPTY_N,
       stageD_f_reset_reqs$ENQ,
       stageD_f_reset_reqs$FULL_N;

  // ports of submodule stageD_f_reset_rsps
  wire stageD_f_reset_rsps$CLR,
       stageD_f_reset_rsps$DEQ,
       stageD_f_reset_rsps$EMPTY_N,
       stageD_f_reset_rsps$ENQ,
       stageD_f_reset_rsps$FULL_N;

  // ports of submodule stageF_branch_predictor
  reg [63 : 0] stageF_branch_predictor$predict_req_pc;
  wire [64 : 0] stageF_branch_predictor$predict_req_m_old_pc;
  wire [63 : 0] stageF_branch_predictor$predict_rsp;
  wire stageF_branch_predictor$EN_predict_req,
       stageF_branch_predictor$EN_reset,
       stageF_branch_predictor$RDY_predict_req;

  // ports of submodule stageF_f_reset_reqs
  wire stageF_f_reset_reqs$CLR,
       stageF_f_reset_reqs$DEQ,
       stageF_f_reset_reqs$EMPTY_N,
       stageF_f_reset_reqs$ENQ,
       stageF_f_reset_reqs$FULL_N;

  // ports of submodule stageF_f_reset_rsps
  wire stageF_f_reset_rsps$CLR,
       stageF_f_reset_rsps$DEQ,
       stageF_f_reset_rsps$EMPTY_N,
       stageF_f_reset_rsps$ENQ,
       stageF_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_RL_stageD_rl_reset,
       CAN_FIRE_RL_stageF_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_RL_stageD_rl_reset,
       WILL_FIRE_RL_stageF_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [131 : 0] MUX_rg_trap_info$write_1__VAL_2;
  reg [63 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [131 : 0] MUX_rg_trap_info$write_1__VAL_1,
		 MUX_rg_trap_info$write_1__VAL_3,
		 MUX_rg_trap_info$write_1__VAL_4;
  wire [64 : 0] MUX_stageF_branch_predictor$predict_req_2__VAL_2;
  wire [63 : 0] MUX_imem_rg_tval$write_1__VAL_5,
		MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_4,
		MUX_near_mem$imem_req_2__VAL_5;
  wire [31 : 0] MUX_rg_trap_instr$write_1__VAL_1;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_2,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_f3$write_1__SEL_2,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_4,
       MUX_imem_rg_pc$write_1__SEL_4,
       MUX_near_mem$imem_req_1__SEL_6,
       MUX_rg_epoch$write_1__SEL_2,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_12,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_14,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_instr$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2,
       MUX_stageD_rg_full$write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23,
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q24,
	       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256,
	       _theResult_____1_fst__h10313,
	       alu_outputs___1_val1__h8913,
	       rs1_val__h29109,
	       value__h7695,
	       value__h7756,
	       x_out_bypass_rd_val__h7998,
	       x_out_data_to_stage2_addr__h8512,
	       x_out_data_to_stage2_val1__h8513,
	       x_out_data_to_stage3_frd_val__h7457,
	       x_out_data_to_stage3_rd_val__h7453,
	       x_out_fbypass_rd_val__h8126;
  reg [4 : 0] data_to_stage2_rd__h8494,
	      x_out_bypass_rd__h7997,
	      x_out_data_to_stage3_fpr_flags__h7456,
	      x_out_data_to_stage3_rd__h7452,
	      x_out_fbypass_rd__h8125;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q15,
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q17,
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q18,
	      CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16,
	      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990,
	      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d993,
	      IF_stage1_rg_stage_input_09_BITS_87_TO_76_45_E_ETC___d968,
	      alu_outputs_exc_code__h9607,
	      x_out_trap_info_exc_code__h7732;
  reg [2 : 0] CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19,
	      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q3,
	      CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q4,
	      CASE_stage2_rg_stage2_BITS_397_TO_395_1_IF_NOT_ETC__q5;
  reg CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13,
      CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14,
      CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q26,
      CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q25,
      IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399,
      IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723,
      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d706,
      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d714,
      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d899,
      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d907,
      IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d161,
      IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d171;
  wire [127 : 0] csr_regfile_read_csr_mcycle__2_MINUS_rg_start__ETC___d2346;
  wire [63 : 0] IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2396,
		IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d1157,
		IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1257,
		IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1258,
		IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1267,
		IF_stage1_rg_stage_input_09_BIT_333_148_THEN_s_ETC___d1151,
		SEXT_stage1_rg_stage_input_09_BITS_87_TO_76_45___d1156,
		_theResult_____1_fst__h10306,
		_theResult_____1_fst__h10341,
		_theResult____h27960,
		_theResult___fst__h10446,
		_theResult___fst__h10453,
		_theResult___fst__h10548,
		_theResult___snd__h12931,
		_theResult___snd_fst_rd_val__h8117,
		_theResult___snd_snd_rd_val__h7428,
		alu_outputs___1_addr__h8657,
		alu_outputs___1_addr__h8685,
		alu_outputs___1_addr__h8718,
		alu_outputs___1_addr__h9038,
		alu_outputs___1_fval2__h9042,
		alu_outputs___1_val1__h8808,
		alu_outputs___1_val1__h8853,
		alu_outputs___1_val1__h8883,
		alu_outputs___1_val1__h8936,
		alu_outputs___1_val1__h8959,
		alu_outputs___1_val1__h9323,
		alu_outputs___1_val1__h9351,
		branch_target__h8636,
		cpi__h27962,
		cpifrac__h27963,
		data_to_stage2_addr__h8495,
		delta_CPI_cycles__h27958,
		delta_CPI_instrs___1__h27995,
		delta_CPI_instrs__h27959,
		fall_through_pc__h8432,
		next_pc___1__h12269,
		next_pc__h12266,
		next_pc__h26558,
		next_pc__h8433,
		output_stage2___1_data_to_stage3_frd_val__h7357,
		rd_val___1__h10294,
		rd_val___1__h10302,
		rd_val___1__h10309,
		rd_val___1__h10316,
		rd_val___1__h10323,
		rd_val___1__h10330,
		rd_val___1__h12960,
		rd_val___1__h12991,
		rd_val___1__h13044,
		rd_val___1__h13073,
		rd_val___1__h13125,
		rd_val___1__h13173,
		rd_val___1__h13179,
		rd_val___1__h13224,
		rd_val__h12828,
		rd_val__h12879,
		rd_val__h12901,
		rd_val__h8310,
		rd_val__h8335,
		rd_val__h8360,
		rd_val__h8383,
		rd_val__h8409,
		rs1_val__h28436,
		rs1_val_bypassed__h4833,
		rs2_val__h8632,
		trap_info_tval__h12506,
		val__h8312,
		val__h8337,
		value__h12616,
		x__h27961,
		x_out_data_to_stage2_fval1__h8515,
		x_out_data_to_stage2_fval3__h8517,
		x_out_data_to_stage2_val2__h8514,
		x_out_next_pc__h8449,
		y__h29372;
  wire [31 : 0] IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1674,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1675,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1676,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1677,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1678,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1679,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1681,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1683,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1685,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1687,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1688,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1689,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1691,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1692,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1693,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1695,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1697,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1698,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1700,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1701,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1702,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1703,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1704,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1705,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1706,
		IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1707,
		IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC__q22,
		_theResult____h5191,
		_theResult___fst__h21324,
		_theResult___fst__h21352,
		d_instr__h21292,
		instr___1__h13704,
		instr__h13881,
		instr__h14026,
		instr__h14218,
		instr__h14413,
		instr__h14642,
		instr__h15095,
		instr__h15211,
		instr__h15276,
		instr__h15593,
		instr__h15931,
		instr__h16115,
		instr__h16244,
		instr__h16471,
		instr__h16726,
		instr__h16898,
		instr__h17067,
		instr__h17256,
		instr__h17445,
		instr__h17562,
		instr__h17740,
		instr__h17859,
		instr__h17954,
		instr__h18090,
		instr__h18226,
		instr__h18362,
		instr__h18500,
		instr__h18638,
		instr__h18796,
		instr__h18892,
		instr__h19045,
		instr__h19244,
		instr__h19395,
		instr__h20434,
		instr__h20587,
		instr__h20786,
		instr__h20937,
		instr_out___1__h21294,
		instr_out___1__h21326,
		instr_out___1__h21354,
		rs1_val_bypassed833_BITS_31_TO_0_MINUS_rs2_val_ETC__q10,
		rs1_val_bypassed833_BITS_31_TO_0_PLUS_rs2_val6_ETC__q9,
		rs1_val_bypassed833_BITS_31_TO_0_SRL_rs2_val63_ETC__q8,
		rs1_val_bypassed833_BITS_31_TO_0__q7,
		tmp__h13072,
		v32__h8925,
		x__h12994,
		x__h13047,
		x__h13182,
		x__h13227,
		x_out_data_to_stage1_instr__h13668;
  wire [20 : 0] SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1485,
		decoded_instr_imm21_UJ__h25602,
		stage1_rg_stage_input_BITS_30_TO_10__q2;
  wire [19 : 0] imm20__h15983;
  wire [12 : 0] SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510,
		decoded_instr_imm13_SB__h25600,
		stage1_rg_stage_input_BITS_63_TO_51__q1;
  wire [11 : 0] decoded_instr_imm12_S__h25599,
		imm12__h13882,
		imm12__h14219,
		imm12__h15855,
		imm12__h16524,
		imm12__h16739,
		imm12__h16935,
		imm12__h17272,
		imm12__h18893,
		imm12__h19245,
		offset__h14589,
		stage1_rg_stage_input_BITS_75_TO_64__q6,
		stage1_rg_stage_input_BITS_87_TO_76__q21;
  wire [9 : 0] decoded_instr_funct10__h25597,
	       nzimm10__h16522,
	       nzimm10__h16737;
  wire [8 : 0] offset__h15220, offset__h18807;
  wire [7 : 0] offset__h13754, offset__h19179;
  wire [6 : 0] offset__h14161;
  wire [5 : 0] imm6__h15853, shamt__h8793;
  wire [4 : 0] offset_BITS_4_TO_0___h14150,
	       offset_BITS_4_TO_0___h14581,
	       offset_BITS_4_TO_0___h19520,
	       rd__h14221,
	       rs1__h14220,
	       x_out_data_to_stage2_rd__h8511;
  wire [3 : 0] IF_NOT_csr_regfile_read_mstatus__4_BITS_14_TO__ETC___d978,
	       IF_NOT_stage1_rg_stage_input_09_BITS_112_TO_11_ETC___d922,
	       IF_rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_E_ETC___d966,
	       IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d928,
	       IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d932,
	       IF_stage1_rg_stage_input_09_BITS_144_TO_140_35_ETC___d970,
	       IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996,
	       alu_outputs___1_exc_code__h9319,
	       cur_verbosity__h3117,
	       x_exc_code__h35524,
	       x_out_trap_info_exc_code__h12511;
  wire [2 : 0] IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090,
	       rm__h9474,
	       x_out_data_to_stage2_rounding_mode__h8521;
  wire [1 : 0] IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d268,
	       IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d288,
	       IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293,
	       IF_near_mem_dmem_valid__33_THEN_IF_near_mem_dm_ETC___d136,
	       IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140,
	       IF_stage2_mbox_valid__37_THEN_2_ELSE_1___d138,
	       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145,
	       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275,
	       epoch__h26556,
	       sxl__h6285,
	       uxl__h6286,
	       v__h22604;
  wire IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2035,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2038,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2235,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2304,
       IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116,
       IF_NOT_stage1_rg_stage_input_09_BITS_335_TO_33_ETC___d2018,
       IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d318,
       IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d319,
       IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d322,
       IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388,
       IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390,
       IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392,
       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d717,
       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d728,
       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d910,
       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d912,
       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2013,
       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2100,
       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2102,
       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d313,
       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d315,
       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325,
       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915,
       NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51,
       NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005,
       NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349,
       NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731,
       NOT_cfg_verbosity_read__8_ULE_1_990___d1991,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2031,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2033,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2106,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2111,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2227,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2318,
       NOT_csr_regfile_read_mstatus__4_BITS_14_TO_13__ETC___d895,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1975,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2425,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2437,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1832,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834,
       NOT_rg_cur_priv_3_EQ_0b11_37_384_AND_NOT_rg_cu_ETC___d1390,
       NOT_stage1_rg_full_08_19_OR_stage1_rg_stage_in_ETC___d2059,
       NOT_stage1_rg_full_08_19_OR_stage1_rg_stage_in_ETC___d2061,
       NOT_stage1_rg_stage_input_09_BITS_112_TO_110_5_ETC___d435,
       NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d1069,
       NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d2458,
       NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d2462,
       csr_regfile_RDY_server_reset_request_put__941__ETC___d1953,
       csr_regfile_interrupt_pending_rg_cur_priv_3_00_ETC___d2008,
       csr_regfile_interrupt_pending_rg_cur_priv_3_00_ETC___d2016,
       csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1495,
       csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1501,
       csr_regfile_read_mstatus__4_BITS_14_TO_13_6_EQ_ETC___d702,
       gpr_regfile_RDY_server_reset_request_put__938__ETC___d1956,
       near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1838,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1805,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1936,
       rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_EQ_0_ETC___d1375,
       rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_EQ_0_ETC___d964,
       rg_state_2_EQ_12_9_AND_csr_regfile_wfi_resume__ETC___d2448,
       rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322,
       rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2421,
       rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2433,
       rg_state_2_EQ_3_047_AND_stage3_rg_full_3_OR_NO_ETC___d2057,
       rg_state_2_EQ_3_047_AND_stage3_rg_full_3_OR_NO_ETC___d2065,
       rg_state_2_EQ_8_404_AND_NOT_stageF_rg_full_823_ETC___d2405,
       rg_trap_info_332_BITS_131_TO_68_333_EQ_csr_reg_ETC___d2342,
       stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d1123,
       stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918,
       stage1_rg_stage_input_09_BITS_112_TO_110_53_EQ_ETC___d755,
       stage1_rg_stage_input_09_BITS_144_TO_140_35_EQ_ETC___d943,
       stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d2162,
       stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d748,
       stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d1344,
       stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d2028,
       stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311,
       stage3_rg_full_3_OR_NOT_IF_stage2_rg_full_09_T_ETC___d2055,
       stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d374,
       stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d382,
       stageD_f_reset_rsps_i_notEmpty__966_AND_stage1_ETC___d1981,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1849,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1855,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1859,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1863,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1867,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1871,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1875,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1879,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1883,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1887,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1891,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1895,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1899,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1903,
       stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1907;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = near_mem$dmem_master_awid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = near_mem$dmem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = near_mem$dmem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = near_mem$dmem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = near_mem$dmem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = near_mem$dmem_master_awcache ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = near_mem$dmem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = near_mem$dmem_master_awregion ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = near_mem$dmem_master_wlast ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = near_mem$dmem_master_arid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = near_mem$dmem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = near_mem$dmem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = near_mem$dmem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = near_mem$dmem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = near_mem$dmem_master_arcache ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = near_mem$dmem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = near_mem$dmem_master_arregion ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .ma_update_fcsr_fflags_flags(csr_regfile$ma_update_fcsr_fflags_flags),
			    .ma_update_mstatus_fs_fs(csr_regfile$ma_update_mstatus_fs_fs),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_ma_update_fcsr_fflags(csr_regfile$EN_ma_update_fcsr_fflags),
			    .EN_ma_update_mstatus_fs(csr_regfile$EN_ma_update_mstatus_fs),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(),
			    .read_frm(csr_regfile$read_frm),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .RDY_debug());

  // submodule f_redirects
  FIFO2 #(.width(32'd130), .guarded(32'd1)) f_redirects(.RST(RST_N),
							.CLK(CLK),
							.D_IN(f_redirects$D_IN),
							.ENQ(f_redirects$ENQ),
							.DEQ(f_redirects$DEQ),
							.CLR(f_redirects$CLR),
							.D_OUT(f_redirects$D_OUT),
							.FULL_N(f_redirects$FULL_N),
							.EMPTY_N(f_redirects$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule fpr_regfile
  mkFPR_RegFile fpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(fpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(fpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(fpr_regfile$read_rs2_rs2),
			    .read_rs3_rs3(fpr_regfile$read_rs3_rs3),
			    .write_rd_rd(fpr_regfile$write_rd_rd),
			    .write_rd_rd_val(fpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(fpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(fpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(fpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(fpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(fpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(fpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(fpr_regfile$read_rs2),
			    .read_rs3(fpr_regfile$read_rs3));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bid(near_mem$dmem_master_bid),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rid(near_mem$dmem_master_rid),
		      .dmem_master_rlast(near_mem$dmem_master_rlast),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awid(near_mem$dmem_master_awid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awlen(near_mem$dmem_master_awlen),
		      .dmem_master_awsize(near_mem$dmem_master_awsize),
		      .dmem_master_awburst(near_mem$dmem_master_awburst),
		      .dmem_master_awlock(near_mem$dmem_master_awlock),
		      .dmem_master_awcache(near_mem$dmem_master_awcache),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_awqos(near_mem$dmem_master_awqos),
		      .dmem_master_awregion(near_mem$dmem_master_awregion),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_wlast(near_mem$dmem_master_wlast),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_arid(near_mem$dmem_master_arid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arlen(near_mem$dmem_master_arlen),
		      .dmem_master_arsize(near_mem$dmem_master_arsize),
		      .dmem_master_arburst(near_mem$dmem_master_arburst),
		      .dmem_master_arlock(near_mem$dmem_master_arlock),
		      .dmem_master_arcache(near_mem$dmem_master_arcache),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_arqos(near_mem$dmem_master_arqos),
		      .dmem_master_arregion(near_mem$dmem_master_arregion),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_fbox
  mkFBox_Top stage2_fbox(.verbosity(4'd3),
			 .CLK(CLK),
			 .RST_N(RST_N),
			 .req_f7(stage2_fbox$req_f7),
			 .req_opcode(stage2_fbox$req_opcode),
			 .req_rm(stage2_fbox$req_rm),
			 .req_rs2(stage2_fbox$req_rs2),
			 .req_v1(stage2_fbox$req_v1),
			 .req_v2(stage2_fbox$req_v2),
			 .req_v3(stage2_fbox$req_v3),
			 .EN_server_reset_request_put(stage2_fbox$EN_server_reset_request_put),
			 .EN_server_reset_response_get(stage2_fbox$EN_server_reset_response_get),
			 .EN_req(stage2_fbox$EN_req),
			 .RDY_server_reset_request_put(stage2_fbox$RDY_server_reset_request_put),
			 .RDY_server_reset_response_get(stage2_fbox$RDY_server_reset_response_get),
			 .valid(stage2_fbox$valid),
			 .word_fst(stage2_fbox$word_fst),
			 .word_snd(stage2_fbox$word_snd));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // submodule stageD_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stageD_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageD_f_reset_reqs$ENQ),
						.DEQ(stageD_f_reset_reqs$DEQ),
						.CLR(stageD_f_reset_reqs$CLR),
						.FULL_N(stageD_f_reset_reqs$FULL_N),
						.EMPTY_N(stageD_f_reset_reqs$EMPTY_N));

  // submodule stageD_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stageD_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageD_f_reset_rsps$ENQ),
						.DEQ(stageD_f_reset_rsps$DEQ),
						.CLR(stageD_f_reset_rsps$CLR),
						.FULL_N(stageD_f_reset_rsps$FULL_N),
						.EMPTY_N(stageD_f_reset_rsps$EMPTY_N));

  // submodule stageF_branch_predictor
  mkBranch_Predictor stageF_branch_predictor(.CLK(CLK),
					     .RST_N(RST_N),
					     .predict_req_m_old_pc(stageF_branch_predictor$predict_req_m_old_pc),
					     .predict_req_pc(stageF_branch_predictor$predict_req_pc),
					     .EN_reset(stageF_branch_predictor$EN_reset),
					     .EN_predict_req(stageF_branch_predictor$EN_predict_req),
					     .RDY_reset(),
					     .RDY_predict_req(stageF_branch_predictor$RDY_predict_req),
					     .predict_rsp(stageF_branch_predictor$predict_rsp));

  // submodule stageF_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stageF_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageF_f_reset_reqs$ENQ),
						.DEQ(stageF_f_reset_reqs$DEQ),
						.CLR(stageF_f_reset_reqs$CLR),
						.FULL_N(stageF_f_reset_reqs$FULL_N),
						.EMPTY_N(stageF_f_reset_reqs$EMPTY_N));

  // submodule stageF_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stageF_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stageF_f_reset_rsps$ENQ),
						.DEQ(stageF_f_reset_rsps$DEQ),
						.CLR(stageF_f_reset_rsps$CLR),
						.FULL_N(stageF_f_reset_rsps$FULL_N),
						.EMPTY_N(stageF_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd12 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd3 && !stage3_rg_full &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	     4'd12 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     rg_state == 4'd4 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = rg_state == 4'd6 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10 ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = rg_state == 4'd7 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1975 &&
	     rg_state_2_EQ_8_404_AND_NOT_stageF_rg_full_823_ETC___d2405 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     (IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	      4'd8 ||
	      IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	      4'd9 ||
	      IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	      4'd10) &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_11 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_11 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2425 &&
	     rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_12 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_12 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2437 &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1975 &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_14 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_14 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1975 &&
	     rg_state_2_EQ_12_9_AND_csr_regfile_wfi_resume__ETC___d2448 ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd12 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_4 ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1975 &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd3 &&
	     NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d2462 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     fpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stageF_f_reset_rsps$EMPTY_N &&
	     stageD_f_reset_rsps_i_notEmpty__966_AND_stage1_ETC___d1981 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (csr_regfile_interrupt_pending_rg_cur_priv_3_00_ETC___d2016 ||
	      IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	      4'd0 ||
	      IF_NOT_stage1_rg_stage_input_09_BITS_335_TO_33_ETC___d2018 ||
	      IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 ||
	      f_redirects$FULL_N) &&
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2038 ||
	      (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	       imem_rg_pc[1:0] == 2'b0 ||
	       near_mem$imem_instr[17:16] != 2'b11) &&
	      stageF_branch_predictor$RDY_predict_req) &&
	     rg_state_2_EQ_3_047_AND_stage3_rg_full_3_OR_NO_ETC___d2065 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	     4'd7 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_13 ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile_RDY_server_reset_request_put__938__ETC___d1956 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_fbox$RDY_server_reset_response_get &&
	     stage2_f_reset_rsps$FULL_N &&
	     stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin =
	     stage2_fbox$RDY_server_reset_request_put &&
	     stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // rule RL_stageD_rl_reset
  assign CAN_FIRE_RL_stageD_rl_reset =
	     stageD_f_reset_reqs$EMPTY_N && stageD_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageD_rl_reset = CAN_FIRE_RL_stageD_rl_reset ;

  // rule RL_stageF_rl_reset
  assign CAN_FIRE_RL_stageF_rl_reset =
	     stageF_f_reset_reqs$EMPTY_N && stageF_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageF_rl_reset = CAN_FIRE_RL_stageF_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_rg_f3$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_near_mem$imem_req_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_rg_epoch$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2227 ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_state$write_1__SEL_1 =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_4 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_10 =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	     4'd4 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2421 ;
  assign MUX_rg_state$write_1__SEL_12 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2433 ;
  assign MUX_rg_state$write_1__SEL_13 =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_14 =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	     4'd11 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_instr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h29372 or
	  IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2396)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2396;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[63:0] & y__h29372;
    endcase
  end
  assign MUX_imem_rg_tval$write_1__VAL_5 = imem_rg_pc + 64'd2 ;
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     { soc_map$m_pc_reset_value[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_2 = { next_pc__h26558[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_4 =
	     { x_out_next_pc__h8449[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_5 = { rg_next_pc[63:2], 2'b0 } ;
  assign MUX_rg_state$write_1__VAL_1 = rg_run_on_reset ? 4'd3 : 4'd2 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_1 ? 4'd8 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_2 ? 4'd8 : 4'd4 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { stage1_rg_stage_input[401:338], 4'd2, value__h12616 } ;
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  MUX_rg_trap_info$write_1__VAL_2 =
	      { stage2_rg_stage2[493:430],
		near_mem$dmem_exc_code,
		stage2_rg_stage2[389:326] };
      default: MUX_rg_trap_info$write_1__VAL_2 =
		   { stage2_rg_stage2[493:430], 68'h20000000000000000 };
    endcase
  end
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { stage1_rg_stage_input[401:338],
	       stage1_rg_stage_input[332] ?
		 stage1_rg_stage_input[331:264] :
		 { alu_outputs_exc_code__h9607, trap_info_tval__h12506 } } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { stage1_rg_stage_input[401:338], x_exc_code__h35524, 64'd0 } ;
  assign MUX_rg_trap_instr$write_1__VAL_1 = stage1_rg_stage_input[263:232] ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2235 &&
	     stageD_rg_full ||
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2304 ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2033 ?
	       IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	       4'd0 &&
	       IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 :
	       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	       2'd2 &&
	       IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	       2'd0 ;
  assign MUX_stageD_rg_full$write_1__VAL_2 =
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2035 &&
	     stageD_rg_full ;
  assign MUX_stageF_branch_predictor$predict_req_2__VAL_2 =
	     { f_redirects$EMPTY_N, f_redirects$D_OUT[127:64] } ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_instr_15_0
  assign imem_rg_instr_15_0$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_instr_15_0$EN = CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_f3$write_1__SEL_2 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_mstatus[19] :
	       rg_mstatus_MXR ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  next_pc__h26558 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  x_out_next_pc__h8449 or MUX_imem_rg_pc$write_1__SEL_4 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  imem_rg_pc$D_IN = soc_map$m_pc_reset_value;
      MUX_imem_rg_f3$write_1__SEL_2: imem_rg_pc$D_IN = next_pc__h26558;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h8449;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_rg_priv
  assign imem_rg_priv$D_IN = rg_cur_priv ;
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_f3$write_1__SEL_2 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_sstatus[18] :
	       rg_sstatus_SUM ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_tval
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  next_pc__h26558 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  x_out_next_pc__h8449 or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  rg_next_pc or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  imem_rg_tval$D_IN = soc_map$m_pc_reset_value;
      MUX_imem_rg_f3$write_1__SEL_2: imem_rg_tval$D_IN = next_pc__h26558;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_tval$D_IN = x_out_next_pc__h8449;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_tval$D_IN = rg_next_pc;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_5;
      default: imem_rg_tval$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = stage1_rg_stage_input[401:338] ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h8513 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_epoch
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  v__h22604 or
	  MUX_rg_epoch$write_1__SEL_2 or
	  MUX_rg_state$write_1__SEL_6 or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1: rg_epoch$D_IN = v__h22604;
      MUX_rg_epoch$write_1__SEL_2: rg_epoch$D_IN = v__h22604;
      MUX_rg_state$write_1__SEL_6: rg_epoch$D_IN = v__h22604;
      WILL_FIRE_RL_rl_reset_start: rg_epoch$D_IN = 2'd0;
      default: rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2227 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_8 ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h8449 or
	  WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_ret_actions)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h8449;
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[129:66];
      default: rg_next_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = csr_regfile$read_sstatus[18] ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_8 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = MUX_imem_rg_f3$write_1__SEL_1 ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = MUX_imem_rg_f3$write_1__SEL_1 ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_6 or
	  MUX_rg_state$write_1__SEL_7 or
	  MUX_rg_state$write_1__SEL_8 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_6: rg_state$D_IN = 4'd3;
      MUX_rg_state$write_1__SEL_7: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_8: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd9;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd12;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     MUX_rg_trap_instr$write_1__SEL_1 ?
	       stage1_rg_stage_input[263:232] :
	       stage2_rg_stage2[429:398] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap:
	stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ;

  // register stage1_rg_stage_input
  assign stage1_rg_stage_input$D_IN =
	     { stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168],
	       stageD_rg_data[165:96],
	       _theResult____h5191,
	       stageD_rg_data[79:0],
	       _theResult____h5191[6:0],
	       _theResult____h5191[11:7],
	       _theResult____h5191[19:15],
	       _theResult____h5191[24:20],
	       _theResult____h5191[31:27],
	       _theResult____h5191[31:20],
	       _theResult____h5191[14:12],
	       _theResult____h5191[31:27],
	       _theResult____h5191[31:25],
	       decoded_instr_funct10__h25597,
	       _theResult____h5191[31:20],
	       decoded_instr_imm12_S__h25599,
	       decoded_instr_imm13_SB__h25600,
	       _theResult____h5191[31:12],
	       decoded_instr_imm21_UJ__h25602,
	       _theResult____h5191[27:20],
	       _theResult____h5191[26:25] } ;
  assign stage1_rg_stage_input$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2235 &&
	     stageD_rg_full ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset_begin or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_f3$write_1__SEL_1 or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset_begin: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_trap:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = WILL_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       stage1_rg_stage_input[401:338],
	       stage1_rg_stage_input[263:232],
	       IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090,
	       x_out_data_to_stage2_rd__h8511,
	       x_out_data_to_stage2_addr__h8512,
	       x_out_data_to_stage2_val1__h8513,
	       x_out_data_to_stage2_val2__h8514,
	       x_out_data_to_stage2_fval1__h8515,
	       alu_outputs___1_fval2__h9042,
	       x_out_data_to_stage2_fval3__h8517,
	       stage1_rg_stage_input[151:145] == 7'b0000111 ||
	       (stage1_rg_stage_input[151:145] == 7'b1010011 ||
		stage1_rg_stage_input[151:145] == 7'b1000011 ||
		stage1_rg_stage_input[151:145] == 7'b1000111 ||
		stage1_rg_stage_input[151:145] == 7'b1001011 ||
		stage1_rg_stage_input[151:145] == 7'b1001111) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd0) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd1) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd2) &&
	       (stage1_rg_stage_input[104:98] != 7'h61 ||
		stage1_rg_stage_input[134:130] != 5'd3) &&
	       stage1_rg_stage_input[104:98] != 7'h71 &&
	       stage1_rg_stage_input[104:98] != 7'h51 &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd2) &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd3) &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd0) &&
	       (stage1_rg_stage_input[104:98] != 7'h60 ||
		stage1_rg_stage_input[134:130] != 5'd1) &&
	       stage1_rg_stage_input[104:98] != 7'h70 &&
	       stage1_rg_stage_input[104:98] != 7'h50,
	       stage1_rg_stage_input[151:145] == 7'b0100111,
	       stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d2162,
	       x_out_data_to_stage2_rounding_mode__h8521 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 or
	  MUX_imem_rg_f3$write_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN =
	    IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2;
    MUX_imem_rg_f3$write_1__SEL_1: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[493:398],
	       stage2_rg_stage2[495:494],
	       stage2_rg_stage2[397:395] == 3'd0 ||
	       IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d171,
	       x_out_data_to_stage3_rd__h7452,
	       x_out_data_to_stage3_rd_val__h7453,
	       stage2_rg_stage2[397:395] != 3'd0 &&
	       stage2_rg_stage2[397:395] != 3'd1 &&
	       stage2_rg_stage2[397:395] != 3'd4 &&
	       stage2_rg_stage2[397:395] != 3'd2 &&
	       stage2_rg_stage2[397:395] != 3'd3,
	       stage2_rg_stage2[397:395] != 3'd0 &&
	       CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q25,
	       x_out_data_to_stage3_fpr_flags__h7456,
	       x_out_data_to_stage3_frd_val__h7457 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd2 ;

  // register stageD_rg_data
  assign stageD_rg_data$D_IN =
	     { imem_rg_pc,
	       stageF_rg_epoch,
	       stageF_rg_priv,
	       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1838,
	       near_mem$imem_exc,
	       near_mem$imem_exc_code,
	       imem_rg_tval,
	       d_instr__h21292,
	       stageF_branch_predictor$predict_rsp } ;
  assign stageD_rg_data$EN = MUX_imem_rg_f3$write_1__SEL_2 ;

  // register stageD_rg_full
  always@(WILL_FIRE_RL_stageD_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageD_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stageD_rl_reset: stageD_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageD_rg_full$D_IN = MUX_stageD_rg_full$write_1__VAL_2;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap:
	stageD_rg_full$D_IN = 1'd0;
    default: stageD_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageD_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stageD_rl_reset ;

  // register stageF_rg_epoch
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  epoch__h26556 or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  v__h22604 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_epoch$D_IN = 2'd0;
    MUX_imem_rg_f3$write_1__SEL_2: stageF_rg_epoch$D_IN = epoch__h26556;
    MUX_imem_rg_f3$write_1__SEL_1: stageF_rg_epoch$D_IN = v__h22604;
    WILL_FIRE_RL_rl_trap_fetch: stageF_rg_epoch$D_IN = v__h22604;
    WILL_FIRE_RL_rl_WFI_resume: stageF_rg_epoch$D_IN = v__h22604;
    WILL_FIRE_RL_rl_finish_SFENCE_VMA: stageF_rg_epoch$D_IN = v__h22604;
    WILL_FIRE_RL_rl_finish_FENCE: stageF_rg_epoch$D_IN = v__h22604;
    WILL_FIRE_RL_rl_finish_FENCE_I: stageF_rg_epoch$D_IN = v__h22604;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_epoch$D_IN = v__h22604;
    default: stageF_rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign stageF_rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_stageF_rl_reset ;

  // register stageF_rg_full
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  stageF_rg_full or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe: stageF_rg_full$D_IN = stageF_rg_full;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_full$D_IN = 1'd1;
    default: stageF_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageF_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stageF_rl_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register stageF_rg_priv
  assign stageF_rg_priv$D_IN = rg_cur_priv ;
  assign stageF_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h29109 == 64'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996)
  begin
    case (IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996)
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd9: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[67:64] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[131:68] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[63:0] ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$ma_update_fcsr_fflags_flags = stage3_rg_stage3[68:64] ;
  assign csr_regfile$ma_update_mstatus_fs_fs = 2'h3 ;
  assign csr_regfile$mav_csr_write_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h28436 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign csr_regfile$EN_ma_update_fcsr_fflags =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     stage3_rg_stage3[70] ;
  assign csr_regfile$EN_ma_update_mstatus_fs =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     (stage3_rg_stage3[70] || stage3_rg_stage3[69]) ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_redirects
  assign f_redirects$D_IN =
	     { v__h22604,
	       stage1_rg_stage_input[401:338],
	       x_out_next_pc__h8449 } ;
  assign f_redirects$ENQ = MUX_rg_epoch$write_1__SEL_2 ;
  assign f_redirects$DEQ =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 &&
	     f_redirects$EMPTY_N ;
  assign f_redirects$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile_RDY_server_reset_request_put__938__ETC___d1956 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule fpr_regfile
  assign fpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign fpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign fpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  assign fpr_regfile$read_rs3_rs3 = stage1_rg_stage_input[129:125] ;
  assign fpr_regfile$write_rd_rd = stage3_rg_stage3[139:135] ;
  assign fpr_regfile$write_rd_rd_val = stage3_rg_stage3[63:0] ;
  assign fpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign fpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign fpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     stage3_rg_stage3[69] ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[139:135] ;
  assign gpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[134:130] ;
  assign gpr_regfile$write_rd_rd =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_2) ?
	       rg_trap_instr[11:7] :
	       stage3_rg_stage3[139:135] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_2) ?
	       csr_regfile$read_csr[63:0] :
	       stage3_rg_stage3[134:71] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[140] &&
	     !stage3_rg_stage3[69] ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bid = dmem_master_bid ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rid = dmem_master_rid ;
  assign near_mem$dmem_master_rlast = dmem_master_rlast ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h8512 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h8513[6:0] ;
  assign near_mem$dmem_req_f3 = MUX_rg_trap_instr$write_1__VAL_1[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090)
  begin
    case (IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1267 or
	  alu_outputs___1_fval2__h9042 or branch_target__h8636)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0100111:
	  near_mem$dmem_req_store_value = alu_outputs___1_fval2__h9042;
      7'b1100011: near_mem$dmem_req_store_value = branch_target__h8636;
      default: near_mem$dmem_req_store_value =
		   IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1267;
    endcase
  end
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_2__VAL_4 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  MUX_near_mem$imem_req_2__VAL_5 or MUX_near_mem$imem_req_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      MUX_imem_rg_f3$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_imem_rg_tval$write_1__VAL_5;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_4;
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      default: near_mem$imem_req_addr =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_mstatus_MXR or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_mstatus_MXR = rg_mstatus_MXR;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_priv =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_f3$write_1__SEL_2 ||
	      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap_fetch ||
	      MUX_near_mem$imem_req_1__SEL_6) ?
	       rg_cur_priv :
	       imem_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  csr_regfile$read_sstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_sstatus_SUM or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_sstatus_SUM)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$read_sstatus[18];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_sstatus_SUM = rg_sstatus_SUM;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1 ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	     (IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 ==
	      3'd1 ||
	      IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 ==
	      3'd2 ||
	      IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_11 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_12 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_13 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_fbox
  assign stage2_fbox$req_f7 = MUX_rg_trap_instr$write_1__VAL_1[31:25] ;
  assign stage2_fbox$req_opcode = MUX_rg_trap_instr$write_1__VAL_1[6:0] ;
  assign stage2_fbox$req_rm = x_out_data_to_stage2_rounding_mode__h8521 ;
  assign stage2_fbox$req_rs2 = MUX_rg_trap_instr$write_1__VAL_1[24:20] ;
  assign stage2_fbox$req_v1 =
	     stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d2162 ?
	       x_out_data_to_stage2_val1__h8513 :
	       x_out_data_to_stage2_fval1__h8515 ;
  assign stage2_fbox$req_v2 = alu_outputs___1_fval2__h9042 ;
  assign stage2_fbox$req_v3 = x_out_data_to_stage2_fval3__h8517 ;
  assign stage2_fbox$EN_server_reset_request_put =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_fbox$EN_server_reset_response_get =
	     CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_fbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 ==
	     3'd5 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = MUX_rg_trap_instr$write_1__VAL_1[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 =
	     !MUX_rg_trap_instr$write_1__VAL_1[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h8513 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h8514 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageD_f_reset_reqs
  assign stageD_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageD_f_reset_reqs$DEQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageD_f_reset_rsps
  assign stageD_f_reset_rsps$ENQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stageD_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageF_branch_predictor
  assign stageF_branch_predictor$predict_req_m_old_pc =
	     MUX_imem_rg_f3$write_1__SEL_2 ?
	       MUX_stageF_branch_predictor$predict_req_2__VAL_2 :
	       65'h0AAAAAAAAAAAAAAAA ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  next_pc__h26558 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  x_out_next_pc__h8449 or MUX_imem_rg_pc$write_1__SEL_4 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  stageF_branch_predictor$predict_req_pc = soc_map$m_pc_reset_value;
      MUX_imem_rg_f3$write_1__SEL_2:
	  stageF_branch_predictor$predict_req_pc = next_pc__h26558;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  stageF_branch_predictor$predict_req_pc = x_out_next_pc__h8449;
      MUX_imem_rg_pc$write_1__SEL_4:
	  stageF_branch_predictor$predict_req_pc = rg_next_pc;
      default: stageF_branch_predictor$predict_req_pc =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign stageF_branch_predictor$EN_reset = 1'b0 ;
  assign stageF_branch_predictor$EN_predict_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // submodule stageF_f_reset_reqs
  assign stageF_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageF_f_reset_reqs$DEQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageF_f_reset_rsps
  assign stageF_f_reset_rsps$ENQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stageF_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 =
	     next_pc__h8433 == stage1_rg_stage_input[215:152] ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2035 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2033 ?
	       IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	       4'd0 &&
	       IF_NOT_stage1_rg_stage_input_09_BITS_335_TO_33_ETC___d2018 :
	       stage1_rg_full ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2038 =
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2035 &&
	     stageD_rg_full ||
	     !stageF_rg_full ||
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834 ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2235 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2033 ?
	       IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	       4'd0 ||
	       IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 ||
	       !stageF_rg_full ||
	       near_mem$imem_valid &&
	       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 :
	       !stage1_rg_full ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 =
	     (IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2235 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2304 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2033 ?
	       IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	       4'd0 &&
	       !IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 &&
	       stageF_rg_full &&
	       (!near_mem$imem_valid ||
		NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834) :
	       stage1_rg_full ;
  assign IF_NOT_csr_regfile_read_mstatus__4_BITS_14_TO__ETC___d978 =
	     NOT_csr_regfile_read_mstatus__4_BITS_14_TO_13__ETC___d895 ?
	       4'd1 :
	       4'd12 ;
  assign IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d268 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[394:390] == 5'd0) ? 2'd0 : 2'd1) :
	       2'd0 ;
  assign IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d288 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       (stage2_rg_stage2[5] ? 2'd1 : 2'd0) :
	       2'd0 ;
  assign IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 =
	     IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 ||
	     !stageF_rg_full ||
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 ;
  assign IF_NOT_stage1_rg_stage_input_09_BITS_112_TO_11_ETC___d922 =
	     NOT_stage1_rg_stage_input_09_BITS_112_TO_110_5_ETC___d435 ?
	       4'd12 :
	       4'd1 ;
  assign IF_NOT_stage1_rg_stage_input_09_BITS_335_TO_33_ETC___d2018 =
	     !IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 &&
	     stageF_rg_full &&
	     (!near_mem$imem_valid ||
	      NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834) ;
  assign IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 =
	     (!stage2_rg_full || stage2_rg_stage2[397:395] == 3'd0) ?
	       2'd0 :
	       CASE_stage2_rg_stage2_BITS_397_TO_395_1_IF_NOT_ETC__q5 ;
  assign IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d318 =
	     x_out_fbypass_rd__h8125 == stage1_rg_stage_input[139:135] ;
  assign IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d319 =
	     x_out_fbypass_rd__h8125 == stage1_rg_stage_input[134:130] ;
  assign IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d322 =
	     x_out_fbypass_rd__h8125 == stage1_rg_stage_input[129:125] ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_343_BITS_ETC___d2396 =
	     csr_regfile$read_csr[63:0] | rs1_val__h29109 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1674 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b001) ?
	       instr__h20786 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b101) ?
		  instr__h20937 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1675 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h20587 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1674 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1676 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[79:77] == 3'b001 &&
	      csr_regfile$read_misa[3]) ?
	       instr__h20434 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1675 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1677 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h19395 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1676 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1678 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b011) ?
	       instr__h19244 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1677 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1679 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h19045 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1678 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1681 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:76] == 4'b1001 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h18796 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
		 stageD_rg_data[75:71] != 5'd0 &&
		 stageD_rg_data[79:77] == 3'b011) ?
		  instr__h18892 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1679) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1683 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100111 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h18500 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100111 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h18638 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1681) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1685 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h18226 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h18362 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1683) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1687 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b11) ?
	       instr__h17954 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b10) ?
		  instr__h18090 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1685) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1688 =
	     (csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1501 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h17859 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1687 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1689 =
	     (csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1495 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h17740 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1688 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1691 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b01 &&
	      imm6__h15853 != 6'd0) ?
	       instr__h17445 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b100 &&
		 stageD_rg_data[75:74] == 2'b10) ?
		  instr__h17562 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1689) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1692 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b0 &&
	      imm6__h15853 != 6'd0) ?
	       instr__h17256 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1691 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1693 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h15853 != 6'd0) ?
	       instr__h17067 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1692 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1695 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] == 5'd2 &&
	      nzimm10__h16522 != 10'd0) ?
	       instr__h16726 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b0 &&
		 nzimm10__h16737 != 10'd0) ?
		  instr__h16898 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1693) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1697 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h15853 != 6'd0 ||
	      csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      imm6__h15853 == 6'd0) ?
	       instr__h16244 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b001 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h16471 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1695) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1698 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[75:71] != 5'd2 &&
	      imm6__h15853 != 6'd0) ?
	       instr__h16115 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1697 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1700 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h15593 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b010 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h15931 :
		  IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1698) ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1701 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h15276 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1700 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1702 =
	     (csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1501 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h15211 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1701 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1703 =
	     (csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1495 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h15095 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1702 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1704 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h14642 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1703 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1705 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h14413 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1704 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1706 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h14218 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1705 ;
  assign IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1707 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h14026 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1706 ;
  assign IF_near_mem_dmem_valid__33_THEN_IF_near_mem_dm_ETC___d136 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_E_ETC___d966 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      stage1_rg_stage_input[87:76] == 12'b000100000010) ?
	       4'd9 :
	       (rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_EQ_0_ETC___d964 ?
		  4'd11 :
		  4'd12) ;
  assign IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d928 =
	     ((stage1_rg_stage_input[112:110] == 3'b0 ||
	       stage1_rg_stage_input[112:110] == 3'b100 ||
	       stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101 ||
	       stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b110 ||
	       stage1_rg_stage_input[112:110] == 3'b011) &&
	      (stage1_rg_stage_input[151:145] != 7'b0000111 ||
	       csr_regfile$read_mstatus[14:13] != 2'h0)) ?
	       4'd1 :
	       4'd12 ;
  assign IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d932 =
	     ((stage1_rg_stage_input[112:110] == 3'b0 ||
	       stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b011) &&
	      (stage1_rg_stage_input[151:145] != 7'b0100111 ||
	       csr_regfile$read_mstatus[14:13] != 2'h0)) ?
	       4'd1 :
	       4'd12 ;
  assign IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d1157 =
	     rs1_val_bypassed__h4833 +
	     SEXT_stage1_rg_stage_input_09_BITS_87_TO_76_45___d1156 ;
  assign IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388 =
	     rs1_val_bypassed__h4833 == rs2_val__h8632 ;
  assign IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390 =
	     (rs1_val_bypassed__h4833 ^ 64'h8000000000000000) <
	     (rs2_val__h8632 ^ 64'h8000000000000000) ;
  assign IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392 =
	     rs1_val_bypassed__h4833 < rs2_val__h8632 ;
  assign IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC__q22 =
	     IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d1157[31:0] ;
  assign IF_stage1_rg_stage_input_09_BITS_144_TO_140_35_ETC___d970 =
	     stage1_rg_stage_input_09_BITS_144_TO_140_35_EQ_ETC___d943 ?
	       4'd7 :
	       ((stage1_rg_stage_input[144:140] == 5'd0 &&
		 stage1_rg_stage_input[139:135] == 5'd0) ?
		  IF_stage1_rg_stage_input_09_BITS_87_TO_76_45_E_ETC___d968 :
		  4'd12) ;
  assign IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1257 =
	     ((stage1_rg_stage_input[151:145] == 7'b0010011 ||
	       stage1_rg_stage_input[151:145] == 7'b0110011) &&
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101)) ?
	       alu_outputs___1_val1__h8808 :
	       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 ;
  assign IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1258 =
	     ((stage1_rg_stage_input[151:145] == 7'b0110011 ||
	       stage1_rg_stage_input[151:145] == 7'b0111011) &&
	      stage1_rg_stage_input[104:98] == 7'b0000001) ?
	       rs1_val_bypassed__h4833 :
	       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1257 ;
  assign IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1267 =
	     ((stage1_rg_stage_input[151:145] == 7'b0110011 ||
	       stage1_rg_stage_input[151:145] == 7'b0111011) &&
	      stage1_rg_stage_input[104:98] == 7'b0000001) ?
	       rs2_val__h8632 :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 ;
  assign IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d717 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'b0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 ||
	       (stage1_rg_stage_input[151:145] != 7'b0110011 ||
		stage1_rg_stage_input[104:98] != 7'b0000001) &&
	       (stage1_rg_stage_input[151:145] != 7'b0111011 ||
		stage1_rg_stage_input[104:98] != 7'b0000001) &&
	       (stage1_rg_stage_input[151:145] != 7'b0010011 &&
		stage1_rg_stage_input[151:145] != 7'b0110011 ||
		stage1_rg_stage_input[112:110] != 3'b001 &&
		stage1_rg_stage_input[112:110] != 3'b101) &&
	       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d714 ;
  assign IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d728 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       stage1_rg_stage_input[112:110] != 3'b0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111 ||
	       IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       stage1_rg_stage_input[151:145] != 7'b1100111 ;
  assign IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d910 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'b0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 :
	       stage1_rg_stage_input[151:145] != 7'b1101111 &&
	       stage1_rg_stage_input[151:145] != 7'b1100111 &&
	       (stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d748 ||
		IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d907) ;
  assign IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d912 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       (stage1_rg_stage_input[112:110] == 3'b0 ||
		stage1_rg_stage_input[112:110] == 3'b001 ||
		stage1_rg_stage_input[112:110] == 3'b100 ||
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110 ||
		stage1_rg_stage_input[112:110] == 3'b111) &&
	       IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 :
	       stage1_rg_stage_input[151:145] == 7'b1101111 ||
	       stage1_rg_stage_input[151:145] == 7'b1100111 ;
  assign IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 =
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ?
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20 :
	       3'd0 ;
  assign IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 =
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ?
	       (stage1_rg_stage_input[332] ?
		  4'd12 :
		  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d993) :
	       4'd0 ;
  assign IF_stage1_rg_stage_input_09_BIT_333_148_THEN_s_ETC___d1151 =
	     stage1_rg_stage_input[333] ?
	       next_pc__h12266 :
	       next_pc___1__h12269 ;
  assign IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140 =
	     stage2_fbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_mbox_valid__37_THEN_2_ELSE_1___d138 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q3 :
	       2'd0 ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2013 =
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325 ||
	     stage1_rg_stage_input[332] ||
	     IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d717 &&
	     IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d728 ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2100 =
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	     stage2_rg_stage2[397:395] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q25 ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2102 =
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	     (stage2_rg_stage2[397:395] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q26) ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q4 :
	       2'd0 ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d313 =
	     x_out_bypass_rd__h7997 == stage1_rg_stage_input[139:135] ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d315 =
	     x_out_bypass_rd__h7997 == stage1_rg_stage_input[134:130] ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325 =
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 ==
	     2'd1 &&
	     (IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d313 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d315) ||
	     IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 ==
	     2'd1 &&
	     (IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d318 ||
	      IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d319 ||
	      IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d322) ;
  assign IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915 =
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325 ||
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d910 ||
	      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d912) ;
  assign NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 =
	     cur_verbosity__h3117 > 4'd1 ;
  assign NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005 =
	     NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349 &&
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d910 ||
	      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d912) ;
  assign NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349 =
	     (IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 !=
	      2'd1 ||
	      !IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d313 &&
	      !IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d315) &&
	     (IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 !=
	      2'd1 ||
	      !IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d318 &&
	      !IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d319 &&
	      !IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d322) ;
  assign NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 =
	     NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349 &&
	     (stage1_rg_stage_input[332] ||
	      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d717 &&
	      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d728) ;
  assign NOT_cfg_verbosity_read__8_ULE_1_990___d1991 = cfg_verbosity > 4'd1 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2031 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d2028) &&
	     (IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd2 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd0) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2033 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2031 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2106 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      !stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	     (IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd2 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd0) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2111 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2013 &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2111 &&
	     (IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd2 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	      2'd0) &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	     NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2227 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	     !IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2318 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !stage1_rg_stage_input[332] &&
	     (IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d910 ||
	      IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d912) ;
  assign NOT_csr_regfile_read_mstatus__4_BITS_14_TO_13__ETC___d895 =
	     csr_regfile$read_mstatus[14:13] != 2'h0 &&
	     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 &&
	     ((stage1_rg_stage_input[112:110] == 3'b111) ?
		csr_regfile$read_frm != 3'b101 &&
		csr_regfile$read_frm != 3'b110 &&
		csr_regfile$read_frm != 3'b111 :
		stage1_rg_stage_input[112:110] != 3'b101 &&
		stage1_rg_stage_input[112:110] != 3'b110) ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1975 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2425 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_i_response_get ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d2437 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_response_get ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1832 =
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1805 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] != 2'b11) &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] == 2'b11) ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1832 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_rg_cur_priv_3_EQ_0b11_37_384_AND_NOT_rg_cu_ETC___d1390 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[104:98] != 7'b0001001) &&
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     stage1_rg_stage_input[139:135] == 5'd0 &&
	     stage1_rg_stage_input[87:76] == 12'b000000000001 ;
  assign NOT_stage1_rg_full_08_19_OR_stage1_rg_stage_in_ETC___d2059 =
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2013 ||
	      IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	      4'd0) &&
	     (!stage1_rg_full ||
	      !stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) ;
  assign NOT_stage1_rg_full_08_19_OR_stage1_rg_stage_in_ETC___d2061 =
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2013) &&
	     (!stage1_rg_full ||
	      !stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) ;
  assign NOT_stage1_rg_stage_input_09_BITS_112_TO_110_5_ETC___d435 =
	     (stage1_rg_stage_input[112:110] != 3'b0 ||
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[262]) &&
	     (stage1_rg_stage_input[112:110] != 3'b0 ||
	      stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[262]) &&
	     stage1_rg_stage_input[112:110] != 3'b010 &&
	     stage1_rg_stage_input[112:110] != 3'b011 &&
	     stage1_rg_stage_input[112:110] != 3'b100 &&
	     stage1_rg_stage_input[112:110] != 3'b110 &&
	     stage1_rg_stage_input[112:110] != 3'b111 ;
  assign NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d1069 =
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd1 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd2 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd3 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd4 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd5 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd6 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd7 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd8 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd9 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd10 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd11 ;
  assign NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d2458 =
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005) &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 ||
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	     NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 ;
  assign NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d2462 =
	     NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d2458 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731) &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign SEXT_stage1_rg_stage_input_09_BITS_87_TO_76_45___d1156 =
	     { {52{stage1_rg_stage_input_BITS_87_TO_76__q21[11]}},
	       stage1_rg_stage_input_BITS_87_TO_76__q21 } ;
  assign SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1485 =
	     { {9{offset__h14589[11]}}, offset__h14589 } ;
  assign SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510 =
	     { {4{offset__h15220[8]}}, offset__h15220 } ;
  assign _theResult_____1_fst__h10306 =
	     (stage1_rg_stage_input[112:110] == 3'b0 &&
	      stage1_rg_stage_input[151:145] == 7'b0110011 &&
	      stage1_rg_stage_input[262]) ?
	       rd_val___1__h10302 :
	       _theResult_____1_fst__h10313 ;
  assign _theResult_____1_fst__h10341 =
	     rs1_val_bypassed__h4833 & _theResult___snd__h12931 ;
  assign _theResult____h27960 =
	     (delta_CPI_instrs__h27959 == 64'd0) ?
	       delta_CPI_instrs___1__h27995 :
	       delta_CPI_instrs__h27959 ;
  assign _theResult____h5191 = x_out_data_to_stage1_instr__h13668 ;
  assign _theResult___fst__h10446 =
	     (stage1_rg_stage_input[112:110] == 3'b001 &&
	      !stage1_rg_stage_input[257]) ?
	       rd_val___1__h12991 :
	       _theResult___fst__h10453 ;
  assign _theResult___fst__h10453 =
	     stage1_rg_stage_input[262] ?
	       rd_val___1__h13073 :
	       rd_val___1__h13044 ;
  assign _theResult___fst__h10548 =
	     { {32{rs1_val_bypassed833_BITS_31_TO_0_SRL_rs2_val63_ETC__q8[31]}},
	       rs1_val_bypassed833_BITS_31_TO_0_SRL_rs2_val63_ETC__q8 } ;
  assign _theResult___fst__h21324 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h21326 :
	       _theResult___fst__h21352 ;
  assign _theResult___fst__h21352 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[17:16] != 2'b11) ?
	       instr_out___1__h21354 :
	       near_mem$imem_instr ;
  assign _theResult___snd__h12931 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       SEXT_stage1_rg_stage_input_09_BITS_87_TO_76_45___d1156 :
	       rs2_val__h8632 ;
  assign _theResult___snd_fst_rd_val__h8117 =
	     stage2_rg_stage2[5] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[197:134] ;
  assign _theResult___snd_snd_rd_val__h7428 =
	     stage2_rg_stage2[5] ?
	       stage2_rg_stage2[325:262] :
	       stage2_fbox$word_fst ;
  assign alu_outputs___1_addr__h8657 =
	     IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 ?
	       branch_target__h8636 :
	       IF_stage1_rg_stage_input_09_BIT_333_148_THEN_s_ETC___d1151 ;
  assign alu_outputs___1_addr__h8685 =
	     stage1_rg_stage_input[401:338] +
	     { {43{stage1_rg_stage_input_BITS_30_TO_10__q2[20]}},
	       stage1_rg_stage_input_BITS_30_TO_10__q2 } ;
  assign alu_outputs___1_addr__h8718 =
	     { IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d1157[63:1],
	       1'd0 } ;
  assign alu_outputs___1_addr__h9038 =
	     rs1_val_bypassed__h4833 +
	     { {52{stage1_rg_stage_input_BITS_75_TO_64__q6[11]}},
	       stage1_rg_stage_input_BITS_75_TO_64__q6 } ;
  assign alu_outputs___1_exc_code__h9319 =
	     (stage1_rg_stage_input[112:110] == 3'b0) ?
	       (stage1_rg_stage_input_09_BITS_144_TO_140_35_EQ_ETC___d943 ?
		  4'd2 :
		  ((stage1_rg_stage_input[144:140] == 5'd0 &&
		    stage1_rg_stage_input[139:135] == 5'd0) ?
		     CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_fval2__h9042 =
	     (IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 ==
	      2'd2 &&
	      IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d319) ?
	       x_out_fbypass_rd_val__h8126 :
	       rd_val__h8383 ;
  assign alu_outputs___1_val1__h8808 =
	     (stage1_rg_stage_input[112:110] == 3'b001) ?
	       rd_val__h12828 :
	       (stage1_rg_stage_input[262] ?
		  rd_val__h12901 :
		  rd_val__h12879) ;
  assign alu_outputs___1_val1__h8853 =
	     (stage1_rg_stage_input[112:110] == 3'b0 &&
	      (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	       !stage1_rg_stage_input[262])) ?
	       rd_val___1__h10294 :
	       _theResult_____1_fst__h10306 ;
  assign alu_outputs___1_val1__h8883 =
	     (stage1_rg_stage_input[112:110] == 3'b0) ?
	       rd_val___1__h12960 :
	       _theResult___fst__h10446 ;
  assign alu_outputs___1_val1__h8936 = { {32{v32__h8925[31]}}, v32__h8925 } ;
  assign alu_outputs___1_val1__h8959 =
	     stage1_rg_stage_input[401:338] + alu_outputs___1_val1__h8936 ;
  assign alu_outputs___1_val1__h9323 =
	     stage1_rg_stage_input[112] ?
	       { 59'd0, stage1_rg_stage_input[139:135] } :
	       rs1_val_bypassed__h4833 ;
  assign alu_outputs___1_val1__h9351 =
	     { 57'd0, stage1_rg_stage_input[104:98] } ;
  assign branch_target__h8636 =
	     stage1_rg_stage_input[401:338] +
	     { {51{stage1_rg_stage_input_BITS_63_TO_51__q1[12]}},
	       stage1_rg_stage_input_BITS_63_TO_51__q1 } ;
  assign cpi__h27962 = x__h27961 / 64'd10 ;
  assign cpifrac__h27963 = x__h27961 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_request_put__941__ETC___d1953 =
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stageF_f_reset_reqs$FULL_N &&
	     stageD_f_reset_reqs$FULL_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_3_00_ETC___d2008 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731) ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_3_00_ETC___d2016 =
	     csr_regfile_interrupt_pending_rg_cur_priv_3_00_ETC___d2008 ||
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	     2'd2 &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	     2'd0 ||
	     !stage1_rg_full ||
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2013 ;
  assign csr_regfile_read_csr_mcycle__2_MINUS_rg_start__ETC___d2346 =
	     delta_CPI_cycles__h27958 * 64'd10 ;
  assign csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1495 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1000 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign csr_regfile_read_misa__1_BIT_2_420_AND_stageD__ETC___d1501 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1001 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign csr_regfile_read_mstatus__4_BITS_14_TO_13_6_EQ_ETC___d702 =
	     csr_regfile$read_mstatus[14:13] == 2'h0 ||
	     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11 ||
	     ((stage1_rg_stage_input[112:110] == 3'b111) ?
		csr_regfile$read_frm == 3'b101 ||
		csr_regfile$read_frm == 3'b110 ||
		csr_regfile$read_frm == 3'b111 :
		stage1_rg_stage_input[112:110] == 3'b101 ||
		stage1_rg_stage_input[112:110] == 3'b110) ;
  assign cur_verbosity__h3117 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign d_instr__h21292 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1805 ?
	       instr_out___1__h21294 :
	       _theResult___fst__h21324 ;
  assign data_to_stage2_addr__h8495 = x_out_data_to_stage2_addr__h8512 ;
  assign decoded_instr_funct10__h25597 =
	     { _theResult____h5191[31:25], _theResult____h5191[14:12] } ;
  assign decoded_instr_imm12_S__h25599 =
	     { _theResult____h5191[31:25], _theResult____h5191[11:7] } ;
  assign decoded_instr_imm13_SB__h25600 =
	     { _theResult____h5191[31],
	       _theResult____h5191[7],
	       _theResult____h5191[30:25],
	       _theResult____h5191[11:8],
	       1'b0 } ;
  assign decoded_instr_imm21_UJ__h25602 =
	     { _theResult____h5191[31],
	       _theResult____h5191[19:12],
	       _theResult____h5191[20],
	       _theResult____h5191[30:21],
	       1'b0 } ;
  assign delta_CPI_cycles__h27958 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h27995 = delta_CPI_instrs__h27959 + 64'd1 ;
  assign delta_CPI_instrs__h27959 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign epoch__h26556 =
	     f_redirects$EMPTY_N ?
	       f_redirects$D_OUT[129:128] :
	       stageF_rg_epoch ;
  assign fall_through_pc__h8432 =
	     stage1_rg_stage_input[401:338] +
	     (stage1_rg_stage_input[333] ? 64'd4 : 64'd2) ;
  assign gpr_regfile_RDY_server_reset_request_put__938__ETC___d1956 =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile_RDY_server_reset_request_put__941__ETC___d1953 ;
  assign imm12__h13882 = { 4'd0, offset__h13754 } ;
  assign imm12__h14219 = { 5'd0, offset__h14161 } ;
  assign imm12__h15855 = { {6{imm6__h15853[5]}}, imm6__h15853 } ;
  assign imm12__h16524 = { {2{nzimm10__h16522[9]}}, nzimm10__h16522 } ;
  assign imm12__h16739 = { 2'd0, nzimm10__h16737 } ;
  assign imm12__h16935 = { 6'b0, imm6__h15853 } ;
  assign imm12__h17272 = { 6'b010000, imm6__h15853 } ;
  assign imm12__h18893 = { 3'd0, offset__h18807 } ;
  assign imm12__h19245 = { 4'd0, offset__h19179 } ;
  assign imm20__h15983 = { {14{imm6__h15853[5]}}, imm6__h15853 } ;
  assign imm6__h15853 = { stageD_rg_data[76], stageD_rg_data[70:66] } ;
  assign instr___1__h13704 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h13881 :
	       IF_csr_regfile_read_misa__1_BIT_2_420_AND_stag_ETC___d1707 ;
  assign instr__h13881 =
	     { imm12__h13882, 8'd18, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h14026 =
	     { 4'd0,
	       stageD_rg_data[72:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd18,
	       offset_BITS_4_TO_0___h14150,
	       7'b0100011 } ;
  assign instr__h14218 =
	     { imm12__h14219, rs1__h14220, 3'b010, rd__h14221, 7'b0000011 } ;
  assign instr__h14413 =
	     { 5'd0,
	       stageD_rg_data[69],
	       stageD_rg_data[76],
	       rd__h14221,
	       rs1__h14220,
	       3'b010,
	       offset_BITS_4_TO_0___h14581,
	       7'b0100011 } ;
  assign instr__h14642 =
	     { SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1485[20],
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1485[10:1],
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1485[11],
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1485[19:12],
	       12'd111 } ;
  assign instr__h15095 = { 12'd0, stageD_rg_data[75:71], 15'd103 } ;
  assign instr__h15211 = { 12'd0, stageD_rg_data[75:71], 15'd231 } ;
  assign instr__h15276 =
	     { SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[12],
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[10:5],
	       5'd0,
	       rs1__h14220,
	       3'b0,
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[4:1],
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[11],
	       7'b1100011 } ;
  assign instr__h15593 =
	     { SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[12],
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[10:5],
	       5'd0,
	       rs1__h14220,
	       3'b001,
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[4:1],
	       SEXT_stageD_rg_data_415_BIT_76_432_CONCAT_stag_ETC___d1510[11],
	       7'b1100011 } ;
  assign instr__h15931 =
	     { imm12__h15855, 8'd0, stageD_rg_data[75:71], 7'b0010011 } ;
  assign instr__h16115 =
	     { imm20__h15983, stageD_rg_data[75:71], 7'b0110111 } ;
  assign instr__h16244 =
	     { imm12__h15855,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h16471 =
	     { imm12__h15855,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0011011 } ;
  assign instr__h16726 =
	     { imm12__h16524,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h16898 = { imm12__h16739, 8'd16, rd__h14221, 7'b0010011 } ;
  assign instr__h17067 =
	     { imm12__h16935,
	       stageD_rg_data[75:71],
	       3'b001,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h17256 =
	     { imm12__h16935, rs1__h14220, 3'b101, rs1__h14220, 7'b0010011 } ;
  assign instr__h17445 =
	     { imm12__h17272, rs1__h14220, 3'b101, rs1__h14220, 7'b0010011 } ;
  assign instr__h17562 =
	     { imm12__h15855, rs1__h14220, 3'b111, rs1__h14220, 7'b0010011 } ;
  assign instr__h17740 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       8'd0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h17859 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h17954 =
	     { 7'b0,
	       rd__h14221,
	       rs1__h14220,
	       3'b111,
	       rs1__h14220,
	       7'b0110011 } ;
  assign instr__h18090 =
	     { 7'b0,
	       rd__h14221,
	       rs1__h14220,
	       3'b110,
	       rs1__h14220,
	       7'b0110011 } ;
  assign instr__h18226 =
	     { 7'b0,
	       rd__h14221,
	       rs1__h14220,
	       3'b100,
	       rs1__h14220,
	       7'b0110011 } ;
  assign instr__h18362 =
	     { 7'b0100000,
	       rd__h14221,
	       rs1__h14220,
	       3'b0,
	       rs1__h14220,
	       7'b0110011 } ;
  assign instr__h18500 =
	     { 7'b0,
	       rd__h14221,
	       rs1__h14220,
	       3'b0,
	       rs1__h14220,
	       7'b0111011 } ;
  assign instr__h18638 =
	     { 7'b0100000,
	       rd__h14221,
	       rs1__h14220,
	       3'b0,
	       rs1__h14220,
	       7'b0111011 } ;
  assign instr__h18796 =
	     { 12'b000000000001,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b1110011 } ;
  assign instr__h18892 =
	     { imm12__h18893, 8'd19, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h19045 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h19520,
	       7'b0100011 } ;
  assign instr__h19244 =
	     { imm12__h19245, rs1__h14220, 3'b011, rd__h14221, 7'b0000011 } ;
  assign instr__h19395 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h14221,
	       rs1__h14220,
	       3'b011,
	       offset_BITS_4_TO_0___h19520,
	       7'b0100011 } ;
  assign instr__h20434 =
	     { imm12__h18893, 8'd19, stageD_rg_data[75:71], 7'b0000111 } ;
  assign instr__h20587 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h19520,
	       7'b0100111 } ;
  assign instr__h20786 =
	     { imm12__h19245, rs1__h14220, 3'b011, rd__h14221, 7'b0000111 } ;
  assign instr__h20937 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h14221,
	       rs1__h14220,
	       3'b011,
	       offset_BITS_4_TO_0___h19520,
	       7'b0100111 } ;
  assign instr_out___1__h21294 =
	     { near_mem$imem_instr[15:0], imem_rg_instr_15_0 } ;
  assign instr_out___1__h21326 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign instr_out___1__h21354 = { 16'b0, near_mem$imem_instr[31:16] } ;
  assign near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 =
	     near_mem$imem_pc[63:2] == imem_rg_pc[63:2] ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1838 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1805 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1838 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d1805 =
	     near_mem$imem_pc == imem_rg_pc + 64'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1936 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code != 4'd0 &&
	     near_mem$imem_exc_code != 4'd1 &&
	     near_mem$imem_exc_code != 4'd2 &&
	     near_mem$imem_exc_code != 4'd3 &&
	     near_mem$imem_exc_code != 4'd4 &&
	     near_mem$imem_exc_code != 4'd5 &&
	     near_mem$imem_exc_code != 4'd6 &&
	     near_mem$imem_exc_code != 4'd7 &&
	     near_mem$imem_exc_code != 4'd8 &&
	     near_mem$imem_exc_code != 4'd9 &&
	     near_mem$imem_exc_code != 4'd11 &&
	     near_mem$imem_exc_code != 4'd12 &&
	     near_mem$imem_exc_code != 4'd13 &&
	     near_mem$imem_exc_code != 4'd15 ;
  assign next_pc___1__h12269 = stage1_rg_stage_input[401:338] + 64'd2 ;
  assign next_pc__h12266 = stage1_rg_stage_input[401:338] + 64'd4 ;
  assign next_pc__h26558 =
	     f_redirects$EMPTY_N ?
	       f_redirects$D_OUT[63:0] :
	       stageF_branch_predictor$predict_rsp ;
  assign next_pc__h8433 = x_out_next_pc__h8449 ;
  assign nzimm10__h16522 =
	     { stageD_rg_data[76],
	       stageD_rg_data[68:67],
	       stageD_rg_data[69],
	       stageD_rg_data[66],
	       stageD_rg_data[70],
	       4'b0 } ;
  assign nzimm10__h16737 =
	     { stageD_rg_data[74:71],
	       stageD_rg_data[76:75],
	       stageD_rg_data[69],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h14150 = { stageD_rg_data[75:73], 2'b0 } ;
  assign offset_BITS_4_TO_0___h14581 =
	     { stageD_rg_data[75:74], stageD_rg_data[70], 2'b0 } ;
  assign offset_BITS_4_TO_0___h19520 = { stageD_rg_data[75:74], 3'b0 } ;
  assign offset__h13754 =
	     { stageD_rg_data[67:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:68],
	       2'b0 } ;
  assign offset__h14161 =
	     { stageD_rg_data[69],
	       stageD_rg_data[76:74],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset__h14589 =
	     { stageD_rg_data[76],
	       stageD_rg_data[72],
	       stageD_rg_data[74:73],
	       stageD_rg_data[70],
	       stageD_rg_data[71],
	       stageD_rg_data[66],
	       stageD_rg_data[75],
	       stageD_rg_data[69:67],
	       1'b0 } ;
  assign offset__h15220 =
	     { stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       stageD_rg_data[66],
	       stageD_rg_data[75:74],
	       stageD_rg_data[68:67],
	       1'b0 } ;
  assign offset__h18807 =
	     { stageD_rg_data[68:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       3'b0 } ;
  assign offset__h19179 =
	     { stageD_rg_data[70:69], stageD_rg_data[76:74], 3'b0 } ;
  assign output_stage2___1_data_to_stage3_frd_val__h7357 =
	     stage2_rg_stage2[5] ?
	       ((stage2_rg_stage2[412:410] == 3'b010) ?
		  { 32'hFFFFFFFF, near_mem$dmem_word64[31:0] } :
		  near_mem$dmem_word64) :
	       stage2_rg_stage2[197:134] ;
  assign rd__h14221 = { 2'b01, stageD_rg_data[68:66] } ;
  assign rd_val___1__h10294 =
	     rs1_val_bypassed__h4833 + _theResult___snd__h12931 ;
  assign rd_val___1__h10302 =
	     rs1_val_bypassed__h4833 - _theResult___snd__h12931 ;
  assign rd_val___1__h10309 =
	     ((rs1_val_bypassed__h4833 ^ 64'h8000000000000000) <
	      (_theResult___snd__h12931 ^ 64'h8000000000000000)) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h10316 =
	     (rs1_val_bypassed__h4833 < _theResult___snd__h12931) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h10323 =
	     rs1_val_bypassed__h4833 ^ _theResult___snd__h12931 ;
  assign rd_val___1__h10330 =
	     rs1_val_bypassed__h4833 | _theResult___snd__h12931 ;
  assign rd_val___1__h12960 =
	     { {32{IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC__q22[31]}},
	       IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC__q22 } ;
  assign rd_val___1__h12991 = { {32{x__h12994[31]}}, x__h12994 } ;
  assign rd_val___1__h13044 = { {32{x__h13047[31]}}, x__h13047 } ;
  assign rd_val___1__h13073 = { {32{tmp__h13072[31]}}, tmp__h13072 } ;
  assign rd_val___1__h13125 =
	     { {32{rs1_val_bypassed833_BITS_31_TO_0_PLUS_rs2_val6_ETC__q9[31]}},
	       rs1_val_bypassed833_BITS_31_TO_0_PLUS_rs2_val6_ETC__q9 } ;
  assign rd_val___1__h13173 =
	     { {32{rs1_val_bypassed833_BITS_31_TO_0_MINUS_rs2_val_ETC__q10[31]}},
	       rs1_val_bypassed833_BITS_31_TO_0_MINUS_rs2_val_ETC__q10 } ;
  assign rd_val___1__h13179 = { {32{x__h13182[31]}}, x__h13182 } ;
  assign rd_val___1__h13224 = { {32{x__h13227[31]}}, x__h13227 } ;
  assign rd_val__h12828 = rs1_val_bypassed__h4833 << shamt__h8793 ;
  assign rd_val__h12879 = rs1_val_bypassed__h4833 >> shamt__h8793 ;
  assign rd_val__h12901 =
	     rs1_val_bypassed__h4833 >> shamt__h8793 |
	     ~(64'hFFFFFFFFFFFFFFFF >> shamt__h8793) &
	     {64{rs1_val_bypassed__h4833[63]}} ;
  assign rd_val__h8310 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d374) ?
	       stage3_rg_stage3[134:71] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h8335 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d382) ?
	       stage3_rg_stage3[134:71] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h8360 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d374) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs1 ;
  assign rd_val__h8383 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d382) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs2 ;
  assign rd_val__h8409 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[140] &&
	      stage3_rg_stage3[139:135] == stage1_rg_stage_input[129:125]) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs3 ;
  assign rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_EQ_0_ETC___d1375 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ||
	     stage1_rg_stage_input[144:140] != 5'd0 ||
	     stage1_rg_stage_input[139:135] != 5'd0 ||
	     stage1_rg_stage_input[87:76] != 12'b0 &&
	     stage1_rg_stage_input[87:76] != 12'b000000000001 ;
  assign rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_EQ_0_ETC___d964 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     stage1_rg_stage_input[87:76] == 12'b000100000101 ;
  assign rg_state_2_EQ_12_9_AND_csr_regfile_wfi_resume__ETC___d2448 =
	     rg_state == 4'd12 && csr_regfile$wfi_resume &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 =
	     rg_state == 4'd3 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2318 &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 ==
	     2'd0 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	     NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 ;
  assign rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2421 =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	     4'd6 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2433 =
	     rg_state_2_EQ_3_047_AND_NOT_csr_regfile_interr_ETC___d2322 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	     4'd5 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign rg_state_2_EQ_3_047_AND_stage3_rg_full_3_OR_NO_ETC___d2057 =
	     rg_state == 4'd3 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd0 ||
	      stage1_rg_full ||
	      stageD_rg_full ||
	      stageF_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd3) &&
	     stage3_rg_full_3_OR_NOT_IF_stage2_rg_full_09_T_ETC___d2055 ;
  assign rg_state_2_EQ_3_047_AND_stage3_rg_full_3_OR_NO_ETC___d2065 =
	     rg_state_2_EQ_3_047_AND_stage3_rg_full_3_OR_NO_ETC___d2057 &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      NOT_stage1_rg_full_08_19_OR_stage1_rg_stage_in_ETC___d2059 ||
	      NOT_stage1_rg_full_08_19_OR_stage1_rg_stage_in_ETC___d2061 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign rg_state_2_EQ_8_404_AND_NOT_stageF_rg_full_823_ETC___d2405 =
	     rg_state == 4'd8 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840) ;
  assign rg_trap_info_332_BITS_131_TO_68_333_EQ_csr_reg_ETC___d2342 =
	     rg_trap_info[131:68] == csr_regfile$csr_trap_actions[193:130] ;
  assign rm__h9474 = x_out_data_to_stage2_rounding_mode__h8521 ;
  assign rs1__h14220 = { 2'b01, stageD_rg_data[73:71] } ;
  assign rs1_val__h28436 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 59'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed833_BITS_31_TO_0_MINUS_rs2_val_ETC__q10 =
	     rs1_val_bypassed__h4833[31:0] - rs2_val__h8632[31:0] ;
  assign rs1_val_bypassed833_BITS_31_TO_0_PLUS_rs2_val6_ETC__q9 =
	     rs1_val_bypassed__h4833[31:0] + rs2_val__h8632[31:0] ;
  assign rs1_val_bypassed833_BITS_31_TO_0_SRL_rs2_val63_ETC__q8 =
	     rs1_val_bypassed__h4833[31:0] >> rs2_val__h8632[4:0] |
	     ~(32'hFFFFFFFF >> rs2_val__h8632[4:0]) &
	     {32{rs1_val_bypassed833_BITS_31_TO_0__q7[31]}} ;
  assign rs1_val_bypassed833_BITS_31_TO_0__q7 =
	     rs1_val_bypassed__h4833[31:0] ;
  assign rs1_val_bypassed__h4833 =
	     (stage1_rg_stage_input[139:135] == 5'd0) ? 64'd0 : val__h8312 ;
  assign rs2_val__h8632 =
	     (stage1_rg_stage_input[134:130] == 5'd0) ? 64'd0 : val__h8337 ;
  assign shamt__h8793 =
	     (stage1_rg_stage_input[151:145] == 7'b0010011) ?
	       stage1_rg_stage_input[81:76] :
	       rs2_val__h8632[5:0] ;
  assign stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d1123 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	     3'd0 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	     3'd1 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	     3'd2 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	     3'd3 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	     3'd4 ;
  assign stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918 =
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) ;
  assign stage1_rg_stage_input_09_BITS_112_TO_110_53_EQ_ETC___d755 =
	     stage1_rg_stage_input[112:110] == 3'b0 &&
	     (stage1_rg_stage_input[151:145] != 7'b0110011 ||
	      !stage1_rg_stage_input[262]) ||
	     stage1_rg_stage_input[112:110] == 3'b0 &&
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[262] ||
	     stage1_rg_stage_input[112:110] == 3'b010 ||
	     stage1_rg_stage_input[112:110] == 3'b011 ||
	     stage1_rg_stage_input[112:110] == 3'b100 ||
	     stage1_rg_stage_input[112:110] == 3'b110 ||
	     stage1_rg_stage_input[112:110] == 3'b111 ;
  assign stage1_rg_stage_input_09_BITS_144_TO_140_35_EQ_ETC___d943 =
	     stage1_rg_stage_input[144:140] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[104:98] == 7'b0001001 ;
  assign stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d2162 =
	     stage1_rg_stage_input[151:145] == 7'b1010011 &&
	     (stage1_rg_stage_input[104:98] == 7'h69 &&
	      (stage1_rg_stage_input[134:130] == 5'd0 ||
	       stage1_rg_stage_input[134:130] == 5'd1 ||
	       stage1_rg_stage_input[134:130] == 5'd2 ||
	       stage1_rg_stage_input[134:130] == 5'd3) ||
	      stage1_rg_stage_input[104:98] == 7'h79 ||
	      stage1_rg_stage_input[104:98] == 7'h68 &&
	      (stage1_rg_stage_input[134:130] == 5'd0 ||
	       stage1_rg_stage_input[134:130] == 5'd1 ||
	       stage1_rg_stage_input[134:130] == 5'd2 ||
	       stage1_rg_stage_input[134:130] == 5'd3) ||
	      stage1_rg_stage_input[104:98] == 7'h78) ;
  assign stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d748 =
	     stage1_rg_stage_input[151:145] == 7'b0110011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ||
	     stage1_rg_stage_input[151:145] == 7'b0111011 &&
	     stage1_rg_stage_input[104:98] == 7'b0000001 ||
	     (stage1_rg_stage_input[151:145] == 7'b0010011 ||
	      stage1_rg_stage_input[151:145] == 7'b0110011) &&
	     (stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101) ;
  assign stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d1344 =
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	     NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd0 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd1 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd2 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd3 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd4 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd5 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd6 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd7 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd8 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd9 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd10 &&
	     IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 !=
	     4'd11 ;
  assign stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d2028 =
	     (stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2013 ||
	      IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 ==
	      4'd0) &&
	     (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) ;
  assign stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 =
	     stage1_rg_stage_input[335:334] == rg_epoch ;
  assign stage1_rg_stage_input_BITS_30_TO_10__q2 =
	     stage1_rg_stage_input[30:10] ;
  assign stage1_rg_stage_input_BITS_63_TO_51__q1 =
	     stage1_rg_stage_input[63:51] ;
  assign stage1_rg_stage_input_BITS_75_TO_64__q6 =
	     stage1_rg_stage_input[75:64] ;
  assign stage1_rg_stage_input_BITS_87_TO_76__q21 =
	     stage1_rg_stage_input[87:76] ;
  assign stage3_rg_full_3_OR_NOT_IF_stage2_rg_full_09_T_ETC___d2055 =
	     stage3_rg_full ||
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 !=
	     2'd0 ||
	     !stage1_rg_full ||
	     !stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	     IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915 ;
  assign stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d374 =
	     stage3_rg_stage3[139:135] == stage1_rg_stage_input[139:135] ;
  assign stage3_rg_stage3_5_BITS_139_TO_135_04_EQ_stage_ETC___d382 =
	     stage3_rg_stage3[139:135] == stage1_rg_stage_input[134:130] ;
  assign stageD_f_reset_rsps_i_notEmpty__966_AND_stage1_ETC___d1981 =
	     stageD_f_reset_rsps$EMPTY_N && stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     (!rg_run_on_reset ||
	      NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1975) ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1849 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     !near_mem$imem_exc ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1855 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd0 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1859 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd1 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1863 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd2 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1867 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd3 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1871 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd4 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1875 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd5 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1879 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd6 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1883 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd7 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1887 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd8 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1891 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd9 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1895 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd11 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1899 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd12 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1903 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd13 ;
  assign stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1907 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	     near_mem$imem_exc &&
	     near_mem$imem_exc_code == 4'd15 ;
  assign sxl__h6285 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[35:34] :
	       2'd0 ;
  assign tmp__h13072 =
	     rs1_val_bypassed__h4833[31:0] >> stage1_rg_stage_input[80:76] |
	     ~(32'hFFFFFFFF >> stage1_rg_stage_input[80:76]) &
	     {32{rs1_val_bypassed833_BITS_31_TO_0__q7[31]}} ;
  assign trap_info_tval__h12506 =
	     (stage1_rg_stage_input[151:145] != 7'b1101111 &&
	      stage1_rg_stage_input[151:145] != 7'b1100111 &&
	      (stage1_rg_stage_input[151:145] != 7'b1110011 ||
	       stage1_rg_stage_input[112:110] != 3'b0 ||
	       rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_EQ_0_ETC___d1375)) ?
	       (stage1_rg_stage_input[333] ?
		  { 32'd0, stage1_rg_stage_input[263:232] } :
		  { 48'd0, stage1_rg_stage_input[231:216] }) :
	       CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q24 ;
  assign uxl__h6286 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[33:32] :
	       2'd0 ;
  assign v32__h8925 = { stage1_rg_stage_input[50:31], 12'h0 } ;
  assign v__h22604 = rg_epoch + 2'd1 ;
  assign val__h8312 =
	     (IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 ==
	      2'd2 &&
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d313) ?
	       x_out_bypass_rd_val__h7998 :
	       rd_val__h8310 ;
  assign val__h8337 =
	     (IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 ==
	      2'd2 &&
	      IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d315) ?
	       x_out_bypass_rd_val__h7998 :
	       rd_val__h8335 ;
  assign value__h12616 =
	     stage1_rg_stage_input[332] ?
	       stage1_rg_stage_input[327:264] :
	       trap_info_tval__h12506 ;
  assign x__h12994 =
	     rs1_val_bypassed__h4833[31:0] << stage1_rg_stage_input[80:76] ;
  assign x__h13047 =
	     rs1_val_bypassed__h4833[31:0] >> stage1_rg_stage_input[80:76] ;
  assign x__h13182 = rs1_val_bypassed__h4833[31:0] << rs2_val__h8632[4:0] ;
  assign x__h13227 = rs1_val_bypassed__h4833[31:0] >> rs2_val__h8632[4:0] ;
  assign x__h27961 =
	     csr_regfile_read_csr_mcycle__2_MINUS_rg_start__ETC___d2346[63:0] /
	     _theResult____h27960 ;
  assign x_exc_code__h35524 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_data_to_stage1_instr__h13668 =
	     stageD_rg_data[165] ? stageD_rg_data[95:64] : instr___1__h13704 ;
  assign x_out_data_to_stage2_fval1__h8515 =
	     (IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 ==
	      2'd2 &&
	      IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d318) ?
	       x_out_fbypass_rd_val__h8126 :
	       rd_val__h8360 ;
  assign x_out_data_to_stage2_fval3__h8517 =
	     (IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 ==
	      2'd2 &&
	      IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d322) ?
	       x_out_fbypass_rd_val__h8126 :
	       rd_val__h8409 ;
  assign x_out_data_to_stage2_rd__h8511 =
	     stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ?
	       data_to_stage2_rd__h8494 :
	       5'd0 ;
  assign x_out_data_to_stage2_rounding_mode__h8521 =
	     (stage1_rg_stage_input[112:110] == 3'b111) ?
	       csr_regfile$read_frm :
	       stage1_rg_stage_input[112:110] ;
  assign x_out_data_to_stage2_val2__h8514 =
	     (stage1_rg_stage_input[151:145] == 7'b1100011) ?
	       branch_target__h8636 :
	       IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1267 ;
  assign x_out_next_pc__h8449 =
	     IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d912 ?
	       data_to_stage2_addr__h8495 :
	       fall_through_pc__h8432 ;
  assign x_out_trap_info_exc_code__h12511 =
	     stage1_rg_stage_input[332] ?
	       stage1_rg_stage_input[331:328] :
	       alu_outputs_exc_code__h9607 ;
  assign y__h29372 = ~rs1_val__h29109 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4: value__h7695 = stage2_rg_stage2[493:430];
      default: value__h7695 = stage2_rg_stage2[493:430];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  x_out_trap_info_exc_code__h7732 = near_mem$dmem_exc_code;
      default: x_out_trap_info_exc_code__h7732 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4: value__h7756 = stage2_rg_stage2[389:326];
      default: value__h7756 = 64'd0;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_fbox$word_snd)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  x_out_data_to_stage3_fpr_flags__h7456 = 5'd0;
      default: x_out_data_to_stage3_fpr_flags__h7456 = stage2_fbox$word_snd;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h7452 = stage2_rg_stage2[394:390];
      3'd2: x_out_data_to_stage3_rd__h7452 = 5'd0;
      default: x_out_data_to_stage3_rd__h7452 = stage2_rg_stage2[394:390];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h7997 = stage2_rg_stage2[394:390];
      default: x_out_bypass_rd__h7997 = stage2_rg_stage2[394:390];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4: x_out_fbypass_rd__h8125 = stage2_rg_stage2[394:390];
      default: x_out_fbypass_rd__h8125 = stage2_rg_stage2[394:390];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h29109 = rg_csr_val1;
      default: rs1_val__h29109 = { 59'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or
	  output_stage2___1_data_to_stage3_frd_val__h7357)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd2, 3'd3:
	  x_out_data_to_stage3_frd_val__h7457 = stage2_rg_stage2[197:134];
      3'd1, 3'd4:
	  x_out_data_to_stage3_frd_val__h7457 =
	      output_stage2___1_data_to_stage3_frd_val__h7357;
      default: x_out_data_to_stage3_frd_val__h7457 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___snd_snd_rd_val__h7428 or
	  near_mem$dmem_word64 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd2:
	  x_out_data_to_stage3_rd_val__h7453 = stage2_rg_stage2[325:262];
      3'd1, 3'd4: x_out_data_to_stage3_rd_val__h7453 = near_mem$dmem_word64;
      3'd3: x_out_data_to_stage3_rd_val__h7453 = stage2_mbox$word;
      default: x_out_data_to_stage3_rd_val__h7453 =
		   _theResult___snd_snd_rd_val__h7428;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___snd_snd_rd_val__h7428 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0, 3'd1, 3'd4:
	  x_out_bypass_rd_val__h7998 = stage2_rg_stage2[325:262];
      3'd3: x_out_bypass_rd_val__h7998 = stage2_mbox$word;
      default: x_out_bypass_rd_val__h7998 =
		   _theResult___snd_snd_rd_val__h7428;
    endcase
  end
  always@(stage2_rg_stage2 or _theResult___snd_fst_rd_val__h8117)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4: x_out_fbypass_rd_val__h8126 = stage2_rg_stage2[197:134];
      default: x_out_fbypass_rd_val__h8126 =
		   _theResult___snd_fst_rd_val__h8117;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100111,
      7'b1101111:
	  data_to_stage2_rd__h8494 = stage1_rg_stage_input[144:140];
      7'b1100011: data_to_stage2_rd__h8494 = 5'd0;
      default: data_to_stage2_rd__h8494 = stage1_rg_stage_input[144:140];
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140 or
	  IF_near_mem_dmem_valid__33_THEN_IF_near_mem_dm_ETC___d136 or
	  IF_stage2_mbox_valid__37_THEN_2_ELSE_1___d138)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0: CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q3 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q3 =
	      IF_near_mem_dmem_valid__33_THEN_IF_near_mem_dm_ETC___d136;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q3 =
	      IF_stage2_mbox_valid__37_THEN_2_ELSE_1___d138;
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q3 =
		   IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d161 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d161 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d161 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d171 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d171 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d171 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140 or
	  IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d268 or
	  IF_stage2_mbox_valid__37_THEN_2_ELSE_1___d138)
  begin
    case (stage2_rg_stage2[397:395])
      3'd0: CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q4 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q4 =
	      IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d268;
      3'd2: CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q4 = 2'd0;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q4 =
	      IF_stage2_mbox_valid__37_THEN_2_ELSE_1___d138;
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_0_2_1_IF_ETC__q4 =
		   stage2_rg_stage2[5] ?
		     2'd0 :
		     IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140 or
	  IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d288)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_IF_NOT_ETC__q5 =
	      IF_NOT_near_mem_dmem_valid__33_55_OR_NOT_near__ETC___d288;
      3'd2, 3'd3:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_IF_NOT_ETC__q5 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_1_IF_NOT_ETC__q5 =
		   stage2_rg_stage2[5] ?
		     IF_stage2_fbox_valid__39_THEN_2_ELSE_1___d140 :
		     2'd0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult___fst__h10548 or
	  rd_val___1__h13125 or
	  rd_val___1__h13179 or rd_val___1__h13224 or rd_val___1__h13173)
  begin
    case (stage1_rg_stage_input[97:88])
      10'b0: alu_outputs___1_val1__h8913 = rd_val___1__h13125;
      10'b0000000001: alu_outputs___1_val1__h8913 = rd_val___1__h13179;
      10'b0000000101: alu_outputs___1_val1__h8913 = rd_val___1__h13224;
      10'b0100000000: alu_outputs___1_val1__h8913 = rd_val___1__h13173;
      default: alu_outputs___1_val1__h8913 = _theResult___fst__h10548;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392 or
	  IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388 or
	  IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 =
	      !IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388;
      3'b001:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 =
	      IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388;
      3'b100:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 =
	      !IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390;
      3'b101:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 =
	      IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390;
      3'b110:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 =
	      !IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392;
      default: IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d723 =
		   stage1_rg_stage_input[112:110] != 3'b111 ||
		   IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392 or
	  IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388 or
	  IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 =
	      IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388;
      3'b001:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 =
	      !IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d388;
      3'b100:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 =
	      IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390;
      3'b101:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 =
	      !IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d390;
      3'b110:
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 =
	      IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392;
      default: IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 =
		   stage1_rg_stage_input[112:110] == 3'b111 &&
		   !IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d392;
    endcase
  end
  always@(stage1_rg_stage_input or rm__h9474)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11 =
	      stage1_rg_stage_input[99:98] != 2'b0 &&
	      stage1_rg_stage_input[99:98] != 2'b01;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q11 =
		   stage1_rg_stage_input[104:98] != 7'h0 &&
		   stage1_rg_stage_input[104:98] != 7'h04 &&
		   stage1_rg_stage_input[104:98] != 7'h08 &&
		   stage1_rg_stage_input[104:98] != 7'h0C &&
		   stage1_rg_stage_input[104:98] != 7'h2C &&
		   (stage1_rg_stage_input[104:98] != 7'h10 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h10 ||
		    rm__h9474 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h10 ||
		    rm__h9474 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h60 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h68 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h14 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h14 ||
		    rm__h9474 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h50 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h50 ||
		    rm__h9474 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h50 ||
		    rm__h9474 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h70 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h78 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h70 ||
		    rm__h9474 != 3'd1) &&
		   stage1_rg_stage_input[104:98] != 7'b0000001 &&
		   stage1_rg_stage_input[104:98] != 7'h05 &&
		   stage1_rg_stage_input[104:98] != 7'b0001001 &&
		   stage1_rg_stage_input[104:98] != 7'h0D &&
		   stage1_rg_stage_input[104:98] != 7'h2D &&
		   (stage1_rg_stage_input[104:98] != 7'h11 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h11 ||
		    rm__h9474 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h11 ||
		    rm__h9474 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h61 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h69 ||
		    stage1_rg_stage_input[134:130] != 5'd3) &&
		   (stage1_rg_stage_input[104:98] != 7'h21 ||
		    stage1_rg_stage_input[134:130] != 5'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h20 ||
		    stage1_rg_stage_input[134:130] != 5'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h15 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h15 ||
		    rm__h9474 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h51 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h51 ||
		    rm__h9474 != 3'd1) &&
		   (stage1_rg_stage_input[104:98] != 7'h51 ||
		    rm__h9474 != 3'd2) &&
		   (stage1_rg_stage_input[104:98] != 7'h71 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h79 ||
		    rm__h9474 != 3'd0) &&
		   (stage1_rg_stage_input[104:98] != 7'h71 ||
		    rm__h9474 != 3'd1);
    endcase
  end
  always@(stage1_rg_stage_input or
	  csr_regfile_read_mstatus__4_BITS_14_TO_13_6_EQ_ETC___d702 or
	  csr_regfile$read_mstatus)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d706 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011 ||
	      csr_regfile$read_mstatus[14:13] == 2'h0;
      7'b0100111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d706 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011 ||
	      csr_regfile$read_mstatus[14:13] == 2'h0;
      7'b0101111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d706 =
	      stage1_rg_stage_input[109:105] != 5'b00010 &&
	      stage1_rg_stage_input[109:105] != 5'b00011 &&
	      stage1_rg_stage_input[109:105] != 5'b0 &&
	      stage1_rg_stage_input[109:105] != 5'b00001 &&
	      stage1_rg_stage_input[109:105] != 5'b01100 &&
	      stage1_rg_stage_input[109:105] != 5'b01000 &&
	      stage1_rg_stage_input[109:105] != 5'b00100 &&
	      stage1_rg_stage_input[109:105] != 5'b10000 &&
	      stage1_rg_stage_input[109:105] != 5'b11000 &&
	      stage1_rg_stage_input[109:105] != 5'b10100 &&
	      stage1_rg_stage_input[109:105] != 5'b11100 ||
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      default: IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d706 =
		   stage1_rg_stage_input[151:145] != 7'b1010011 &&
		   stage1_rg_stage_input[151:145] != 7'b1000011 &&
		   stage1_rg_stage_input[151:145] != 7'b1000111 &&
		   stage1_rg_stage_input[151:145] != 7'b1001011 &&
		   stage1_rg_stage_input[151:145] != 7'b1001111 ||
		   csr_regfile_read_mstatus__4_BITS_14_TO_13_6_EQ_ETC___d702;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d706)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b100 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b101 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b110 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      stage1_rg_stage_input[112:110] != 3'b001 &&
	      stage1_rg_stage_input[112:110] != 3'b010 &&
	      stage1_rg_stage_input[112:110] != 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 =
		   stage1_rg_stage_input[151:145] == 7'b0001111 ||
		   stage1_rg_stage_input[151:145] == 7'b1110011 ||
		   IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d706;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12 or
	  NOT_stage1_rg_stage_input_09_BITS_112_TO_110_5_ETC___d435)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d714 =
	      NOT_stage1_rg_stage_input_09_BITS_112_TO_110_5_ETC___d435;
      7'b0011011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d714 =
	      stage1_rg_stage_input[112:110] != 3'b0 &&
	      (stage1_rg_stage_input[112:110] != 3'b001 ||
	       stage1_rg_stage_input[257]) &&
	      (stage1_rg_stage_input[112:110] != 3'b101 ||
	       stage1_rg_stage_input[257]);
      7'b0111011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d714 =
	      stage1_rg_stage_input[97:88] != 10'b0 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000000 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000001 &&
	      stage1_rg_stage_input[97:88] != 10'b0000000101 &&
	      stage1_rg_stage_input[97:88] != 10'b0100000101;
      default: IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d714 =
		   stage1_rg_stage_input[151:145] != 7'b0110111 &&
		   stage1_rg_stage_input[151:145] != 7'b0010111 &&
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q12;
    endcase
  end
  always@(stage1_rg_stage_input or rm__h9474)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
	      stage1_rg_stage_input[99:98] == 2'b0 ||
	      stage1_rg_stage_input[99:98] == 2'b01;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q13 =
		   stage1_rg_stage_input[104:98] == 7'h0 ||
		   stage1_rg_stage_input[104:98] == 7'h04 ||
		   stage1_rg_stage_input[104:98] == 7'h08 ||
		   stage1_rg_stage_input[104:98] == 7'h0C ||
		   stage1_rg_stage_input[104:98] == 7'h2C ||
		   stage1_rg_stage_input[104:98] == 7'h10 &&
		   (rm__h9474 == 3'd0 || rm__h9474 == 3'd1 ||
		    rm__h9474 == 3'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h60 &&
		   stage1_rg_stage_input[134:130] == 5'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h60 &&
		   (stage1_rg_stage_input[134:130] == 5'd1 ||
		    stage1_rg_stage_input[134:130] == 5'd2 ||
		    stage1_rg_stage_input[134:130] == 5'd3) ||
		   stage1_rg_stage_input[104:98] == 7'h68 &&
		   (stage1_rg_stage_input[134:130] == 5'd0 ||
		    stage1_rg_stage_input[134:130] == 5'd1 ||
		    stage1_rg_stage_input[134:130] == 5'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h68 &&
		   stage1_rg_stage_input[134:130] == 5'd3 ||
		   stage1_rg_stage_input[104:98] == 7'h14 &&
		   rm__h9474 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h14 &&
		   rm__h9474 == 3'd1 ||
		   stage1_rg_stage_input[104:98] == 7'h50 &&
		   (rm__h9474 == 3'd0 || rm__h9474 == 3'd1) ||
		   stage1_rg_stage_input[104:98] == 7'h50 &&
		   rm__h9474 == 3'd2 ||
		   (stage1_rg_stage_input[104:98] == 7'h70 ||
		    stage1_rg_stage_input[104:98] == 7'h78) &&
		   rm__h9474 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h70 &&
		   rm__h9474 == 3'd1 ||
		   stage1_rg_stage_input[104:98] == 7'b0000001 ||
		   stage1_rg_stage_input[104:98] == 7'h05 ||
		   stage1_rg_stage_input[104:98] == 7'b0001001 ||
		   stage1_rg_stage_input[104:98] == 7'h0D ||
		   stage1_rg_stage_input[104:98] == 7'h2D ||
		   stage1_rg_stage_input[104:98] == 7'h11 &&
		   rm__h9474 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h11 &&
		   (rm__h9474 == 3'd1 || rm__h9474 == 3'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h61 &&
		   stage1_rg_stage_input[134:130] == 5'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h61 &&
		   (stage1_rg_stage_input[134:130] == 5'd1 ||
		    stage1_rg_stage_input[134:130] == 5'd2 ||
		    stage1_rg_stage_input[134:130] == 5'd3) ||
		   stage1_rg_stage_input[104:98] == 7'h69 &&
		   (stage1_rg_stage_input[134:130] == 5'd0 ||
		    stage1_rg_stage_input[134:130] == 5'd1 ||
		    stage1_rg_stage_input[134:130] == 5'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h69 &&
		   stage1_rg_stage_input[134:130] == 5'd3 ||
		   stage1_rg_stage_input[104:98] == 7'h21 &&
		   stage1_rg_stage_input[134:130] == 5'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h20 &&
		   stage1_rg_stage_input[134:130] == 5'd1 ||
		   stage1_rg_stage_input[104:98] == 7'h15 &&
		   (rm__h9474 == 3'd0 || rm__h9474 == 3'd1) ||
		   stage1_rg_stage_input[104:98] == 7'h51 &&
		   rm__h9474 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h51 &&
		   (rm__h9474 == 3'd1 || rm__h9474 == 3'd2) ||
		   stage1_rg_stage_input[104:98] == 7'h71 &&
		   rm__h9474 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h79 &&
		   rm__h9474 == 3'd0 ||
		   stage1_rg_stage_input[104:98] == 7'h71 &&
		   rm__h9474 == 3'd1;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_csr_regfile_read_mstatus__4_BITS_14_TO_13__ETC___d895 or
	  csr_regfile$read_mstatus)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d899 =
	      (stage1_rg_stage_input[112:110] == 3'b0 ||
	       stage1_rg_stage_input[112:110] == 3'b100 ||
	       stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101 ||
	       stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b110 ||
	       stage1_rg_stage_input[112:110] == 3'b011) &&
	      csr_regfile$read_mstatus[14:13] != 2'h0;
      7'b0100111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d899 =
	      (stage1_rg_stage_input[112:110] == 3'b0 ||
	       stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b011) &&
	      csr_regfile$read_mstatus[14:13] != 2'h0;
      7'b0101111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d899 =
	      (stage1_rg_stage_input[109:105] == 5'b00010 ||
	       stage1_rg_stage_input[109:105] == 5'b00011 ||
	       stage1_rg_stage_input[109:105] == 5'b0 ||
	       stage1_rg_stage_input[109:105] == 5'b00001 ||
	       stage1_rg_stage_input[109:105] == 5'b01100 ||
	       stage1_rg_stage_input[109:105] == 5'b01000 ||
	       stage1_rg_stage_input[109:105] == 5'b00100 ||
	       stage1_rg_stage_input[109:105] == 5'b10000 ||
	       stage1_rg_stage_input[109:105] == 5'b11000 ||
	       stage1_rg_stage_input[109:105] == 5'b10100 ||
	       stage1_rg_stage_input[109:105] == 5'b11100) &&
	      (stage1_rg_stage_input[112:110] == 3'b010 ||
	       stage1_rg_stage_input[112:110] == 3'b011);
      default: IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d899 =
		   (stage1_rg_stage_input[151:145] == 7'b1010011 ||
		    stage1_rg_stage_input[151:145] == 7'b1000011 ||
		    stage1_rg_stage_input[151:145] == 7'b1000111 ||
		    stage1_rg_stage_input[151:145] == 7'b1001011 ||
		    stage1_rg_stage_input[151:145] == 7'b1001111) &&
		   NOT_csr_regfile_read_mstatus__4_BITS_14_TO_13__ETC___d895;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d899)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      stage1_rg_stage_input[112:110] == 3'b100 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b101 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b110 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      stage1_rg_stage_input[112:110] == 3'b001 ||
	      stage1_rg_stage_input[112:110] == 3'b010 ||
	      stage1_rg_stage_input[112:110] == 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 =
		   stage1_rg_stage_input[151:145] != 7'b0001111 &&
		   stage1_rg_stage_input[151:145] != 7'b1110011 &&
		   IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d899;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14 or
	  stage1_rg_stage_input_09_BITS_112_TO_110_53_EQ_ETC___d755)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d907 =
	      stage1_rg_stage_input_09_BITS_112_TO_110_53_EQ_ETC___d755;
      7'b0011011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d907 =
	      stage1_rg_stage_input[112:110] == 3'b0 ||
	      (stage1_rg_stage_input[112:110] == 3'b001 ||
	       stage1_rg_stage_input[112:110] == 3'b101) &&
	      !stage1_rg_stage_input[257];
      7'b0111011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d907 =
	      stage1_rg_stage_input[97:88] == 10'b0 ||
	      stage1_rg_stage_input[97:88] == 10'b0100000000 ||
	      stage1_rg_stage_input[97:88] == 10'b0000000001 ||
	      stage1_rg_stage_input[97:88] == 10'b0000000101 ||
	      stage1_rg_stage_input[97:88] == 10'b0100000101;
      default: IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d907 =
		   stage1_rg_stage_input[151:145] == 7'b0110111 ||
		   stage1_rg_stage_input[151:145] == 7'b0010111 ||
		   CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q14;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd11;
    endcase
  end
  always@(stage1_rg_stage_input or CASE_rg_cur_priv_0b0_8_0b1_9_11__q15)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q15;
      12'b000000000001:
	  CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 = 4'd3;
      default: CASE_stage1_rg_stage_input_BITS_87_TO_76_0b0_C_ETC__q16 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or alu_outputs___1_exc_code__h9319)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100011:
	  alu_outputs_exc_code__h9607 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h9607 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h9607 = alu_outputs___1_exc_code__h9319;
      default: alu_outputs_exc_code__h9607 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  rg_cur_priv or
	  IF_rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_E_ETC___d966)
  begin
    case (stage1_rg_stage_input[87:76])
      12'b0, 12'b000000000001:
	  IF_stage1_rg_stage_input_09_BITS_87_TO_76_45_E_ETC___d968 = 4'd12;
      default: IF_stage1_rg_stage_input_09_BITS_87_TO_76_45_E_ETC___d968 =
		   (rg_cur_priv == 2'b11 &&
		    stage1_rg_stage_input[87:76] == 12'b001100000010) ?
		     4'd8 :
		     IF_rg_cur_priv_3_EQ_0b11_37_OR_rg_cur_priv_3_E_ETC___d966;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q17 = 4'd5;
      3'b001: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q17 = 4'd6;
      default: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q17 =
		   4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_144_TO_140_35_ETC___d970)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b0:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q18 =
	      IF_stage1_rg_stage_input_09_BITS_144_TO_140_35_ETC___d970;
      3'b001, 3'b101:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q18 = 4'd3;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q18 = 4'd4;
      3'd4: CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q18 = 4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d928 or
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q17 or
	  IF_NOT_stage1_rg_stage_input_09_BITS_112_TO_11_ETC___d922 or
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d932 or
	  IF_NOT_csr_regfile_read_mstatus__4_BITS_14_TO__ETC___d978 or
	  CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q18)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d928;
      7'b0001111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q17;
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      IF_NOT_stage1_rg_stage_input_09_BITS_112_TO_11_ETC___d922;
      7'b0010111, 7'b0110111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 = 4'd1;
      7'b0011011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      (stage1_rg_stage_input[112:110] != 3'b0 &&
	       (stage1_rg_stage_input[112:110] != 3'b001 ||
		stage1_rg_stage_input[257]) &&
	       (stage1_rg_stage_input[112:110] != 3'b101 ||
		stage1_rg_stage_input[257])) ?
		4'd12 :
		4'd1;
      7'b0100011, 7'b0100111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d932;
      7'b0101111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      ((stage1_rg_stage_input[109:105] == 5'b00010 ||
		stage1_rg_stage_input[109:105] == 5'b00011 ||
		stage1_rg_stage_input[109:105] == 5'b0 ||
		stage1_rg_stage_input[109:105] == 5'b00001 ||
		stage1_rg_stage_input[109:105] == 5'b01100 ||
		stage1_rg_stage_input[109:105] == 5'b01000 ||
		stage1_rg_stage_input[109:105] == 5'b00100 ||
		stage1_rg_stage_input[109:105] == 5'b10000 ||
		stage1_rg_stage_input[109:105] == 5'b11000 ||
		stage1_rg_stage_input[109:105] == 5'b10100 ||
		stage1_rg_stage_input[109:105] == 5'b11100) &&
	       (stage1_rg_stage_input[112:110] == 3'b010 ||
		stage1_rg_stage_input[112:110] == 3'b011)) ?
		4'd1 :
		4'd12;
      7'b0111011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      (stage1_rg_stage_input[97:88] != 10'b0 &&
	       stage1_rg_stage_input[97:88] != 10'b0100000000 &&
	       stage1_rg_stage_input[97:88] != 10'b0000000001 &&
	       stage1_rg_stage_input[97:88] != 10'b0000000101 &&
	       stage1_rg_stage_input[97:88] != 10'b0100000101) ?
		4'd12 :
		4'd1;
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111, 7'b1010011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      IF_NOT_csr_regfile_read_mstatus__4_BITS_14_TO__ETC___d978;
      7'b1110011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
	      CASE_stage1_rg_stage_input_BITS_112_TO_110_0b0_ETC__q18;
      default: IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 =
		   4'd12;
    endcase
  end
  always@(stage1_rg_stage_input or
	  stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d748 or
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990 or
	  IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d993 =
	      (stage1_rg_stage_input[112:110] != 3'b0 &&
	       stage1_rg_stage_input[112:110] != 3'b001 &&
	       stage1_rg_stage_input[112:110] != 3'b100 &&
	       stage1_rg_stage_input[112:110] != 3'b101 &&
	       stage1_rg_stage_input[112:110] != 3'b110 &&
	       stage1_rg_stage_input[112:110] != 3'b111) ?
		4'd12 :
		(IF_stage1_rg_stage_input_09_BITS_112_TO_110_53_ETC___d399 ?
		   4'd2 :
		   4'd1);
      7'b1100111, 7'b1101111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d993 = 4'd2;
      default: IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d993 =
		   stage1_rg_stage_input_09_BITS_151_TO_145_51_EQ_ETC___d748 ?
		     4'd1 :
		     IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d990;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 = 3'd0;
      7'b0100011, 7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 = 3'd2;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 = 3'd4;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19 = 3'd5;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20 = 3'd0;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q20 =
		   ((stage1_rg_stage_input[151:145] == 7'b0110011 ||
		     stage1_rg_stage_input[151:145] == 7'b0111011) &&
		    stage1_rg_stage_input[104:98] == 7'b0000001) ?
		     3'd3 :
		     CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q19;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult_____1_fst__h10341 or
	  rd_val___1__h10309 or
	  rd_val___1__h10316 or rd_val___1__h10323 or rd_val___1__h10330)
  begin
    case (stage1_rg_stage_input[112:110])
      3'b010: _theResult_____1_fst__h10313 = rd_val___1__h10309;
      3'b011: _theResult_____1_fst__h10313 = rd_val___1__h10316;
      3'b100: _theResult_____1_fst__h10313 = rd_val___1__h10323;
      3'b110: _theResult_____1_fst__h10313 = rd_val___1__h10330;
      default: _theResult_____1_fst__h10313 = _theResult_____1_fst__h10341;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_addr__h9038 or
	  IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d1157 or
	  rs1_val_bypassed__h4833 or
	  alu_outputs___1_addr__h8657 or
	  alu_outputs___1_addr__h8718 or alu_outputs___1_addr__h8685)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0000011, 7'b0000111:
	  x_out_data_to_stage2_addr__h8512 =
	      IF_stage1_rg_stage_input_09_BITS_139_TO_135_12_ETC___d1157;
      7'b0100011:
	  x_out_data_to_stage2_addr__h8512 = alu_outputs___1_addr__h9038;
      7'b0101111: x_out_data_to_stage2_addr__h8512 = rs1_val_bypassed__h4833;
      7'b1100011:
	  x_out_data_to_stage2_addr__h8512 = alu_outputs___1_addr__h8657;
      7'b1100111:
	  x_out_data_to_stage2_addr__h8512 = alu_outputs___1_addr__h8718;
      7'b1101111:
	  x_out_data_to_stage2_addr__h8512 = alu_outputs___1_addr__h8685;
      default: x_out_data_to_stage2_addr__h8512 = alu_outputs___1_addr__h9038;
    endcase
  end
  always@(stage1_rg_stage_input or rs2_val__h8632)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0100011, 7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 =
	      rs2_val__h8632;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q23 =
		   rs2_val__h8632;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_rg_cur_priv_3_EQ_0b11_37_384_AND_NOT_rg_cu_ETC___d1390 or
	  data_to_stage2_addr__h8495)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q24 =
	      data_to_stage2_addr__h8495;
      default: CASE_stage1_rg_stage_input_BITS_151_TO_145_0b1_ETC__q24 =
		   (stage1_rg_stage_input[151:145] == 7'b1110011 &&
		    stage1_rg_stage_input[112:110] == 3'b0 &&
		    NOT_rg_cur_priv_3_EQ_0b11_37_384_AND_NOT_rg_cu_ETC___d1390) ?
		     stage1_rg_stage_input[401:338] :
		     64'd0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  rs1_val_bypassed__h4833 or
	  alu_outputs___1_val1__h8853 or
	  alu_outputs___1_val1__h8959 or
	  alu_outputs___1_val1__h8883 or
	  alu_outputs___1_val1__h9351 or
	  alu_outputs___1_val1__h8936 or
	  alu_outputs___1_val1__h8913 or alu_outputs___1_val1__h9323)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
	      alu_outputs___1_val1__h8853;
      7'b0010111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
	      alu_outputs___1_val1__h8959;
      7'b0011011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
	      alu_outputs___1_val1__h8883;
      7'b0101111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
	      alu_outputs___1_val1__h9351;
      7'b0110111:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
	      alu_outputs___1_val1__h8936;
      7'b0111011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
	      alu_outputs___1_val1__h8913;
      7'b1110011:
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
	      alu_outputs___1_val1__h9323;
      default: IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1256 =
		   rs1_val_bypassed__h4833;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1258 or
	  IF_stage1_rg_stage_input_09_BIT_333_148_THEN_s_ETC___d1151)
  begin
    case (stage1_rg_stage_input[151:145])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h8513 =
	      IF_stage1_rg_stage_input_09_BIT_333_148_THEN_s_ETC___d1151;
      default: x_out_data_to_stage2_val1__h8513 =
		   IF_stage1_rg_stage_input_09_BITS_151_TO_145_51_ETC___d1258;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q25 =
	      stage2_rg_stage2[5];
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q25 =
		   stage2_rg_stage2[397:395] != 3'd2 &&
		   stage2_rg_stage2[397:395] != 3'd3 &&
		   stage2_rg_stage2[5];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[397:395])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q26 =
	      !stage2_rg_stage2[5];
      default: CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q26 =
		   stage2_rg_stage2[397:395] == 3'd2 ||
		   stage2_rg_stage2[397:395] == 3'd3 ||
		   !stage2_rg_stage2[5];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageD_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY 2'd0;
	stageF_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
	if (stageD_rg_full$EN)
	  stageD_rg_full <= `BSV_ASSIGNMENT_DELAY stageD_rg_full$D_IN;
	if (stageF_rg_epoch$EN)
	  stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY stageF_rg_epoch$D_IN;
	if (stageF_rg_full$EN)
	  stageF_rg_full <= `BSV_ASSIGNMENT_DELAY stageF_rg_full$D_IN;
      end
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_instr_15_0$EN)
      imem_rg_instr_15_0 <= `BSV_ASSIGNMENT_DELAY imem_rg_instr_15_0$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (imem_rg_tval$EN)
      imem_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_epoch$EN) rg_epoch <= `BSV_ASSIGNMENT_DELAY rg_epoch$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (stage1_rg_stage_input$EN)
      stage1_rg_stage_input <= `BSV_ASSIGNMENT_DELAY
	  stage1_rg_stage_input$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
    if (stageD_rg_data$EN)
      stageD_rg_data <= `BSV_ASSIGNMENT_DELAY stageD_rg_data$D_IN;
    if (stageF_rg_priv$EN)
      stageF_rg_priv <= `BSV_ASSIGNMENT_DELAY stageF_rg_priv$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_f3 = 3'h2;
    imem_rg_instr_15_0 = 16'hAAAA;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    imem_rg_tval = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_val1 = 64'hAAAAAAAAAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_epoch = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_trap_info = 132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    stage1_rg_full = 1'h0;
    stage1_rg_stage_input =
	402'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	496'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 =
	239'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_data =
	234'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_full = 1'h0;
    stageF_rg_epoch = 2'h2;
    stageF_rg_full = 1'h0;
    stageF_rg_priv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus,
		 rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", sxl__h6285, uxl__h6286);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[140]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("Rd %0d ", stage3_rg_stage3[139:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[140]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("rd_val:%h", stage3_rg_stage3[134:71]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full ||
	   !stage3_rg_stage3[140]))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("FRd %0d ", stage3_rg_stage3[139:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full ||
	   !stage3_rg_stage3[140]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[140])
	$write("frd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[493:430],
		 stage2_rg_stage2[429:398],
		 stage2_rg_stage2[495:494]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[493:430]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[493:430],
	       stage2_rg_stage2[429:398],
	       stage2_rg_stage2[495:494]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d161)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d171))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  stage2_rg_stage2[397:395] != 3'd1 &&
	  stage2_rg_stage2[397:395] != 3'd4 &&
	  stage2_rg_stage2[397:395] != 3'd2 &&
	  stage2_rg_stage2[397:395] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h7456);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   stage2_rg_stage2[397:395] == 3'd1 ||
	   stage2_rg_stage2[397:395] == 3'd4 ||
	   stage2_rg_stage2[397:395] == 3'd2 ||
	   stage2_rg_stage2[397:395] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  CASE_stage2_rg_stage2_BITS_397_TO_395_1_stage2_ETC__q25)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7452,
	       x_out_data_to_stage3_frd_val__h7457);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3 &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   CASE_stage2_rg_stage2_BITS_397_TO_395_1_NOT_st_ETC__q26))
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7452,
	       x_out_data_to_stage3_rd_val__h7453);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", value__h7695);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h7732);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", value__h7756, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", value__h7695);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h7732);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd3)
	$write("'h%h", value__h7756, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd1 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h7997);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 != 2'd0 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d275 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h7998);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 == 2'd0)
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 != 2'd0)
	$write("FRd %0d ", x_out_fbypass_rd__h8125);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 != 2'd0 &&
	  IF_NOT_stage2_rg_full_09_49_OR_stage2_rg_stage_ETC___d293 != 2'd1)
	$write("frd_val:%h", x_out_fbypass_rd_val__h8126);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("Output_Stage1",
	       " BUSY pc:%h",
	       stage1_rg_stage_input[401:338]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("Output_Stage1",
	       " NONPIPE: pc:%h",
	       stage1_rg_stage_input[401:338]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd1)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd2)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd3)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd4)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd5)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd6)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd8)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd9)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd10)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd11)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  NOT_stage1_rg_stage_input_09_BITS_335_TO_334_1_ETC___d1069)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[401:338],
	       stage1_rg_stage_input[263:232],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d915) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd4)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d1123)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h8511);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h8512,
	       x_out_data_to_stage2_val1__h8513,
	       x_out_data_to_stage2_val2__h8514);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h8515,
	       alu_outputs___1_fval2__h9042,
	       x_out_data_to_stage2_fval3__h8517);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd0)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd1)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd2)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd3)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd4)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd5)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd6)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd7)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd8)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd9)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd10)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd11)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d1344)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("'h%h", stage1_rg_stage_input[401:338]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("'h%h", x_out_trap_info_exc_code__h12511);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d731)
	$write("'h%h", value__h12616, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_08_AND_NOT_stage1_rg_stage_inpu_ETC___d918)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d325)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  !IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405)
	$write("\n        redirect next_pc:%h", x_out_next_pc__h8449);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d349) &&
	  IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageD: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 stageD_rg_data[233:170],
		 x_out_data_to_stage1_instr__h13668,
		 stageD_rg_data[167:166],
		 stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  stageD_rg_data[165])
	$write("  instr_C:%0h", stageD_rg_data[79:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  !stageD_rg_data[165])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("  instr:%0h  pred_pc:%0h",
	       x_out_data_to_stage1_instr__h13668,
	       stageD_rg_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] != 4'd0 &&
	  stageD_rg_data[163:160] != 4'd1 &&
	  stageD_rg_data[163:160] != 4'd2 &&
	  stageD_rg_data[163:160] != 4'd3 &&
	  stageD_rg_data[163:160] != 4'd4 &&
	  stageD_rg_data[163:160] != 4'd5 &&
	  stageD_rg_data[163:160] != 4'd6 &&
	  stageD_rg_data[163:160] != 4'd7 &&
	  stageD_rg_data[163:160] != 4'd8 &&
	  stageD_rg_data[163:160] != 4'd9 &&
	  stageD_rg_data[163:160] != 4'd11 &&
	  stageD_rg_data[163:160] != 4'd12 &&
	  stageD_rg_data[163:160] != 4'd13 &&
	  stageD_rg_data[163:160] != 4'd15)
	$write("unknown trap Exc_Code %d", stageD_rg_data[163:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write(" tval %0h", stageD_rg_data[159:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageF: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 imem_rg_pc,
		 d_instr__h21292,
		 stageF_rg_priv,
		 stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834))
	$write(" BUSY: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840)
	$write("data_to_StageD {pc:%h  priv:%0d  epoch:%0d",
	       imem_rg_pc,
	       stageF_rg_priv,
	       stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840 &&
	  near_mem$imem_exc)
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1849)
	$write("  instr:%h  pred_pc:%h",
	       d_instr__h21292,
	       stageF_branch_predictor$predict_rsp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1855)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1859)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1863)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1867)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1871)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1875)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1879)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1883)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1887)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1891)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1895)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1899)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1903)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1907)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1936)
	$write("unknown trap Exc_Code %d", near_mem$imem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_823_AND_near_mem_imem_valid_AND_ETC___d1849)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_80_ETC___d1834))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_805_OR_ETC___d1840)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_332_BITS_131_TO_68_333_EQ_csr_reg_ETC___d2342)
	$display("%0d: %m.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[193:130],
		 rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_332_BITS_131_TO_68_333_EQ_csr_reg_ETC___d2342)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h27962,
		 cpifrac__h27963,
		 delta_CPI_cycles__h27958,
		 _theResult____h27960);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_332_BITS_131_TO_68_333_EQ_csr_reg_ETC___d2342)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[131:68],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3117 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[65:2],
		 rg_trap_info[131:68],
		 rg_trap_info[63:0],
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h28436,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h28436,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h29109,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h29109,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       x_out_next_pc__h8449,
	       v__h22604,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h8449,
		 rg_cur_priv,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3117 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[129:66],
		 csr_regfile$csr_ret_actions[63:0],
		 csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h22604,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h22604,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h22604,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h3117 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h22604,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       v__h22604,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       rg_sstatus_SUM,
	       rg_mstatus_MXR,
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False");
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       soc_map$m_pc_reset_value,
	       v__h22604,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 soc_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[140] &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  stage3_rg_stage3[69])
	$display("    S3.fa_deq: write FRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[139:135],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[140] &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  !stage3_rg_stage3[69])
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[139:135],
		 stage3_rg_stage3[134:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[493:430],
	       stage2_rg_stage2[429:398],
	       stage2_rg_stage2[495:494]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d161)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   IF_stage2_rg_stage2_10_BITS_397_TO_395_11_EQ_1_ETC___d171))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  stage2_rg_stage2[397:395] != 3'd0 &&
	  stage2_rg_stage2[397:395] != 3'd1 &&
	  stage2_rg_stage2[397:395] != 3'd4 &&
	  stage2_rg_stage2[397:395] != 3'd2 &&
	  stage2_rg_stage2[397:395] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h7456);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  (stage2_rg_stage2[397:395] == 3'd0 ||
	   stage2_rg_stage2[397:395] == 3'd1 ||
	   stage2_rg_stage2[397:395] == 3'd4 ||
	   stage2_rg_stage2[397:395] == 3'd2 ||
	   stage2_rg_stage2[397:395] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2100)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7452,
	       x_out_data_to_stage3_frd_val__h7457);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d2102)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h7452,
	       x_out_data_to_stage3_rd_val__h7453);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_09_THEN_IF_stage2_rg_stage2__ETC___d145 == 2'd2 &&
	  cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[493:430],
		 stage2_rg_stage2[429:398],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2106 &&
	  stage1_rg_full &&
	  (!stage1_rg_stage_input_09_BITS_335_TO_334_10_EQ_ETC___d311 ||
	   NOT_IF_stage2_rg_full_09_THEN_IF_stage2_rg_sta_ETC___d2005) &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 == 4'd0 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    rl_pipe: Discarding stage1 due to redirection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[401:338],
	       stage1_rg_stage_input[263:232],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 != 4'd0 &&
	  IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 != 4'd0 &&
	  IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 != 4'd0 &&
	  IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 != 4'd0 &&
	  IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 != 4'd0 &&
	  IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 == 3'd4)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 != 4'd0 &&
	  IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	  3'd0 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	  3'd1 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	  3'd2 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 !=
	  3'd3 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d1090 != 3'd4)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h8511);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h8512,
	       x_out_data_to_stage2_val1__h8513,
	       x_out_data_to_stage2_val2__h8514);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h8515,
	       alu_outputs___1_fval2__h9042,
	       x_out_data_to_stage2_fval3__h8517);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2200)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2113 &&
	  IF_stage1_rg_stage_input_09_BITS_335_TO_334_10_ETC___d996 != 4'd0 &&
	  IF_NOT_stage1_rg_full_08_19_OR_NOT_stage1_rg_s_ETC___d2116 &&
	  !IF_IF_stage1_rg_stage_input_09_BITS_151_TO_145_ETC___d1405 &&
	  NOT_cfg_verbosity_read__8_ULE_1_990___d1991)
	$display("%0d: fav_update_epoch: %0d -> %0d",
		 csr_regfile$read_csr_mcycle,
		 rg_epoch,
		 v__h22604);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2235 &&
	  stageD_rg_full &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    CPU_Stage1.enq: 0x%08h", stageD_rg_data[233:170]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("    CPU_StageD.enq (Data_StageF_to_StageD)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("    CPU_StageF.enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       next_pc__h26558,
	       epoch__h26556,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h  m_old_pc:",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  f_redirects$EMPTY_N)
	$write("tagged Valid ", "'h%h", f_redirects$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51 &&
	  !f_redirects$EMPTY_N)
	$write("tagged Invalid ", "");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d2276 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h3117 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[401:338],
		 stage1_rg_stage_input[263:232],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d51)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Flute  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV64)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h3117 != 4'd0)
	$display("%0d: %m.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

